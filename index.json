[
  {
    "categories": [
      "杂谈",
      "思考"
    ],
    "contents": "说起来也怪，觉得今年一定要去一次重庆，不是因为两年不在渝，也不是说一定要去哪里走一下，散发一下青春热血。只是感觉冥冥之中有种力量想让自己过去。\n8月份原定在南京有和群友们的论坛会议，所以月初作罢。结果这时候发现该去深圳了，报到大过天，只好两头全部放下，先学业为重乖乖去院里。9月安顿、正常学习、做实验云云，不一而足，然而去重庆再走一趟的这个想法却没有消散。\n正巧月中一朋友在帝都也打算十一回去，再问一下哈尔滨的一位爷，仨人一拍即合。那就开始买票吧，看着上个月不多那点补助，老老实实候补了一张卧铺，等十一一到直接过去，往好处想还不是 24h 的硬座。但通常认为不太会出问题的时候，那大概就要出问题了。\n先是一点抱怨的话 先是降温预警，但是看了一眼要一号到二号才降温，感觉倒也还好，不就是多带几件衣服嘛。然后就是出发当天，下铺是一对非常让人难以笑着说出来的母子\u0026hellip;夜深人静，前半夜只听得寂静的车厢小孩子尖叫、跑跳、大笑和他那母亲的责骂，下半夜小孩子挨了一顿好揍终于老实躺下了，他老娘开始借着充电外放电视剧。这一觉，大概会是需要闹钟在特定时间醒来的人比较羡慕的一觉，非常准时的 20 分钟醒来一次，不过还好个人理想和信念比较坚定，也能坚持一路到重庆北，回青旅放下东西，倒头便睡就是了。\n第一天夜里，去夜游了一回重大，微冷。第二天，重见老师，游览了一下虎溪，微冻。第三天，816 工程参观，微寒，卒，回深圳养病，悲。\n除了抱怨的话 重庆很好，重庆人还是那么直爽、开朗；重庆的景色很好，真正的碧水青山；重庆的东西还是那么美味，味道和当年离开重庆所差无几\u0026hellip;但是这些对我来说，仿佛并没有很重要似的。我原以为本次重庆之行我会触景生情，会开始怀念过去的生活，但却没有得偿所愿。我并没对重庆的一丝一毫产生一点点的情感，仿佛那都是别人的生活的地方和故事，而实际上现在重庆发生的事情、人和事都不再和我这个不在重庆生活的人有一丝一毫的关联了，也确实变成了其他人的故事，那里发生的是以其他人为主角的故事。而我终究也只是个过客罢了。\n那我又从此行获得了什么？我的所有行动都应当有我自己的意义，而我却觉得此行满足了我出行的意义。分析自己的行为，最终可能我所怀念的重大是重大，又不是重大，更可能是又人组成的重大,，我并不迷恋重大的景色，也不贪恋重大的味道和资源，但是又那些人，我熟悉的人组成的重大，才是我认识的重大。此行见到了我希望见到的人，这是重点，尝到了怀念的味道，这是锦上添花。\n景色可以变化，楼宇可以倒塌重建，味道可以从过去到现在传承但又随着时间适应而再次美味，但只有人，和人之间的关系才不会因为时间褪色，眼里的自己和眼里的其他人，像陈酿一般，因为时间会忽略了所有的青涩，因为时间会冲淡所有不舍，时间又会深化一切美好的感情，让它们更加丰满更加立体，今年那之后的它们可能不再是它们。\n别了重大，孩儿终将远航。别了重庆，那些年养育我的城市。\n",
    "permalink": "https://blog.weearc.top/posts/2504749448/",
    "section": "Archives",
    "tags": [
      "杂谈",
      "重庆"
    ],
    "title": "记最近回重庆的感悟和一点点思考"
  },
  {
    "categories": [
      "杂谈"
    ],
    "contents": "最近经常还是会碰到这种情况：因为某个点的意见不一致或者观点不同而引发争执。年初一和老爹大吵了一架，将近一周还没缓和。结果初七又和群里的朋友又因为很鸡毛蒜皮的事情争论起来。\n说到底，争执的原因不过都是些鸡毛蒜皮，张三咋了李四咋了这种小事，要么就是到底有没有观点地图炮这些，因为觉得自己被地图炮了然后去反驳，结果落得被狠狠挖苦一番的下场。倒不是觉得自己吵架能力强弱的问题，虽然说到底嘴笨脑子反应慢确实吵不过别人，但是为了这些无所谓的小事引发自己的烦恼反而去争执起来最终难受的还是自己。如果争执占了上风，所谓吵架吵赢，又赢在哪里，实则自己元气大伤，两人感情被消磨；而吵架输了，两人也许反目成仇，以后做些有的无的的事情更加折损自己的福德。争执因烦恼而起，烦恼又因什么而生，我不知道。但是通过观察自己，人升起烦恼的时候往往还是认为自己的“领地”被侵占，但是是真的被侵占，也并非如此。佛法中认为：\n煩惱是迷惑自性的魔障，佛法以「八萬四千」法數形容煩惱之多，但是若論煩惱的根本，則不出貪、瞋、癡、慢、疑、惡見等六種根本煩惱。\n一般的人，对于自己执着的事、人、物都想要据为己有，一旦没法达成，出现不顺己意的人、事、物就会心生排斥。执着是贪念，排斥是瞋恚。而凡事顺则喜，违逆则怒，不明就里，是为愚痴。被贪心摄持的人，难以再称为清醒。一心想要证明自己也好，证明想法也罢都是贪图一时的“胜利”的感觉，你对我错。但是实际上我真的是对的吗，对方也未必是错误的。贪图的那一时为自己获得了什么吗，还是为自己折损了更多的福报。显然贪图一时但是要用之后无穷无尽的时间精力物资来弥补之前这一时的贪心造下的恶业。又于己元气大伤，得不偿失。\n反思自己，为了这些事情与父母也好与朋友也好争论不休着实不应该。应当无论自己是为了维护什么都应当反思。遇到令自己升起烦恼的人、事眼不见为净，也需要反省己身为何饵咸钩直总能被钓起来。\n",
    "permalink": "https://blog.weearc.top/posts/3729692222/",
    "section": "Archives",
    "tags": [
      "杂谈",
      "证悟"
    ],
    "title": "关于烦恼的一些思考"
  },
  {
    "categories": [
      "博客相关",
      "前端"
    ],
    "contents": "更换到 hugo 也有段时间了，之前使用的好歹还是个类似 next 之于 hexo 的 PaperMod 主题作为切换到 hugo 的第一个主题。但是毕竟自己魔改了一大堆东西，然后全部是用 js 操作各种 dom ，虽然看上去挺炫酷的，但是代价是 iOS 支持直接没做。 以及稀烂的可维护性。这时候想起来 Maupassant 的好了，hexo 虽然核心程序一坨，但是主题足够轻快，自己定义维护修改了好些年也可用度相当高。那没办法，心一横自己重新写好了。\n但至于怎么写，和怎么设计，这次也没多考虑，换 hugo 以前用什么理论上照着写就行，毕竟都是模板，css 也比较好迁移，只要 css 库不用太奇葩的都能应对。但缺点是没用到比如 hugo 的 og （opengraph） 部分，还是用一些老办法，可能过于守旧，而且不利于再以后的一些迁移工作。不过话又说回来能完成需求的代码就是好代码，过去的代码就足够稳健，能用就行，既然是博客，除了应该是技术的 playground 还应该出产内容才对，不应该只关注技术更新忽略内容产出。\n结构研究 hugo 文件目录结构 关于 hexo 的部分可以参考以前的文章。hugo 虽然默认模块有点反直觉，但是其实还是老一套的东西。直接先生成一套模板：\n1 hugo new theme \u0026#34;\u0026lt;theme-name\u0026gt;\u0026#34; 然后就会在 themes/\u0026lt;theme-name\u0026gt; 生成对应内容模板。如果这时候去查看一下目录下的文件：\n1 2 ❯ ls archetypes/ assets/ content/ data/ hugo.toml i18n/ layouts/ LICENSE README.md static/ theme.toml 很容易就发现其实就是个 hugo site 的结构。那么如果发现了这点，就很容易联想到 hugo 本身当使用三方主题时候的一些技巧。就是当三方主题被 git clone 或者作为 mod 引入时候，如果需要更改则不需要更改主题本身的文件，由于 hugo 的查找顺序是优先匹配，大概的查找顺序如下，比如针对 layout/test.html\n1 2 \u0026lt;site\u0026gt;/layout/test.html \u0026lt;site\u0026gt;/themes/\u0026lt;theme\u0026gt;/layout/test.html 所以如果存在和主题位置结构相同，但是同名的文件，会优先采用 site 中的覆盖主题的部分。这样也不会导致主题难以更新以及更新后难以合并变更。\n回到正题上，我们编写主题主要需要关注 assets/, i18n/, layouts/, static/ 这四个目录。\nassets: 存放 css 和 js 或者其他库文件 i18n: 国际化文件 layouts: 布局文件，对应到 hexo 就是模板文件 static: 静态文件，下面的内容会直接部署到 public/ 下面而不经过渲染，大部分图片等索引位置都在此 而对于 layouts 部分，结构如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ❯ tree . . ├── _default -- 默认模板 │ ├── baseof.html -- 基础布局，全部其他部件和模板都以此为基础 │ ├── home.html -- 主页 │ ├── list.html -- 所有列表页，包括诸如 tag，category, article 等的列表 │ └── single.html -- 文章页，渲染后在里面渲染文章内容，所有自定义页其实也是使用该页渲染 └── partials ├── footer.html -- footer ├── head -- head.html 的引用部分，js 和自定义css 等 │ ├── css.html │ └── js.html ├── header.html -- header 部分 ├── head.html -- 头信息 ├── menu.html -- 默认的页面 navigation 菜单 └── terms.html -- taxonomy 默认的模板，用于渲染 tags 等 试看一下内容，大概也能发现一些：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ❯ cat _default/baseof.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ or site.Language.LanguageCode site.Language.Lang }}\u0026#34; dir=\u0026#34;{{ or site.Language.LanguageDirection `ltr` }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{ partial \u0026#34;head.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; {{ block \u0026#34;main\u0026#34; . }}{{ end }} \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 乍一看的话和 hexo 的思路几乎没啥很大的区别，使用 {{ partial }} 标签进行组件的引入。定义 block 来将其他模板作为该 block 嵌入到对应位置。那么如果没猜错的话比如 single.html 就需要把 main 先定义出来，事实上也确实如此：\n1 2 3 4 5 6 7 8 9 10 {{ define \u0026#34;main\u0026#34; }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ $dateMachine := .Date | time.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; }} {{ $dateHuman := .Date | time.Format \u0026#34;:date_long\u0026#34; }} \u0026lt;time datetime=\u0026#34;{{ $dateMachine }}\u0026#34;\u0026gt;{{ $dateHuman }}\u0026lt;/time\u0026gt; {{ .Content }} {{ partial \u0026#34;terms.html\u0026#34; (dict \u0026#34;taxonomy\u0026#34; \u0026#34;tags\u0026#34; \u0026#34;page\u0026#34; .) }} {{ end }} 布局划分 既然文件结构基本搞明白了，现在就可以直接把布局划分出来，先简单的用 html 写一下。考虑到我们还需要做成能够自适应的，那栅格难以避免，基本上除了一个头部以外身体和脚都要塞一块去才能相对比较容易的做出来自适应。\n1 2 3 4 5 6 7 8 \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; header \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; content \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; sidebar \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; footer \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; 其中 footer 平时自己一行，content 和 sidebar 一行，当变为移动设备尺寸时候，sidebar 会被挤下去，三个元素为一列进行排布。至于栅格布局，我懒得自己搞，还是按照原样用 purecss 的 grid 组件来完成。\n其他我已经确认需要完成的东西如下：\n页面 是否需要侧栏 位置 友链 N main 关于 N main 归档 Y main 那么差不多需要独立写完的只有少部分模板，其他需要更换的使用 frontmatter 来开关就好了。\n关于所有独立页面，就需要手动创建一下:\n1 2 hugo new content/about.md hugo new content/frlink.md 创建后的两个文件位于 content根目录下，属于是一个 page （页面），对于 frlink 我们会有单独的模板用于适配，而对于关于页面的话仍然还是需要在 md 文件中添加相应内容的。\n这里再引入 hugo 的一个概念： .Kind ，用于指代页面类型，一般分为 sections 和 page 。这里因为需求只用到 sections，所以只对需要的部分进行分析，具体需要参考文档。\nA section is a top-level content directory, or any content directory with an _index.md file. A content directory with an _index.md file is also known as a branch bundle. Section templates receive one or more page collections in context.\n很显然，按照我的目录结构：\n1 2 3 4 content -- a section ├── about.md -- not a section, is a page ├── frlink.md -- not a section, is a page └── posts -- a section 按照我的需求，我需要一个 archives 用于归档以及检索归档内容。显然所有博文会位于 posts 下，我需要给予 posts 一个 sections 属性，那么非常明确了：\n1 hugo new content/posts/_index.md 只需要为 posts 目录建立一个 _index 即可。但是这样一来 url 上 archives 作为 posts 出现，url 并不匹配，因此需要给 _index 在 frontmatters 中单独指定 url 为 archives 来变相解决问题。这个问题后面进行分页组件编写时候就会遇到，如此的解决方法节省了大量尝试分页组件可用性的时间。\n那就开始写吧。\n各部件编写 首先必须声明此部分不会包含任何 SEO 相关。因此编写出来的模板也没有 SEO 优化。\nhead 部分 进入编写之前，库是需要引入不少的，差不多盘算了一下大体是需要这么几样东西:\npurecss jquery fuse font-awesome 其他 所以先把 head 部分解决掉：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ if .IsHome }}{{ site.Title }}{{ else }}{{ printf \u0026#34;%s | %s\u0026#34; .Title site.Title }}{{ end }}\u0026lt;/title\u0026gt; {{ with resources.Get \u0026#34;js/lib/jquery-3.7.1.min.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ .Permalink | safeURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} {{ with resources.Get \u0026#34;js/lib/fuse.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ .Permalink | safeURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} {{ with resources.Get \u0026#34;css/lib/pure-min.css\u0026#34; }} \u0026lt;link href=\u0026#34;{{ .Permalink | safeURL }}\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; {{ end }} {{ with resources.Get \u0026#34;css/lib/grids-responsive-min.css\u0026#34; }} \u0026lt;link href=\u0026#34;{{ .Permalink | safeURL }}\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; {{ end }} {{ with resources.Get \u0026#34;css/lib/font-awesome.min.css\u0026#34; }} \u0026lt;link href=\u0026#34;{{ .Permalink | safeURL }}\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; {{ end }} {{ partialCached \u0026#34;head/css.html\u0026#34; . }} {{ partialCached \u0026#34;head/js.html\u0026#34; . }} {{ if .Param \u0026#34;math\u0026#34; }} {{ if ne .Params.mathjax false }} {{ partialCached \u0026#34;math.html\u0026#34; . }} {{ end }} {{ end }} 至于最后的部分先不进行解释，是引入mathjax 相关的内容。其他的部分，如果是本地托管的则需要放置在 assets 下面并使用 resources.Get才能获取到。这篇不会讲那么细致，具体仍然需要自己查一下 hugo 文档（编写这个模板时候才发现有版本更新，但是确实不算太好查有哪些新选项更新了 ）。css 部分由于我使用 sass ，因此引入部分可能有点区别，需要更改 css.html ：\n1 2 3 4 5 6 7 8 {{ $sass := resources.Get \u0026#34;css/main.scss\u0026#34; }} {{ $style := $sass | resources.ToCSS | resources.Fingerprint }} {{- if eq hugo.Environment \u0026#34;development\u0026#34; }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34; integrity=\u0026#34;{{ $style.Data.Integrity }}\u0026#34;\u0026gt; {{- else }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34; integrity=\u0026#34;{{ $style.Data.Integrity }}\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; {{- end }} baseof 部分 直接就着默认模板开始写，不用 purecss 不要全抄：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ or site.Language.LanguageCode site.Language.Lang }}\u0026#34; dir=\u0026#34;{{ or site.Language.LanguageDirection `ltr` }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{ partial \u0026#34;head.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;body__container\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;header\u0026#34;\u0026gt; {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pure-g\u0026#34; id=\u0026#34;layout\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pure-u-1 {{ if ne .Params.sidebar false }} pure-u-md-3-4 {{ else }} pure-u-md-4-4 {{ end }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content__container\u0026#34;\u0026gt; {{ block \u0026#34;main\u0026#34; . }}{{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ if ne .Params.sidebar false }} \u0026lt;div class=\u0026#34;pure-u-1-4 hidden_mid_and_down\u0026#34;\u0026gt; {{ partial \u0026#34;sidebar\u0026#34; . }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;div class=\u0026#34;pure-u-1 {{ if ne .Params.sidebar false }} pure-u-md-3-4 {{ else }} pure-u-md-4-4 {{ end }}\u0026#34;\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 关于侧栏是否开启使用了 frontmatter 里面的自定义的参数来进行控制，使用 .Params 进行参数的获取。\nheader 部分 默认 menu 是很好，但是也没必要分那么细碎\u0026hellip;首先看下配置文件，这个地方肯定是不应该硬编码的，还是需要走配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 languages: zh: languageName: \u0026#34;Chinese\u0026#34; weight: 1 taxonomies: category: categories tag: tags series: series menu: main: - name: 首页 url: / weight: 1 params: icon: fa-home - name: 归档 url: archives/ weight: 5 params: icon: fa-archive - name: 关于 url: about/ weight: 25 params: icon: fa-user - name: 友链 url: frlink/ weight: 20 params: icon: fa-link - name: 订阅 url: index.xml weight: 30 params: icon: fa-rss 这是我所使用的一份简要的目录菜单的配置，对于单个菜单项目，hugo 默认支持了包括 pre 在内的很多新标签，但是似乎在模板中调用仍然是硬编码的，不能像是 hexo 等直接调用自定义标签，所以比如 icon 这种仍然需要放在 params 下然后通过 .Params 方法调用对应标签来用。而且虽然默认支持 weight ，但是却不支持通过 weight 进行排序，因此这个地方还是需要手动处理下。因此一个简单的菜单部分如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;div id=\u0026#34;nav-menu\u0026#34;\u0026gt; {{- $currentPage := . }} \u0026lt;!-- Iterate over main menu items --\u0026gt; \u0026lt;!-- Sorted by weight --\u0026gt; {{ $sortedMenu := sort .Site.Menus.main \u0026#34;Weight\u0026#34; }} {{- range $sortedMenu }} {{- $menu_item_url := (cond (strings.HasSuffix .URL \u0026#34;/\u0026#34;) .URL (printf \u0026#34;%s/\u0026#34; .URL) ) | absLangURL }} {{- $page_url:= $currentPage.Permalink | absLangURL }} {{- $is_search := eq (site.GetPage .KeyName).Layout `search` }} \u0026lt;a href=\u0026#34;{{ .URL | absLangURL }}\u0026#34; title=\u0026#34;{{ .Title | default .Name }}\u0026#34; {{- if eq $menu_item_url $page_url }} class=\u0026#34;current\u0026#34; {{- end }}\u0026gt; \u0026lt;i class=\u0026#34;fa {{ .Params.icon }}\u0026#34;\u0026gt; {{- .Name -}} \u0026lt;/i\u0026gt; \u0026lt;/a\u0026gt; {{- end }} \u0026lt;/div\u0026gt; 自己再额外根据需求调整一下比如标题，应该就相对可用了。同样，hugo 不支持很多自定义的参数，因此仍然需要放在 params 下来使用：\n1 2 3 4 \u0026lt;div class=\u0026#34;site__name\u0026#34; \u0026gt; \u0026lt;a id=\u0026#34;logo\u0026#34; href=\u0026#34;/.\u0026#34;\u0026gt;{{ .Site.Title }}\u0026lt;/a\u0026gt; \u0026lt;p class=\u0026#34;description\u0026#34;\u0026gt;{{ .Site.Params.description }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 对应的配置文件就如下了：\n1 2 3 title: \u0026#34;\u0026#34; params: description: \u0026#34;\u0026#34; footer 部分 把主要的部分写完了以后我们先来写页脚，也算是相对简单的部分，我的案例中支持备案域名的备案号通过配置文件配置。首先先定义好配置文件：\n1 2 params: recordICPInfo: \u0026#34;\u0026lt;备案号\u0026gt;\u0026#34; 剩下部分直接硬编码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 {{- if not (.Param \u0026#34;hideFooter\u0026#34;) }} \u0026lt;footer id=\u0026#34;footer\u0026#34;\u0026gt; {{- if site.Copyright }} \u0026lt;span\u0026gt;{{ site.Copyright | markdownify }}\u0026lt;/span\u0026gt; {{- else }} \u0026lt;span\u0026gt;Copyright \u0026amp;copy; {{ now.Year }} | \u0026lt;i class=\u0026#34;fa fa-moon-o\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;\u0026#34; | absLangURL }}\u0026#34;\u0026gt;{{ site.Title }}\u0026lt;/a\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/br\u0026gt; {{- end }} \u0026lt;span\u0026gt; Powered by \u0026lt;a href=\u0026#34;https://gohugo.io/\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Hugo\u0026lt;/a\u0026gt; | Theme by \u0026lt;a href=\u0026#34;https://github.com/weearc\u0026#34; rel=\u0026#34;noopener\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;weearc\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;\u0026lt;/br\u0026gt; \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt; 总访问量 \u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 次 \u0026lt;/span\u0026gt; | \u0026lt;i class=\u0026#34;fa fa-user-md\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt; 访客数 \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 人次 \u0026lt;/span\u0026gt;\u0026lt;/br\u0026gt; \u0026lt;span\u0026gt; \u0026lt;a href=\u0026#34;http://beian.miit.gov.cn/\u0026#34; rel=\u0026#34;noopener\u0026#34; target=\u0026#34;_blank\u0026#34; style=\u0026#34;border:none;\u0026#34;\u0026gt; {{ site.Params.recordICPInfo }} \u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/footer\u0026gt; {{- end }} 这里添加了不算子来统计访问量，也算是常规操作了。并通过引用 font-awesome 来使用对应字体图标。\nhome 部分 主页部分我直接进行了拆分：\n1 2 3 {{ define \u0026#34;main\u0026#34; }} {{ partial \u0026#34;home-article-list\u0026#34; . }} {{ end }} 而核心部分就是主页的文章列表。已知我目前可以用于发布的文章有 44 篇上下，那么主页必不可行全部渲染出来，所以分页组件是必需的了。\n插件编写 默认写作模板协调 其他非核心三方件引入和配置 其他与 hugo 配置整理和协调 成果 ",
    "permalink": "https://blog.weearc.top/posts/469339652/",
    "section": "Archives",
    "tags": [
      "hugo",
      "hexo",
      "前端",
      "博客",
      "一百篇博文"
    ],
    "title": "定制hugo主题模板"
  },
  {
    "categories": [
      "测试",
      "hugo",
      "blog"
    ],
    "contents": "测试用\n1 2 3 4 5 6 1\n2\n3\n1 cat 111 cqumirror\ntest\n斜体\t加粗 加粗的斜体 下划线\ntitle1 title2 title3 左侧对齐 居中 右侧对齐 x y z $ x^n $\n$ C^2_3 $\n$$ T(n)=\\begin{cases} \\Theta(1)\\quad n=1\\ T(n-q)+\\Theta(n) \\quad n\u0026gt;1 \\end{cases} $$\n$$ \\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 3 \\\\ 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\\\ \\end{bmatrix} \\tag{1} $$\n$$ \\begin{equation} %开始数学环境 \\left( %左括号 \\begin{array}{ccc} %该矩阵一共3列，每一列都居中放置 a11 \u0026amp; a12 \u0026amp; a13\\\\ %第一行元素 a21 \u0026amp; a22 \u0026amp; a23\\\\ %第二行元素 \\end{array} \\right) %右括号 \\end{equation} $$\n$$ J(\\theta) = \\frac{1}{2m}\\sum_{i=0}^m(y^i - h_\\theta(x^i))^2 $$\nThis is an inline $a^*=x-b^*$ equation.\nThese are block equations:\n$a^*=x-b^*$\n$a^*=x-b^*$\n$$ a^*=x-b^* $$\nThese are block equations using alternate delimiters:\n$$a^*=x-b^*$$\n$$ a^*=x+b^* $$\n$$ a^*=x-b^* $$\n1 2 3 ",
    "permalink": "https://blog.weearc.top/posts/2197/",
    "section": "Archives",
    "tags": [
      "hugo",
      "blog"
    ],
    "title": "测试页"
  },
  {
    "categories": [
      "archlinux"
    ],
    "contents": "真就以折腾自己为乐。\n其实我从来没想好自己应该使用什么发行版，十多年前最开始使用 Arch Linux 也只是因为觉得大家都在使用 什么 Ubuntu 啊觉得自己可以特例独行一些，并没有深刻的体会到什么叫做 KISS，也没有体会到各种拆包粒度对于使用的影响，也一直只是“会用”而已，并没有太多作为用户之外的使用体验差距。就算是第二个使用的发行版是 openSUSE 也一样，因为某种程度上有类似的基因。\n起因 闲的蛋痛。年初企图迁移到 Fedora 失败，仅仅过了5个小时就滚回了 Arch 。可能考虑到了 Debian Sid 的如下特性，打算这次外迁一定要迁移出去，去 Debian。\n足够稳定 apt 的前端 nala，看上去很帅 周围用 Arch 的很多，向特立独行一点 复习时间之余闲的蛋痛 但是也考虑到一些区别，比如：\n包管理器的整合性：debian 系素以混乱的包管理功能著称，dpkg、apt、apt-get、apt-file 软件包获取的难度：这也是为什么我一直非常抗拒使用 deb 系，你可以在软件官网上（比如 zotero），在 github release，在 makedeb ，在 pacstall，在 ppa\u0026hellip;你能找出一百个不同的软件包来源，但是你没办法把他们整合（Debian CN repo 许久未变更了） 不知道的一些奇奇怪怪的特性 wiki，debian wiki 也就将将是能参考的程度 以上这些问题并没罗列全面，但是我曾经认为自己能够克服这些问题。虽然显然还是太高看自己了。\nArch Linux -\u0026gt; Debian 安装一个新的发行版是容易的，也没什么好说。但是考虑到年初 fedora 的惨痛经历，我打算还是给自己留个后路，方法可以有很多，rsync、或者整体dd、或者打个 tarball 什么的，之前有过尝试用 squashfs 备份系统的经验，而且打包后镜像体积特别小，也是很多发行版安装 CD 的首选方案。那就决定了。\n首先备份根分区，需要排除掉所有额外挂载的分区和运行态的玩意儿：\n1 sudo mksquashfs / backup-archlinux.squashfs -e /home -e /run -e /proc -e /dev -e /sys -e /tmp -e /var/tmp -e /mnt /boot/efi 直接把镜像扔到了外挂的 SSD 上面，体积也不大，150 G 根分区体积也就 27 G。然后下载了 Debian stable bookworm 的镜像，写盘，分区，安装\u0026hellip;不一而足。\n装上 Debian 的第一件事就是把 nala 装上，apt 那个简陋的信息展示还是非常难受的，好在 Buster 以后已经默认在 main 里了。\n1 sudo apt install nala -y 然后发现自己不在 sudoers 里，得把自己手工添加进去：\n1 su - -c \u0026#34;usermod -a -G sudo `whoami`\u0026#34; 注销，重新登陆，sudo 可以正常使用了。\n接下来切换到 sid，直接编辑 /etc/apt/sources.list 内容如下：\n1 2 deb https://mirrors.cqu.edu.cn/debian sid main contrib non-free non-free-firmware # deb-src http://mirrors.cqu.edu.cn/debian sid main contrib non-free non-free-firmware 直接执行更新：\n1 sudo nala update \u0026amp;\u0026amp; sudo nala upgrade -y 重启后切换为了 sid ，plasma 也更新到了 5.27.8。这时候给了我第一个下马威：/sbin/ 没 merge 到 /usr/bin ，问题不大，改个 /etc/profile 加个 PATH 的事。然后安装软件云云，不一而足。\n开始给自己找麻烦 从 QQ 开始，这时候我想到一个问题，我在 Arch 下可是用的 AUR 上魔改的 launcher 的启动脚本，要是 deb 每次装完都覆盖掉还是有点难受的。在 Arch 上我习惯于用 pacman hook 处理类似问题，但是 dpkg 好像没有 hook 可用。但是 stackexchange 上的某篇帖子和我的需求是一致的，都是需要更新后然后监听特定文件，并 patch 。那显然回答中的 file trigger 是一个可以使用的东西，那么需求明确了：\n创建一个带触发器的空包 空包中携带对于需要 patch 部分的脚本或源文件 安装触发器包后安装原 deb 包触发触发器 patched 之前曾经在 Arch 上给 deb 系打过 deb 包，所以创建包过程算是轻车熟路，只不过需要添加 DEBIAN/trigger 和 DEBIAN/postinst ， trigger 中 interest \u0026lt;path/to/file\u0026gt; ，然后 postinst 脚本书写如下：\n1 2 3 4 5 6 7 8 9 #!/bin/bash if [ \u0026#34;$1\u0026#34; = \u0026#34;triggered\u0026#34; ] then if [ \u0026#34;$2\u0026#34; = \u0026#34;\u0026lt;path/to/file/triggered\u0026gt;\u0026#34; ] then # do some patches fi exit 0 fi dpkg 在拦截监听器之后在入参上第一个参数是包状态，如果包被其他监听器“感兴趣”，那么第一个参数固定为 triggered ，第二个参数为监听的具体文件。这里需要注意的是，有些包会在后处理部分处理启动器文件等，而我们需要 patch 的部分也是这部分，就需要具体监听其他具体文件。另外所有打包脚本都需要空一行作为 EOF ，否则打包时必报错。\n因为特殊需要并没有增长，所以目前仅仅放了一部分 patch 在仓库中。很遗憾没法继续维护下去，以后大概也不会主动去维护。\n麻烦开始自己找上门 主要缘由在于我需要一个 Minecraft Launcher。而我常用的是 prismlauncher，但是！没有 deb 包。在 Arch 上没什么好说的，使用的甚至是 -git 版本不说而且是 Qt6 的包。以前打 Qt 包的经历自不必说，经常需要手动打包这样的项目还是非常难受的（难受在 debian 上 qt6 依赖并不全，或者可能拆包太细了我找不到）。前面提到了有 makedeb 这样的平台提供类似 PKGBUILD 的打包脚本并且有托管仓库，而里面，只有 stable 版本。但是毕竟本着能用就行要求不高的原则，先装上用一下。连着 jdk 装好后还姑且启动了几次 MC 1.16.5 试了一下看上去并没有大问题。\n接下来开始找 neovim，然后\u0026hellip;源的版本是 0.7.2，我的配置文件是 0.9.2 的\u0026hellip;不兼容不说，迁移过去也非常麻烦，这些配置文件是长年累月积攒下来的，迁移也是个大工程。那没办法，姑且用官方 binary 包用一下。能用就行。但是 vim\u0026hellip;可就太麻烦了，我需要的包括 clipboard 的编译选项 debian 的几个 vim 包都是默认不开的。但是要是使用 vim-nox 的话又不完全支持我在用的插件。那只能先用 vim-common 凑合下了。然后，我 zotero 呢？plasma 5.27.8 不应该存在的 bug （夜览相关的） 怎么还有呢？我 grub-btrfs 呢？我 mmc 呢？我 freetype2 怎么这么多不相关的依赖它的呢？说好的拆包细呢？/usr/game 是什么上古遗留？我 usr-merge呢？有一种，自己的偏见问题主动离开亲妈去找后妈，结果后妈问题更多的即视感。\n想着先把那些放一放，咱们先把 Nvidia Optimus Sync 和显卡直出配了，然后查了一下 wiki , 被告知应当使用 nvidia-detect 检测脚本决定用什么驱动包。然后，该脚本检测到我的是 30 系移动端卡之后，自己退出了\u0026hellip;好嘛，凭借在 Arch 上的经验，咱们先把开源驱动干掉，blacklist 之，然后装 nvidia-drivers 大概就没什么问题了。然后问题就来了，Debian Wiki 上给的 Optimus Sync 的 X11 配置文件样例，根本就不是做 Optimus Sync 的。那就还是参考一下 Arch Linux Wiki 姑且配一下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf Section \u0026#34;OutputClass\u0026#34; Identifier \u0026#34;intel\u0026#34; MatchDriver \u0026#34;i915\u0026#34; Driver \u0026#34;modesetting\u0026#34; EndSection Section \u0026#34;OutputClass\u0026#34; Identifier \u0026#34;nvidia\u0026#34; MatchDriver \u0026#34;nvidia-drm\u0026#34; Driver \u0026#34;nvidia\u0026#34; Option \u0026#34;AllowEmptyInitialConfiguration\u0026#34; Option \u0026#34;PrimaryGPU\u0026#34; \u0026#34;yes\u0026#34; ModulePath \u0026#34;/usr/lib/nvidia/xorg\u0026#34; ModulePath \u0026#34;/usr/lib/xorg/modules\u0026#34; EndSection 但是，Debian 的 ModulePath 位置并不一致，需要找一下。不过问题也不大，总归dpkg -L 也能找到。但是问题就来了，nvidia-fbc 并没有随 nvidia-drivers 一起安装，nvenc 也并没法启用。但是总归是拆包的问题装上去就没问题了，大概。\n更加麻烦起来了 总体来说，虽然我的需求奇奇怪怪但是 Debian 大体上能满足，我也不多说什么。直到和群友聊起来，Minecraft 的 In-Game 打开文件夹没法打开。然后我试了一下，确实打不开。虽然资源包什么的我日常很少动，但是总归打不开还是很麻烦，明明我在 Arch 上都是行为正常的\u0026hellip;. 打印了一下日志，发现如下问题:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 java.security.PrivilegedActionException: null at java.security.AccessController.doPrivileged(AccessController.java:573) ~[?:?] at net.minecraft.class_156$class_158.method_669(class_156.java:313) ~[client-intermediary.jar:?] at net.minecraft.class_156$class_158.method_673(class_156.java:324) ~[client-intermediary.jar:?] at net.minecraft.class_5375.method_29670(class_5375.java:102) ~[client-intermediary.jar:?] at net.minecraft.class_4185.method_25306(class_4185.java:94) ~[client-intermediary.jar:?] at net.minecraft.class_4264.method_25348(class_4264.java:56) ~[client-intermediary.jar:?] at net.minecraft.class_339.method_25402(class_339.java:189) ~[client-intermediary.jar:?] at net.minecraft.class_4069.method_25402(class_4069.java:38) ~[client-intermediary.jar:?] at net.minecraft.class_312.method_1611(class_312.java:98) ~[client-intermediary.jar:?] at net.minecraft.class_437.method_25412(class_437.java:409) ~[client-intermediary.jar:?] at net.minecraft.class_312.method_1601(class_312.java:98) ~[client-intermediary.jar:?] at net.minecraft.class_312.method_22686(class_312.java:169) ~[client-intermediary.jar:?] at net.minecraft.class_1255.execute(class_1255.java:102) ~[client-intermediary.jar:?] at net.minecraft.class_312.redirect$foc001$viafabricplus$redirectSync(class_312.java:3538) ~[client-intermediary.jar:?] at net.minecraft.class_312.method_22684(class_312.java:169) ~[client-intermediary.jar:?] at org.lwjgl.glfw.GLFWMouseButtonCallbackI.callback(GLFWMouseButtonCallbackI.java:43) ~[lwjgl-glfw-3.3.1.jar:?] at org.lwjgl.system.JNI.invokeV(Native Method) ~[lwjgl-3.3.1.jar:?] at org.lwjgl.glfw.GLFW.glfwWaitEventsTimeout(GLFW.java:3474) ~[lwjgl-glfw-3.3.1.jar:?] at com.mojang.blaze3d.systems.RenderSystem.limitDisplayFPS(RenderSystem.java:237) ~[client-intermediary.jar:?] at net.minecraft.class_310.method_1523(class_310.java:1244) ~[client-intermediary.jar:?] at net.minecraft.class_310.method_1514(class_310.java:802) ~[client-intermediary.jar:?] at net.minecraft.client.main.Main.main(Main.java:250) ~[minecraft-1.20.1-client.jar:?] at net.fabricmc.loader.impl.game.minecraft.MinecraftGameProvider.launch(MinecraftGameProvider.java:468) ~[fabric-loader-0.14.21.jar:?] at net.fabricmc.loader.impl.launch.knot.Knot.launch(Knot.java:74) ~[fabric-loader-0.14.21.jar:?] at net.fabricmc.loader.impl.launch.knot.KnotClient.main(KnotClient.java:23) ~[fabric-loader-0.14.21.jar:?] at org.prismlauncher.launcher.impl.StandardLauncher.launch(StandardLauncher.java:88) ~[NewLaunch.jar:?] at org.prismlauncher.EntryPoint.listen(EntryPoint.java:126) ~[NewLaunch.jar:?] at org.prismlauncher.EntryPoint.main(EntryPoint.java:71) ~[NewLaunch.jar:?] Caused by: java.io.IOException: Cannot run program \u0026#34;xdg-open\u0026#34;: error=13, 权限不够 at java.lang.ProcessBuilder.start(ProcessBuilder.java:1143) ~[?:?] at java.lang.ProcessBuilder.start(ProcessBuilder.java:1073) ~[?:?] at java.lang.Runtime.exec(Runtime.java:594) ~[?:?] at java.lang.Runtime.exec(Runtime.java:453) ~[?:?] at net.minecraft.class_156$class_158.method_671(class_156.java:313) ~[client-intermediary.jar:?] at java.security.AccessController.doPrivileged(AccessController.java:569) ~[?:?] ... 27 more Caused by: java.io.IOException: error=13, 权限不够 at java.lang.ProcessImpl.forkAndExec(Native Method) ~[?:?] at java.lang.ProcessImpl.\u0026lt;init\u0026gt;(ProcessImpl.java:314) ~[?:?] at java.lang.ProcessImpl.start(ProcessImpl.java:244) ~[?:?] at java.lang.ProcessBuilder.start(ProcessBuilder.java:1110) ~[?:?] at java.lang.ProcessBuilder.start(ProcessBuilder.java:1073) ~[?:?] at java.lang.Runtime.exec(Runtime.java:594) ~[?:?] at java.lang.Runtime.exec(Runtime.java:453) ~[?:?] at net.minecraft.class_156$class_158.method_671(class_156.java:313) ~[client-intermediary.jar:?] at java.security.AccessController.doPrivileged(AccessController.java:569) ~[?:?] ... 27 more 我写 java ，我也用 process builder 调用过，但问题是这问题是怎么会权限不够的。查了一下 java 的进程，归属于我的账户下，而且 jdk 在家目录，按理讲权限是足够的，而且 xdg-open 本身不是 /sbin 下的脚本。于是决定写个 Demo 验证下问题。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # OpenURL.java import java.io.IOException; public class OpenURL { public static void main(String[] args) { String url = \u0026#34;file:/home/ddqi/\u0026#34;; try { ProcessBuilder processBuilder = new ProcessBuilder(\u0026#34;xdg-open\u0026#34;, url); Process process = processBuilder.start(); int exitCode = process.waitFor(); if (exitCode == 0) { System.out.println(\u0026#34;成功打开URL: \u0026#34; + url); } else { System.err.println(\u0026#34;无法打开URL: \u0026#34; + url); } } catch (IOException | InterruptedException e) { e.printStackTrace(); } } } 测试MA\n1 2 3 # MANIFEST.MF Manifest-Version: 1.0 Main-Class: OpenURL 然后用 jdk17 编译打包一下：\n1 2 3 javac OpenURL.java jar -cfm OpenURL.jar MANIFEST.MF OpenURL.class 运行：\n1 java -jar OpenURL.jar 很明显的一个问题，报错和 MC 的报错一致。说明可能不是代码的问题。思路转变一下，CentOS 上我被 SELinux 恶心过，但是还有个东西是其他发行版上用的，Apparmor，也是内核级别的，我打自己的内核时候都是去掉支持的。那么没办法，先至少关掉 Apparmor 试一下，添加内核参数，重启，然后 aa-status 一下，确认关闭。重新运行一次该 jar 文件，得到成功响应但是却无法拉起 dolphin 的问题。那估计只能是 jdk 少东西了或者依赖什么少了\u0026hellip;\n于是开始重复：改 Apparmor 规则，跑 demo 验证。但是连最开始没出现问题的 jdk8 在 demo 中行为也不正常。按理来讲 Apparmor 启用时候至少 jdk8 行为在 In-Game 中是正常的，java17 的可能是撞了 java 自己的安全策略。但是这样的话又解释不清同一套 jdk 为什么在 Arch 上就行为正常。（这里定义正常行为为未开启任何策略下，java process builder 能够掉用其他 os 的套件拉起进程）\nDebian -\u0026gt; Arch LInux 正常情况下发现问题，分析问题，解决问题对于正常人来说是一个正常的流程。但是这是一个 不正常的问题，我的怒气值已经满了，以及我最低的要求都满足不了我要你干甚。惹不起老子躲不起吗，走走走打道回府。\n安装回去的流程更简单，本身 squashfs 就是根分区的最小完整克隆。释放回去就完事了。步骤还是轻车熟路：下 live CD，写盘，重启。\n直接格调这个折磨我心态到爆炸的 Debian :\n1 2 # -f 强制重做文件系统 mkfs.btrfs -f /dev/nvme1n1p2 然后把外接 SSD 挂上来看看原来的 fstab 怎么写：\n1 2 3 4 5 6 7 mkdir -p {test,test1} mount /dev/sda1 ./test mount ./test/backup-archlinux.squashfs ./test1 cat ./test1/etc/fstab 分区布局是这样的：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # /dev/nvme1n1p2 UUID=be72b201-80a6-4224-ba13-4bb6e0414577 / btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvolid=256,subvol=/@ 0 0 # /dev/nvme1n1p2 UUID=be72b201-80a6-4224-ba13-4bb6e0414577 /tmp btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvolid=257,subvol=/@tmp 0 0 # /dev/nvme1n1p2 UUID=be72b201-80a6-4224-ba13-4bb6e0414577 /usr/local btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvolid=258,subvol=/@usr_local 0 0 # /dev/nvme1n1p2 UUID=be72b201-80a6-4224-ba13-4bb6e0414577 /var/log btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvolid=259,subvol=/@var_log 0 0 # /dev/nvme0n1p1 LABEL=SYSTEM UUID=BE42-0216 /boot/efi vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2 # /dev/nvme1n1p3 UUID=97ed42a1-e595-4009-81f0-470f9d183109 /home ext4 rw,relatime 0 2 # /dev/nvme1n1p2 UUID=be72b201-80a6-4224-ba13-4bb6e0414577 /.snapshots btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvolid=260,subvol=/@snapshots 0 0 那子卷布局还是按照原来的做：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 先把根挂上来,开启压缩（必须和打包前的分区inode保持一致） mount -o compress=zstd /dev/nvme1n1p2 /mnt # 根分区 btrfs subvolume create /mnt/@ # /tmp btrfs subvolume create /mnt/@tmp # /var/log btrfs subvolume create /mnt/@var_log # /usr/local btrfs subvolume create /mnt/@usr_local # /.snapshots btrfs subvolume create /mnt/@snapshots # 卸载根分区 umount /mnt 接着直接挂分区：\n1 2 3 4 5 6 7 8 9 10 11 12 # 根分区和子卷 mount -o compress=zstd,subvol=@ /dev/nvme1n1p2 /mnt # 创建挂载点 mkdir -p /mnt/{home.usr/local,proc.run,sys,media,dev,var/log,tmp,.snapshots,boot/efi} # 挂载其他子卷 mount -o compress=zstd,subvol=@tmp /dev/nvme1n1p2 /mnt/tmp mount -o compress=zstd,subvol=@var_log /dev/nvme1n1p2 /mnt/var/log mount -o compress=zstd,subvol=@usr_local /dev/nvme1n1p2 /mnt/usr/local mount -o compress=zstd,subvol=@snapshots /dev/nvme1n1p2 /mnt/.snapshots # efi 和 home mount /dev/nvme0n1p1 /mnt/boot/efi mount /dev/nvme1n1p3 /mnt/home 释放镜像：\n1 2 3 4 # 取消挂载镜像 umount ./test1 # 释放镜像 unsquashfs -f -d /mnt test/backup-archlinux.squashfs 完成后基本就没什么问题了，但是需要重新装一下 grub：\n1 2 3 4 5 6 7 8 # chroot 到系统 arch-chroot /mnt # 删除旧的 grub 引导 rm -rf /boot/efi/EFI/Debian # 装载引导器 grub-install --target=x86_64-efi --efi-directory=/boot/efi/ --recheck # 生成配置 grub-mkconfig -o /boot/grub/grub.cfg 由于根分区 UUID 变了，因为 fstab 还是得改一下，直接退出 chroot 环境，执行：\n1 genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 重启一下发现又回到和蔼可亲的 Arch Linux 了。\n总结 先排除自己的菜的原因。我可能菜，但是桌面系统用的如此憋屈感觉应该不全是我的问题\u0026hellip;每次想从 Arch 叛逃，但是又逃回来，每次都是走之前觉得 Arch 这不好那不好骗自己能有办法安心在新发行版下熟悉，但是用着用着却又想起之前的各个好处。尤其是有 aur 这样的整合的，统一的平台这件事。省去了很多麻烦，也方便统一管理。\n但是话又说回来，现在的自己竟然这么习惯于逃避了\u0026hellip;果然是因为害怕的事情变多了的缘故么。\n",
    "permalink": "https://blog.weearc.top/posts/2866972811/",
    "section": "Archives",
    "tags": [
      "archlinux",
      "系统迁移",
      "debian",
      "btrfs",
      "系统备份"
    ],
    "title": "记一次失败的从 Arch Linux 迁移到 Debian Sid 的经历"
  },
  {
    "categories": null,
    "contents": "过了生命周期的 nodejs 的玩具，那是真的蛋痛\n其实本来我是不打算再动博客了的，因为当初定制化自己的 Hexo 博客花了很大代价，前前后后差不多花了两年断断续续将所有需要的功能和更改补全了， 所以当我再切 nvm 将 nodejs 版本切到 10 的时候，我大概就能意识到，npm 炸了，我的博客大概就回不来了，然后它真的就炸掉了\u0026hellip;orz\n那既然 hexo 不行了，基于我的前端开发经验那我肯定首选包丰富且开发快速的 nodejs 底座的各种东西作为替换。但是正好先前又开发了 这个玩意儿 我是真的想干脆用 vue2 就算了，但是早晚其实得迁移到 vue3 ，nodejs 升级地狱不可避免。 其实之前也做过这个东西 。Hugo 的快速渲染令我印象极其深刻，之前 hexo 动辄渲染几分钟，hugo 才让我体会到什么叫急速渲染。那么既然 nodejs 那么蛋痛，香草 js 我还是会写的 那真好就直接迁移到 Hugo 算了。当然，这个可不是说仅仅选个主题配置一下部署上去就算了，客制化我还是要做不少的。\n",
    "permalink": "https://blog.weearc.top/posts/2817549702/",
    "section": "Archives",
    "tags": null,
    "title": "记从 HEXO 迁移到 Hugo 安家之旅"
  },
  {
    "categories": null,
    "contents": "我的新伙伴，HP 暗影精灵7，因为N卡毕竟太好用了，而且可以支持独显直出，在外接屏幕了以后拿来当作“台式机”了。\n但是既然作为笔记本，内置显示器虽然关掉了但睡眠唤醒一直以来还是依赖于掀起屏幕来进行的，但是 Windows 11 上却能够通过点按鼠标进行唤醒，看来原生策略上外接设备唤醒也是被考虑进去了的。因此为了提升在 Linux 下的体验还是很有必要稍微改改配置。\n目标 目标非常简单：\n和windows上的策略保持一致，通过鼠标按键点按唤醒 可以的话配置持久化 前者非常简单，只要简单的更改一下设备的电源的控制策略即可，后者稍微麻烦一点，至少得去看一下 udev 规则怎么写才能实现。\n施行 根据上面的目标，我们分解任务，首先找到外接鼠标的设备电源控制。\n1 ls /dev/input/ 差不多能看到我这边有三个设备被识别为鼠标设备：\n1 ... mouse1 mouse2 mouse0 其中 mouse1 , mouse2 , mouse0 可以查看一下设备信息来确认具体都是哪个。\n1 udevadm info --attribute-walk --path=$(udevadm info --query=path --name=/dev/input/mouse0) 运气比较好，我这边的 mouse0 直接就是 g102 鼠标，输出如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 A rule to match, can be composed by the attributes of the device and the attributes from one single parent device. looking at device \u0026#39;/devices/pci0000:00/0000:00:14.0/usb3/3-2/3-2:1.0/0003:046D:C092.0004/input/input8/mouse0\u0026#39;: KERNEL==\u0026#34;mouse0\u0026#34; SUBSYSTEM==\u0026#34;input\u0026#34; DRIVER==\u0026#34;\u0026#34; ATTR{power/async}==\u0026#34;disabled\u0026#34; ATTR{power/control}==\u0026#34;auto\u0026#34; ATTR{power/runtime_active_kids}==\u0026#34;0\u0026#34; ATTR{power/runtime_active_time}==\u0026#34;0\u0026#34; ATTR{power/runtime_enabled}==\u0026#34;disabled\u0026#34; ATTR{power/runtime_status}==\u0026#34;unsupported\u0026#34; ATTR{power/runtime_suspended_time}==\u0026#34;0\u0026#34; ATTR{power/runtime_usage}==\u0026#34;0\u0026#34; looking at parent device \u0026#39;/devices/pci0000:00/0000:00:14.0/usb3/3-2/3-2:1.0/0003:046D:C092.0004/input/input8\u0026#39;: KERNELS==\u0026#34;input8\u0026#34; SUBSYSTEMS==\u0026#34;input\u0026#34; DRIVERS==\u0026#34;\u0026#34; ATTRS{capabilities/abs}==\u0026#34;0\u0026#34; ATTRS{capabilities/ev}==\u0026#34;17\u0026#34; ATTRS{capabilities/ff}==\u0026#34;0\u0026#34; ATTRS{capabilities/key}==\u0026#34;ffff0000 0 0 0 0\u0026#34; ATTRS{capabilities/led}==\u0026#34;0\u0026#34; ATTRS{capabilities/msc}==\u0026#34;10\u0026#34; ATTRS{capabilities/rel}==\u0026#34;1943\u0026#34; ATTRS{capabilities/snd}==\u0026#34;0\u0026#34; ATTRS{capabilities/sw}==\u0026#34;0\u0026#34; ATTRS{id/bustype}==\u0026#34;0003\u0026#34; ATTRS{id/product}==\u0026#34;c092\u0026#34; ATTRS{id/vendor}==\u0026#34;046d\u0026#34; ATTRS{id/version}==\u0026#34;0111\u0026#34; ATTRS{inhibited}==\u0026#34;0\u0026#34; ATTRS{name}==\u0026#34;Logitech G102 LIGHTSYNC Gaming Mouse\u0026#34; ATTRS{phys}==\u0026#34;usb-0000:00:14.0-2/input0\u0026#34; ATTRS{power/async}==\u0026#34;disabled\u0026#34; ATTRS{power/control}==\u0026#34;auto\u0026#34; ATTRS{power/runtime_active_kids}==\u0026#34;0\u0026#34; ATTRS{power/runtime_active_time}==\u0026#34;0\u0026#34; ATTRS{power/runtime_enabled}==\u0026#34;disabled\u0026#34; ATTRS{power/runtime_status}==\u0026#34;unsupported\u0026#34; ATTRS{power/runtime_suspended_time}==\u0026#34;0\u0026#34; ATTRS{power/runtime_usage}==\u0026#34;0\u0026#34; ATTRS{properties}==\u0026#34;0\u0026#34; ATTRS{uniq}==\u0026#34;2073305B4B32\u0026#34; 这样的话顺带着就有 vendor id 和 product id 了，先记下来：\n1 2 product id: c092 vendor id: 046d 然后输入斜线搜索一下wakeup，找到供电唤醒相关选项，默认来看的话应该是如下：\n1 ATTRS{power/wakeup}==\u0026#34;disabled\u0026#34; 先记一下对应设备父节点，然后我们直接手动去改一下对应设备接口：\n1 2 3 # 形如：/devices/pci0000:00/0000:00:14.0/usb3/3-2/3-2:1.0/0003:046D:C092.0004/input/input8/mouse0 # 截取到usb3/3-2即可，为该usb设备设备对应接口 sudo sh -c \u0026#34;echo enabled \u0026gt; \u0026#39;/sys/devices/pci0000:00/0000:00:14.0/usb3/3-2/power/wakeup\u0026#39;\u0026#34; 这时候重新查询一下设备应该能看到 power/wakeup是 enabled 状态，这时候休眠一下设备，然后点按鼠标查看一下是否正常唤醒，第一步完成。\n然后我们来更改udev规则，如果上一步操作成功了的话应该可以在acpi里看到唤醒状态：\n1 2 3 cat /proc/acpi/wakeup | grep -i enabled # XHCI S3 *enabled pci:0000:00:14.0 然后看一下pci总线里的USB:\n1 lspci | grep -i USB 1 2 0000:00:0d.0 USB controller: Intel Corporation Tiger Lake-H Thunderbolt 4 USB Controller (rev 05) 0000:00:14.0 USB controller: Intel Corporation Tiger Lake-H USB 3.2 Gen 2x1 xHCI Host Controller (rev 11) 我这里能看到 0000:00:14.0 对应的是笔记本上的三个 USB 3.2 接口，目前允许从该端口进行唤醒。然后开始写规则。\n1 2 3 # /etc/udev/ruled.d/50-wake-on-mouse.rules SUBSYSTEM==\u0026#34;usb\u0026#34;,DRIVERS=\u0026#34;usb\u0026#34;,ATTRS{idVendor}==\u0026#34;o46d\u0026#34;,ATTRS{idProduct}==\u0026#34;c092\u0026#34;,ATTR{power/wakeup}=\u0026#34;enabled\u0026#34;,ATTR{driver/3-2/power/wakeup}=\u0026#34;enabled\u0026#34; 然后测试一下新的规则\n1 sudo udevadm test (udevadm info --query=path --name=/dev/input/mouse0) 2\u0026gt;\u0026amp;1 如果规则正常载入的话应该能够在输出中看到诸如：\n1 Reading rules file: /etc/udev/rules.d/51-wake-on-usb.rules 但是由于初期完全照抄了 Archwiki,现在有个很大的问题就是似乎现在udev对则认不到DEVICES这个参数，因此可以慢慢调试，如果所有方法均不能生效的话，可以直接在后面接上我们上一步运行的指令来进行更改，虽然脏但是可以生效。\n1 RUN+=\u0026#34;/bin/sh -c \u0026#39;echo enabled \u0026gt; /sys$env{DEVPATH}/../power/wakeup;\u0026#39;\u0026#34; ",
    "permalink": "https://blog.weearc.top/posts/4169015263/",
    "section": "Archives",
    "tags": null,
    "title": "在Archlinux上启用外接设备唤醒"
  },
  {
    "categories": null,
    "contents": "通常来讲是没有更换 MAC 的必要，但是偶尔被误伤的时候还是很有用的。\n起因 手里多了一台服务器，目前部署在 IDC 中心，由于忘记某个服务的端口我遍采取了端口扫描的方式来查看暴露的端口进而判断服务位置，但是我校 IDS 系统比较厉害，不仅仅是没有扫到服务顺带着连我的 IP 到服务器的访问也一并切断了，因此我需要更换 IP 才能重新正常访问该服务器。但是由于一般使用硬件 MAC 因此对于 DHCP 服务器不会为我重新分配新的 IP 地址直到我上一个 IP 过期释放掉。然而释放的这个过程最长可达一年（我上一年度内网 IP 均未发生变更）。因此只能通过更换 MAC 使得 DHCP 服务器认为我是新的接入设备并重新分配可用 IP。\n思路 一般来讲我可能会选用 Python 来实现更换 MAC 这个操作，但是受限于路由器本身，使用 Shell 脚本可能是更加经济实惠的选择。\n初步思路是从 /dev/urandom 抓取随机数，取 md5sum 获取 16 进制格式然后再切分插入符号。类似如下形式：\n1 echo `dd if=/dev/urandom bs=1 count=32 2\u0026gt;/dev/null | md5sum | cut -b 1-12 | sed \u0026#39;s/\\(..\\)/\\1:/g; s/.$//\u0026#39;` 1 2 # result \u0026#39;21:29:25:69:ec:ad\u0026#39; 但是正如这条 stackoverflow 的讨论串所描述的那样，这样生成的 MAC 地址有概率无法使用，即最直观的感受是要求前两位地址必须为偶数。说白了，由于单播地址限制，首位地址为0x21时相当于映射到多播，但是由于单个硬件设备作为节点连接到网络时其使用单播方法，因此必须限制首位为偶数。即：\n如果第一个八位字节的 LSB 为 0，则它是单播地址。如果第一个八位字节的第二个 LSB 是 1，则它是本地生成的 MAC 地址。\n对应关系如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0x0 0000 0x1 0001 0x2 0010 0x3 0011 0x4 0100 0x5 0101 0x6 0110 0x7 0111 0x8 1000 0x9 1001 0xA 1010 0xB 1011 0xC 1100 0xD 1101 0xE 1110 0xF 1111 解决方案 因此最直接且最简单的解决方案就是直接针对不合法的地址，也就是所谓奇数进行替换，比如下面这个例子：\n1 echo `dd if=/dev/urandom bs=1 count=32 2\u0026gt;/dev/null | md5sum | cut -b 1-12 | sed \u0026#39;s/\\(..\\)/\\1:/g; s/.$//\u0026#39;|sed \u0026#39;s/^\\(.\\)[13579bdf]/\\10/\u0026#39;` 直接简单粗暴的将不合法的地址全部替换为0。简单省事。不过也存在一个问题，也就是一定程度上减少了随机性。这个时候最佳处理方法大概还是通过awk 来实现。\n",
    "permalink": "https://blog.weearc.top/posts/10719/",
    "section": "Archives",
    "tags": null,
    "title": "openwrt 随机 mac --- ip 地址重新分配"
  },
  {
    "categories": null,
    "contents": "",
    "permalink": "https://blog.weearc.top/posts/11375/",
    "section": "Archives",
    "tags": null,
    "title": "通过 GITHUB Actions 部署博客---腾讯云 Cloudbase 踩坑2"
  },
  {
    "categories": null,
    "contents": "最近事情有点多,待完善\n发行版：Arch Linux AUR 管理器：yaourt 桌面环境：KDE PLASMA 文字处理：Vim，WPS Office，Typora(markdown写作)，Kate 输入法：Fcitx5 视频播放：mpv 音乐播放：Clementine，QMMP（个人最喜欢，但是缩放有点问题） 终端：Yakuake，Konsole 开发：Pycharm，Webstorm，Visual Studio Code，Insomnia 等 Web 浏览：Google Chrome 虚拟机：KVM + Virtmanager 娱乐：Sabuki，Steam，Minecraft Java Edition 文件管理：Dolphin（很少用），pcmanfm-qt 拓补图绘制等：yED 思维导图：Xmind 图像处理：Krita，Inkspace（矢量图，绘制海报以及图标用），flameshot（截图使用），Xnconvert（图像处理） 即时通讯：微信（wine），QQ（虚拟机内） 下载工具：浏览器，aria2c（本地rpc server），wget，qbittorrent 文献整理：zotero 远程桌面：VNC Viewer Shell：fish（自己用），zsh（root下用） 音视频处理等：ffmpeg，OBS，kdenlive\n",
    "permalink": "https://blog.weearc.top/posts/4448/",
    "section": "Archives",
    "tags": null,
    "title": "在 Linux 下生活你需要什么（软件包）"
  },
  {
    "categories": [
      "Minecraft"
    ],
    "contents": "关于我不小心手欠把存档升级到 1.17.1 这件事。 1.17.1 本来就没有打算认真去玩，但是对于手欠升级自己存档这件事真的很恼火可以说是。因此就得想个办法来处理一下。\n对于一般的存档来说只要生成了新地形那么降级就几乎不可能，但是对于我这个存档来说就很万幸了，因为不小心进入的时候正好处于 20*20 区块空置域正中心，所以避免了区块的生成和结构的破坏，那样的话就只剩下修改 level.dat一条路了。\nlevel.dat一般结构如下：\n1 2 3 4 5 6 7 8 level.dat |-Data---CustomBossEvents |-DataPacks |-DragonFight |-GameRules |-Player |-Version |-WorldGenSettings 所幸的是 1.17.1 对于 WorldGenSettings 几乎没有改动，否则就要大修理了。Version 存储关于 Minecraft 的版本信息。直接参照 1.16.2 的其他存档修改为如下：\n1 2 3 4 Version--- 3 entries |- Id: 2578 |- Name: 1.16.2 |- Snapshot: 0 保存并退出，然后使用 1.16.2 加载存档，保存并退出即修复完成。但是无论如何记得备份好存档再操作，直接操作存档是非常危险的。\n1.17.1 这垃圾优化估计可以让我坚守 1.16.2 更久了，而且对于生电玩法更加困难，没必要再升级了至少目前是这样。\n至于 Linux 下如何运行 NBTexplorer ，直接使用 mono即可，非常简单。\n",
    "permalink": "https://blog.weearc.top/posts/4518/",
    "section": "Archives",
    "tags": [
      "Minecraft",
      "杂项"
    ],
    "title": "降低你的 Minecraft 存档版本"
  },
  {
    "categories": [
      "archlinux"
    ],
    "contents": "原本 fish shell 用的好好的，及其方便的设置和高度可自定义的选项和快速的智能补全让它成为懒人的不二之选，但是某天更新过后却出现了无法调用历史的情况，这显然不正常。而我又高度依赖与 fish 的自动补全，尤其对于管理服务器而言是非常之方便的。那肯定就需要搞清楚到底出现了什么问题了。\n首先大概查了一下发现大多是隐私需要删除历史的，这个与我无关。然后翻了一下 fish 的 文档 ，里面关于 history 的描述有这么一段比较令人在意的：\nmerge immediately incorporates history changes from other sessions. Ordinarily fish ignores history changes from sessions started after the current one. This command applies those changes immediately.\n于是首先先确认一下历史文件是否正常：\n1 2 # 我的历史文件等保存在默认位置 ls ~/.local/share/fish/ 然后返回了：\n1 fish_history fish_read_history generated_completions 证明历史文件还在，查看了一下内容，10 万行左右，基本没啥问题，还都在。然后尝试合并历史到当前会话：\n1 history --merge 退出当前会话并查看发现恢复如初，这就很迷惑了\u0026hellip;因为我加载 fish 的方式是 konsole 启动时才加载 fish ，所以理应在启动时自动合并。因此为了以防万一可以在 fish 配置文件里加一句让它每次启动自动合并历史。算是暂时解决了这个问题。\n",
    "permalink": "https://blog.weearc.top/posts/53128/",
    "section": "Archives",
    "tags": [
      "fish shell",
      "linux",
      "history file"
    ],
    "title": "解决 Fish 不认 history 的问题"
  },
  {
    "categories": [
      "玩赏"
    ],
    "contents": "上一篇：redmi K30 Pro 简评\n曾经的我虽然高高兴兴的用着类原生，但中午就得赶快回去充电否则下午晚上直接“人间蒸发”；曾经的我高高兴兴看着 2K 分辨率的顶级 LCD 屏幕，听着超强的双扬声器播放的歌曲，但是机器却时刻可能因为过热直接关机 \u0026hellip; 这样的生活似乎已经结束，至少现在，我不必因为全天任何时间点不充电导致自己彻底失联，我也不用因为过热关机导致许多尴尬事情。但是相对的，我逐渐习惯了 1080P 分辨率的屏幕，我逐渐适应了尽管只有类 DC 调光的显示，也适应了原本听上去就感觉极度不适的单扬声器。\n仔细想了一想可能不是因为手机换了我才如此“佛系”，周围的环境、自己的心理状况也多少变得不那么急功近利了，以至于最近在和老妈打电话的时候她直言我变得成熟，又恢复以前的健康的状态了。曾经的我因为高中出来也算是年级相当顶尖的选手，到大学却颇感力不从心，第一次中期考试的不及格更是雪上加霜。所谓心态爆炸大概就是说的那个时候的我。负面情绪占据了自己，自己也躲在尖刺之后，悄悄地舔舐伤口却又渴望他人带来的救赎，然而最终我也没能等到。自己还是要靠自己，所以我选择了逃避一年，无论付出了什么代价自己都要去承受，好朋友都变成了学长，学着更难以理解的课程，更换校区后更是有了新的交际圈，曾经一度以为我可能就这么被遗忘了。但毕竟是自己的选择，就算是狗屎也得忍着。\n（没写完）\n",
    "permalink": "https://blog.weearc.top/posts/34801/",
    "section": "Archives",
    "tags": [
      "redmi",
      "红米 k30 pro",
      "小米"
    ],
    "title": "Redmi K30 pro 完整体验(后篇)"
  },
  {
    "categories": [
      "前端"
    ],
    "contents": "第一篇： hexo主题迁移and折腾记\n第二篇：hexo主题模版改造记录\n本来在第二篇的时间就打算把剪贴板这件事搞定的，但是一拖拖了好久。\n起因 要知道很多 Hexo 模版都提供剪贴板功能，以及备案号展示功能，但是我这模版太早期了，要是用最新版本的那么自己的代码部分又要全部重新弄，我是非常不愿意这么做。那就不如自己来实现了。然后搜了很久以后我看到这么一篇文章：在 Hexo 主題內新增程式碼片段複製功能 这就很好啊，很符合我的要求。于是动工。\n思路 如果直接修改模版的话似乎也不是不行，但是那样的话可能会极大降低灵活度，另外我在翻看页面文件的时候也并未发现指定代码框的部分，因此还是直接用 JS 操作 DOM Tree 吧。\n如图我们基本可以看到实际上应该一个 highlight 下面俩子节点一个 code 一个 gutter ，这样的话其实如果按照上面链接内文章操作的话是在这段的顶部套一个 DIV 然后插入按钮什么的进去，但是这样似乎对我的这个模板来说不是很友好，所以最后我会选择插入这么个玩意儿：\n1 2 3 4 5 6 7 \u0026lt;div id=\u0026#34;codeblock-titlebar\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;lang-title\u0026#34; style=\u0026#34;font-size: 5px\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;button class=\u0026#34;codecopy-btn tooltipped tooltipped-sw\u0026#34; aria-label=\u0026#34;Copy to clipboard\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fa fa-copy\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; click to copy \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; 这样就好多了，也不需要担心顶层按钮后面放不了东西背景空一块出来。\n操作 但是其实只要观察过就会知道，整个代码框的部分全部是动态的，也就是说我们无法根据元素进行定位，只能使用 hexo 给定的父级对象操作，然后针对每个对象都如此操作才能在每个代码框中都插入按钮。因此代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 var snippets = document.querySelectorAll(\u0026#39;figure.highlight\u0026#39;); var htmlCopyButton = ` \u0026lt;div id=\u0026#34;codeblock-titlebar\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;lang-title\u0026#34; style=\u0026#34;font-size: 5px\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;button class=\u0026#34;codecopy-btn tooltipped tooltipped-sw\u0026#34; aria-label=\u0026#34;Copy to clipboard\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;fa fa-copy\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; click to copy \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; `; snippets.forEach(snippet =\u0026gt; { var parent = snippet.parentNode; var wrapper = document.createElement(\u0026#39;div\u0026#39;); parent.replaceChild(wrapper, snippet); wrapper.appendChild(snippet); wrapper.classList.add(\u0026#39;code-highlight\u0026#39;); wrapper.firstChild.insertAdjacentHTML(\u0026#39;beforebegin\u0026#39;, htmlCopyButton); var lang = (snippet.classList[1] || \u0026#39;code\u0026#39;).toUpperCase(); wrapper.setAttribute(\u0026#39;data-lang\u0026#39;, lang); }); 虽然我们无法直接操作，但是把我们需要的部分包裹起来就好办很多。\n复制按钮定位 根据 clipboard.js 的文档，直接调用后复制的内容是所调用的标签下的内容，但是我们的按钮的话直接调用会不起任何作用的，还是得找个合适的节点，我们可以在查看一下 td标签的那一行：\n我们需要的部分是：\n1 \u0026lt;td class\u0026#34;code\u0026#34;\u0026gt;...\u0026lt;/td\u0026gt; 上面一堆操作以后目前的结构是:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;div class=\u0026#34;code-highlight\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;codeblock-titlebar\u0026#34;\u0026gt; \u0026lt;span\u0026gt;...\u0026lt;/span\u0026gt; \u0026lt;button\u0026gt;...\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;figure class=\u0026#34;highlight lang\u0026#34;\u0026gt;\u0026lt;!--实际lang会被替换为编程语言的名称--\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;gutter\u0026#34;\u0026gt;...\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;code\u0026#34;\u0026gt;...\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;/div\u0026gt; 这就其实比较尴尬，大概顺序是我们的按钮的父级的下一个节点的子节点的子节点的子节点的第二个节点才是我们需要的内容（看着就绕），但是实际上确实没有好的处理办法（处理的越简洁速度越慢，详情请见廖雪峰的博客）。所以我们还是老老实实的写吧：\n1 2 3 4 5 6 7 var clipboard = new ClipboardJS(\u0026#39;.codecopy-btn\u0026#39;, { target: function(trigger) { var copytext = trigger.nextSibling.parentElement.nextElementSibling.querySelector(\u0026#39;.code\u0026#39;); return copytext; // console.log(copytext); } }); 最后倒是投机取巧的直接找 .code 解决掉，不过速度也不差，就那样吧。关于 CSS 的部分倒是没有什么好说的，直接上代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 //@import \u0026#34;fontawsome-all.min.css\u0026#34;; // ref: https://github.com/primer/primer/blob/master/modules/primer-tooltips/lib/tooltips.scss .tooltipped { position: relative; } // This is the tooltip bubble .tooltipped::after { position: absolute; z-index: 1000000; display: none; padding: 0.5em 0.75em; -webkit-font-smoothing: subpixel-antialiased; color: #fff; text-align: center; text-decoration: none; text-shadow: none; text-transform: none; letter-spacing: normal; word-wrap: break-word; white-space: pre; pointer-events: none; content: attr(aria-label); background: #616161; border-radius: 3px; opacity: 0; } // This is the tooltip arrow .tooltipped::before { position: absolute; z-index: 1000001; display: none; width: 0; height: 0; color: #616161; pointer-events: none; content: \u0026#39;\u0026#39;; border: 6px solid transparent; opacity: 0; } // delay animation for tooltip @keyframes tooltip-appear { from { opacity: 0; } to { opacity: 1; } } // This will indicate when we\u0026#39;ll activate the tooltip .tooltipped:hover, .tooltipped:active, .tooltipped:focus { \u0026amp;::before, \u0026amp;::after { display: inline-block; text-decoration: none; animation-name: tooltip-appear; animation-duration: 0.1s; animation-fill-mode: forwards; animation-timing-function: ease-in; } } // Tooltipped south .tooltipped-s, .tooltipped-sw { \u0026amp;::after { top: 100%; right: 50%; margin-top: 6px; } \u0026amp;::before { top: auto; right: 50%; bottom: -7px; margin-right: -6px; border-bottom-color: #616161; } } .tooltipped-sw::after { margin-right: -16px; } // Move the tooltip body to the center of the object. .tooltipped-s::after { transform: translateX(50%); } .codecopy-btn { border: none; display: inline-block; margin: 0 0; z-index: 999; float: right; background-color: #efefef; box-shadow: none; outline: none; height: 100%; } .codecopy-btn:hover{ background-color: #b6b6b6; text-decoration-color: #1b1f23; } @media print, screen and (max-width: 900px) { .codecopy-btn { font-size: 2vh; } } @media print, screen and (max-width: 850px) { .codecopy-btn { font-size: 1vh; } } .code-hightlight{ position: absolute; box-sizing: border-box; z-index: -5; } #codeblock-titlebar { margin: 0 0; padding: 0 0; width: 100%; height: 4vh; background-color: #efefef; position: relative; z-index: 9999; display: block; float: bottom; } 因为上面 titlebar 的作用是填补空白部分因此也就不怎么讲究了直接拉满即可。\n（未完）\n",
    "permalink": "https://blog.weearc.top/posts/60875/",
    "section": "Archives",
    "tags": [
      "hexo",
      "模版",
      "响应式"
    ],
    "title": "hexo 主题模板改造记录 2"
  },
  {
    "categories": [
      "hexo"
    ],
    "contents": "因为我本人也不是那么熟悉 GITHUB Actions 这玩意儿所以这篇文章仅仅针对性的告诉你怎样配置单单这个自动化部署而已。咕咕咕了很久也是时候应该把这篇补上了。\n首先老规矩，在需要部署的仓库里直接建立：\n1 2 3 4 \\----workdir |----.github\\ |---- workflows\\ |----- _config.yml 也不是什么难事吧。\n接下来进入 Actions 标签，左侧新建工作流 - 建立我自己的工作流，会给出一个 web editor ，此时可以在右侧选择模板，直接搜索 Cloudbase 会出现由腾讯云提供的 workflow 模板。大致如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 - name: Tencent CloudBase Github Action # You may pin to the exact commit or the version. # uses: TencentCloudBase/cloudbase-action@98ad8f31eb7bc09a8da3699149a9f765c7d8e8a1 uses: TencentCloudBase/cloudbase-action@v1.1.1 with: # 云开发 secretId secretId: # 云开发 secretKey secretKey: # 云开发环境 Id envId: # 静态资源:本地路径 staticSrcPath: # optional, default is build # 静态资源:云端路径 staticDestPath: # optional, default is # 静态资源:部署时忽略的文件路径,多个路径用,隔开 staticIgnore: # optional, default is .git,.github,node_modules 当然会与最终使用的配置文件有很大差别，我们需要逐一进行更改。首先先命名这个工作流：\n1 name: CloudBase CI 然后我们需要设置一下触发工作流的动作：\n1 2 3 # Controls when the action will run. Triggers the workflow on push or pull request # events but only for the master branch on: [push] 这里我印象中可以指定为如下几个动作：\npush commit pull merge 但是具体的还请看 Github 提供的文档。这里我们期望的是将文章在本地渲染后直接推动到远程服务器触发部署因此 on 的选择条件为监听 push 动作。\n1 2 jobs: # This workflow contains a single job called \u0026#34;build\u0026#34; 这里会出现一个数组，此数组下所有内容均被视为这个工作流在触发以后的动作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 deploy: runs-on: ubuntu-18.04 name: Tencent Cloudbase Github Action steps: - name: Checkout uses: actions/checkout@v2 - name: Deploy static to Tencent CloudBase id: deployStatic uses: TencentCloudBase/cloudbase-action@v1.1.1 with: secretId: ${{ secrets.SECRET_ID }} secretKey: ${{ secrets.SECRET_KEY }} envId: ${{ secrets.ENV_ID }} staticSrcPath: ./ 这些部分逐一进行解释：\ndeploy：部署项目 runs-on：指定操作系统环境或者软件环境，我就选择了比较常用的 ubuntu 18.04 name：任务的名称 steps：部署的动作，会逐一进行，每个步骤会跟随一个 name 和 uses 即使用的动作 由于一般情况是部署源码上去然后直接利用工作流渲染出来部署，但是我的仓库公开担心 apikey 之类的外流，因此选择在本地渲染完，远程工作流仅仅做一个 copy 的动作就行。因为使用的是 deployStatic 动作，并在子项 staticSrcPath 指定源码目录为项目根目录，with 部分均填写在项目设置里的 secrets 即可，可以直接调用对象。CloudBase 那边只要配置一下域名什么的就可以了，几乎不需要动什么。本次操作也就是全程 copy 毫无技术含量可言。当触发动作后可以进入 Actions 标签查看状态。\n",
    "permalink": "https://blog.weearc.top/posts/4529/",
    "section": "Archives",
    "tags": [
      "hexo",
      "完全配置",
      "Github Actions"
    ],
    "title": "使用 github actions 部署博客到腾讯云"
  },
  {
    "categories": [
      "hexo"
    ],
    "contents": "本文所提到的大概还是有实用价值的，但是我个人应该是不会用在博客上了。至于为什么 \u0026hellip; 因为心态炸了，退掉了手里所剩的几台 vps ，没必要使用自动部署了，但是日后可能会用在 CQU mirror wiki 上。\n事情起因 其实本来这种自动化部署之前弄过一次，但是因为某些原因服务器的 Debian 8 安装 node 11很麻烦，而我的自动化部署工具是基于 node11 的，所以索性放弃，每次登上去手动同步一下就好。\n但是这时候朋友的博客刚刚做好备案，然后另外一个朋友的博客改为放到 vercel 上了（均带有自动化部署），本着攀比心理，因为自己博客之前一直部署于服务器上所以觉得自己可以再折腾一次自动化部署，本着方便使用语言选择了 golang ，毕竟作为 Linuxer 自己折腾才是一大乐趣。\n开始折腾 既然语言选择了 golang ，那么如何实现就是一个问题，毕竟 nodejs 下面有现成的轮子可以用。所以基于对 golang 的了解和自己对于这个小工具的设计，决定这样来写这个工具：\n1 2 3 4 - cli 可用 - 尽量简单 - 通过处理请求头的办法来实现 - 服务端通过端口转发来使用，尽量不暴露端口 使用到的库：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #package main import ( \u0026#34;crypto/hmac\u0026#34; \u0026#34;crypto/sha1\u0026#34; \u0026#34;encoding/hex\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;gopkg.in/urfave/cli.v1\u0026#34; \u0026#34;io\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;sort\u0026#34; \u0026#34;strconv\u0026#34; ) 其中 cli 框架是用来处理 cli 下 Flag 等传值的，比起自己造轮子这个库要好用得多。然后需要处理一下监听：\n1 http.ListenAndServe(portForward, nil) 有了 http 库，监听只需要这一行代码即可实现。然后是请求头：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func index(w http.ResponseWriter, r *http.Request) { signature := r.Header.Get(\u0026#34;X-Hub-Signature\u0026#34;) if len(signature) \u0026lt;= 0 { return } payload, _ := ioutil.ReadAll(r.Body) mac := hmac.New(sha1.New, []byte(secret)) fmt.Printf(secret) _, _ = mac.Write(payload) expectedMac := hex.EncodeToString(mac.Sum(nil)) if !hmac.Equal([]byte(signature[5:]), []byte(expectedMac)) { io.WriteString(w, \u0026#34;\u0026lt;h1\u0026gt;401 Signature is error!\u0026lt;/h1\u0026gt;\u0026#34;) return } io.WriteString(w, \u0026#34;\u0026lt;h1\u0026gt;200 Deploy server is running!\u0026lt;/h1\u0026gt;\u0026#34;) reLaunch() } 这部分主要是需要有两个参数，一个是响应请求，一些是读取请求，具体怎么分析请求头，这接点开 webhook 的历史即可看到一个实例请求，我们需要处理的仅仅是 X-Hub-Signature 这一项，然后比对请求中的秘钥和转码后的秘钥是否相同判断是否可以执行接下来的动作。\nhttp 库最好用的我认为应该是可以对请求执行自定义函数了，直接指定一个 reload 方法即可调用拉取更新的脚本等：\n1 2 3 4 5 6 7 8 9 10 11 func reLaunch() { cmd := exec.Command(\u0026#34;load\u0026#34;) err := cmd.Start() if err != nil { log.Fatal(err) } err = cmd.Wait() } ... http.HandleFunc(\u0026#34;/\u0026#34;, index) 然后最后一点就是为整个功能套上 cli 框架即可，由于 cli 框架本身并不难用，所以一般直接看代码示例即可。项目地址：https://github.com/weearc/blog-webhook-deploy\n项目使用 GPLv3 开源，许可证也会在稍后进行添加。\n",
    "permalink": "https://blog.weearc.top/posts/49037/",
    "section": "Archives",
    "tags": [
      "github webhook",
      "自动化部署"
    ],
    "title": "使用 Webhook 自动部署博客到服务器"
  },
  {
    "categories": [
      "玩赏"
    ],
    "contents": "在给 NAS 升级系统之前我是很忐忑的,毕竟以前有过 Ubuntu 升级滚挂的经历(桌面版)，稍微查了一下似乎没有给 Ubuntu Server 升级的，那我就自己水一篇算了，过程比桌面版稳定很多也不容易出现什么问题。\n首先你可能需要确定一下现在的 Ubuntu 版本：\n1 cat /etc/os-release 大多数 Linux 发行版都可以通过这个方式确定版本号和具体发行版。比如以下三个（我的 NAS、笔记本和救援系统）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # os-relase examples # Ubuntu Server 20.04 LTS NAME=\u0026#34;Ubuntu\u0026#34; VERSION=\u0026#34;20.04 LTS (Focal Fossa)\u0026#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=\u0026#34;Ubuntu 20.04 LTS\u0026#34; VERSION_ID=\u0026#34;20.04\u0026#34; HOME_URL=\u0026#34;https://www.ubuntu.com/\u0026#34; SUPPORT_URL=\u0026#34;https://help.ubuntu.com/\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.launchpad.net/ubuntu/\u0026#34; PRIVACY_POLICY_URL=\u0026#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\u0026#34; VERSION_CODENAME=focal UBUNTU_CODENAME=focal # Arch Linux Rolling NAME=\u0026#34;Arch Linux\u0026#34; PRETTY_NAME=\u0026#34;Arch Linux\u0026#34; ID=arch BUILD_ID=rolling ANSI_COLOR=\u0026#34;38;2;23;147;209\u0026#34; HOME_URL=\u0026#34;https://www.archlinux.org/\u0026#34; DOCUMENTATION_URL=\u0026#34;https://wiki.archlinux.org/\u0026#34; SUPPORT_URL=\u0026#34;https://bbs.archlinux.org/\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.archlinux.org/\u0026#34; LOGO=archlinux # OpenSUSE Tumbleweed NAME=\u0026#34;openSUSE Tumbleweed\u0026#34; VERSION=\u0026#34;20200528\u0026#34; ID=\u0026#34;opensuse-tumbleweed\u0026#34; ID_LIKE=\u0026#34;opensuse suse\u0026#34; VERSION_ID=\u0026#34;20200528\u0026#34; PRETTY_NAME=\u0026#34;openSUSE Tumbleweed\u0026#34; ANSI_COLOR=\u0026#34;0;32\u0026#34; CPE_NAME=\u0026#34;cpe:/o:opensuse:tumbleweed:20200528\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.opensuse.org\u0026#34; HOME_URL=\u0026#34;https://www.opensuse.org/\u0026#34; LOGO=\u0026#34;distributor-logo\u0026#34; 看到 VERSION 那行了吗？括号里那个是 Ubuntu 的版本号和发行代号。记住这个，很重要。然后我们前往 Ubuntu Wiki 查看一下可选升级的发行代号，虽然怎么升级都差不太多，但是最好还是从 LTS 到 LTS 版本比较好，毕竟服务器系统稳定是第一位的。\n接下来和升级 Debian Stable 一样，我们要查看一下现在的 apt sourceslist :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 cat /etc/apt/sources.list ------------------------- # See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to # newer versions of the distribution. deb http://mirrors.cqu.edu.cn/ubuntu bionic main restricted # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic main restricted ## Major bug fix updates produced after the final release of the ## distribution. deb http://mirrors.cqu.edu.cn/ubuntu bionic-updates main restricted # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic-updates main restricted ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team. Also, please note that software in universe WILL NOT receive any ## review or updates from the Ubuntu security team. deb http://mirrors.cqu.edu.cn/ubuntu bionic universe # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic universe deb http://mirrors.cqu.edu.cn/ubuntu bionic-updates universe # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic-updates universe ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team, and may not be under a free licence. Please satisfy yourself as to ## your rights to use the software. Also, please note that software in ## multiverse WILL NOT receive any review or updates from the Ubuntu ## security team. deb http://mirrors.cqu.edu.cn/ubuntu bionic multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic multiverse deb http://mirrors.cqu.edu.cn/ubuntu bionic-updates multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic-updates multiverse ## N.B. software from this repository may not have been tested as ## extensively as that contained in the main release, although it includes ## newer versions of some applications which may provide useful features. ## Also, please note that software in backports WILL NOT receive any review ## or updates from the Ubuntu security team. deb http://mirrors.cqu.edu.cn/ubuntu bionic-backports main restricted universe multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic-backports main restricted universe multiverse ## Uncomment the following two lines to add software from Canonical\u0026#39;s ## \u0026#39;partner\u0026#39; repository. ## This software is not part of Ubuntu, but is offered by Canonical and the ## respective vendors as a service to Ubuntu users. # deb http://archive.canonical.com/ubuntu bionic partner # deb-src http://archive.canonical.com/ubuntu bionic partner deb http://mirrors.cqu.edu.cn/ubuntu bionic-security main restricted # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic-security main restricted deb http://mirrors.cqu.edu.cn/ubuntu bionic-security universe # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic-security universe deb http://mirrors.cqu.edu.cn/ubuntu bionic-security multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu bionic-security multiverse 看到 bionic 了吗？那个是我们现在的代号，我选择升级的 20.04 LTS 发型代号为 Focal Fossa 所以直接用新的发行代号替换旧的就行。\n操作如下：\n1 2 3 4 # 备份 sources.list cp /etc/apt/sources.list /etc/apt/sources.list.bak # 替换发行代号 sed -i \u0026#39;s/bionic/focal/g\u0026#39; /etc/apt/sources.list 可以再 cat 一下，此时文件内容变为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 # See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to # newer versions of the distribution. deb http://mirrors.cqu.edu.cn/ubuntu focal main restricted # deb-src http://mirrors.cqu.edu.cn/ubuntu focal main restricted ## Major bug fix updates produced after the final release of the ## distribution. deb http://mirrors.cqu.edu.cn/ubuntu focal-updates main restricted # deb-src http://mirrors.cqu.edu.cn/ubuntu focal-updates main restricted ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team. Also, please note that software in universe WILL NOT receive any ## review or updates from the Ubuntu security team. deb http://mirrors.cqu.edu.cn/ubuntu focal universe # deb-src http://mirrors.cqu.edu.cn/ubuntu focal universe deb http://mirrors.cqu.edu.cn/ubuntu focal-updates universe # deb-src http://mirrors.cqu.edu.cn/ubuntu focal-updates universe ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu ## team, and may not be under a free licence. Please satisfy yourself as to ## your rights to use the software. Also, please note that software in ## multiverse WILL NOT receive any review or updates from the Ubuntu ## security team. deb http://mirrors.cqu.edu.cn/ubuntu focal multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu focal multiverse deb http://mirrors.cqu.edu.cn/ubuntu focal-updates multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu focal-updates multiverse ## N.B. software from this repository may not have been tested as ## extensively as that contained in the main release, although it includes ## newer versions of some applications which may provide useful features. ## Also, please note that software in backports WILL NOT receive any review ## or updates from the Ubuntu security team. deb http://mirrors.cqu.edu.cn/ubuntu focal-backports main restricted universe multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu focal-backports main restricted universe multiverse ## Uncomment the following two lines to add software from Canonical\u0026#39;s ## \u0026#39;partner\u0026#39; repository. ## This software is not part of Ubuntu, but is offered by Canonical and the ## respective vendors as a service to Ubuntu users. # deb http://archive.canonical.com/ubuntu focal partner # deb-src http://archive.canonical.com/ubuntu focal partner deb http://mirrors.cqu.edu.cn/ubuntu focal-security main restricted # deb-src http://mirrors.cqu.edu.cn/ubuntu focal-security main restricted deb http://mirrors.cqu.edu.cn/ubuntu focal-security universe # deb-src http://mirrors.cqu.edu.cn/ubuntu focal-security universe deb http://mirrors.cqu.edu.cn/ubuntu focal-security multiverse # deb-src http://mirrors.cqu.edu.cn/ubuntu focal-security multiverse 接下来我们 apt update 一下更新缓存，然后执行 apt upgrade 进行升级。这个阶段可能会报错，不用理会。更新完重启系统，会发现此时还在旧版，但是这次可以进行升级了，直接执行 apt upgrade 进行升级，期间会提示包括 ssh_config 文件之类的需要进行修改，此时保留旧的配置文件即可，剩下的一路回车直至升级完成。即可完成跨版本升级。\n祝使用愉快！\n",
    "permalink": "https://blog.weearc.top/posts/60365/",
    "section": "Archives",
    "tags": [
      "Ubuntu",
      "升级"
    ],
    "title": "[划水文] 给NAS的Ubuntu Server升级"
  },
  {
    "categories": [
      "玩赏"
    ],
    "contents": "今年换手机这个时间节点卡的非常不好，早一点有最末代 4G 旗舰机纷纷大降价，晚一点可能还有 5G 手机集体跳水。但是买了就买了。鄙人第三部纯小米家搭载 MIUI 的设备。\n我的上一部设备：HTC U Ultra，HTC U系列的开山之作，也可能说是 U 系列最失败的作品。你问我当时后不后悔在 18 年年初买了一款 17 年初的产品，我的回答是不后悔：放在今天依然不为过时的机身设计、2K LCD 屏幕、强悍的双扬声器、主动降噪耳机以及 HIFI 都带来了非常极致的视觉听觉盛宴，当时最为彪悍的影像系统也使得这部设备在服役期间让我体会到了它的强大。可惜就可惜在这么看起来很强大的设备搭载的是高通有着火龙之称的 SOC 821，而且还是阉割版。如果是放在17年年初这款设备的运存性能什么的也都够用，但是一跨入19年立刻体现出了短板，并且仅仅3000毫安时外加极为激进的调度让我不得不时时刻刻准备着充电宝，但是仍有可能在剩余百分之十几电量时突然自动关机。\n上学期好信儿测了一个月电池损耗，两年使用时间实际损耗不到百分之10倒是体现了 HTC 到底还是在用料上花了钱，遂换了块电池觉得能够继续服役。但是没能料到年后续航直接从刚换电池那会儿近乎腰斩，外加4GB 运行内存不怎么够用，所以还是准备更换手机。\n要知道今年可以更换的手机真的是选择少之又少，尤其是 5G 手机，各家纷纷将高刷新率作为卖点的同时外加物料人工成本疯狂上涨，价格是直接翻了一番。因为考虑到后期可能需要使用 GMS（我对GMS重度依赖，没办法，从13年开始自己选择的），华为系手机不得已全部不能选择，很可惜。 那么能够选择的只剩下小米、OPPO、VIVO、Realme、一加这几个选项。俗话说得好：一朝被蛇咬十年怕井绳，看了大量网友的评测以后决定放弃续航稍差的 Realme X50 Pro，OPPO的机器因为价格也不得不放弃，一加在考虑了售后以后放弃，VIVO 因为系统原因放弃。只剩下小米10和 Redmi K30 Pro 这两个选项。不买中端机的原因也很简单，旗舰的配置可以在某种程度上将使用年限拉长并且体验更好。最终还是考虑了续航的情况下选择了红米 K30 Pro。\n说了这么多，这台机器有什么卖点？是续航，还是所谓真全面屏？在我看来这些都不能算是卖点，高通 865 一套打包拿来就是那么些东西，各家标配。没有的高刷新率的屏幕虽然本身不错但是今年却意外的成为了各路网友疯狂吐槽的地方。于我个人而言，这台机器总体体验对比 U Ultra 是升级的，要不换手机是换了个什么呢？但是总体体验依旧降级：\n1080p 屏幕，等效330 ppi。对比 U Ultra 的“标准”2560×1440的屏幕 ppi 440（虽然米10等效ppi也很低） 单扬声器。从双扬声器缓过来不是不能适应，但是还是觉得并不舒服。 Type-C 接口数字信号音频输出功率小。自带 DAC 的转接线几乎就是推不动。 重量。重量来到了228g，用一年下来应该就成麒麟臂了，带壳贴膜妥妥“米半斤” 那么也有一定的优势：\n续航。变态级别的续航，轻松日用亮屏10小时以上，充一次电使用时间20小时起步（前提是自己改一改省电策略） 还算不错的屏幕色彩。虽然 PPI 大打折扣但是屏幕色彩确实还可以。 还算不错的影像系统。虽然是打包出售的 imx686，但是体验下来整体体验确实不错。 一个优点顶十个缺点。最起码换机的原因之一：续航这个痛点是完美解决了。\n（未完待续）\n",
    "permalink": "https://blog.weearc.top/posts/155/",
    "section": "Archives",
    "tags": [
      "redmi",
      "红米 k30 pro",
      "小米",
      "电量焦虑"
    ],
    "title": "redmi K30 Pro 简评"
  },
  {
    "categories": [
      "杂谈"
    ],
    "contents": "最近晚上很容易饿，就自己摸索了一点简单的食谱出来。\n可能是北方最近结束供暖的缘故，地气很凉，然后为了保持体温之前供暖那段时间的不大的饭量转化为热可能就没剩下多少了。有时候夜里也爱到处寻找食物，但是 \u0026hellip; 毕竟宵夜不能总吃而且对身体不好，晚饭在家里又只有我一个人吃，那就不如晚饭做一点容易暖和起来的更容易有饱腹感的食物。(在家不吃肉，所以肉是不存在的.jpg)\n大概参考了日式杂烩饭的做法，稍稍改造了一下，食谱如下：\n原料： 大米（看量杯就可以，一般一小杯是一人一碗半的量）、胡萝卜、生姜。如果有吃剩下的蘑菇也可以加一点进去\n调料：酱油、白酒、砂糖\n没了，就这么简单。煮个大米饭也没什么要点。无非是控制好水不要太多，把手指插入米中差不多水面比大米高出一个指关节高度。然后酱油用生抽就好，如果能买到日式酱油当然更棒，酒 + 砂糖这个组合是为了替代味淋（本来早打算再买一点，但是卖这些的店这几天才重新开起来了），砂糖不用很多，刚好似有似无甜味的程度就可以了，得自己慢慢试着来。整个饭的亮点感觉在于生姜，给饭增添了非常棒的风味。如果是用南方的籼米做的话可以在出国后少淋一点芝麻油，当然东北大米就不需要了，油水很足，干吃都非常香。\n以前也试着用咖喱粉+鸡蛋简单调一个蛋糊做调味饭，但是还是觉得自己更喜欢偏向日餐韩餐的风味，贴近锅边的地方会有一点点锅巴，很让人满足。\n",
    "permalink": "https://blog.weearc.top/posts/1552/",
    "section": "Archives",
    "tags": [
      "杂谈",
      "食谱"
    ],
    "title": "夜食食谱"
  },
  {
    "categories": null,
    "contents": "全文已发布至重庆大学蓝盟微信公众号往期内容内，博客上的版本待修改完善。\n作为一个影音爱好者，我需要利器去使电影播放效果更加出色。作为技术向玩家，既然目前已有的工具都不怎么好用，那我们就来改造它让它更好用。\n这就是我们今天要介绍的主角：mpv。\nMPV 是基于 MPlayer 和 MPlayer2 的开源软件。具有卓越的性能以及跨平台兼容性。\n\u0026mdash; 维基百科\n说到 MPV ， 大部分日常使用 Windows 的同志可能都没有听说过。但是 Linux 和 Mac OS 用户可能大部分人还是接触过的，即便是使用了 MPV 的变种（比如： bomi，或者是 Mac 下拥有精美 GUI 界面的IINA）他们都和 MPV 同宗同源。在大部分情况下，使用已经功能足够完善的带 GUI 的 MPV 虽然已经足够，但是就个人而言，却远远不够，这个影音大杀器只有在我们的完全自定义中才能最强大的力量。\n安装 MPV 的安装极其简单：\nWindows： 访问 mpv.io 并下载 mingw-w64-mpv\nMac：Mac OS 用户可以通过 Brew 安装 MPV：\n1 brew install mpv Linux：一般的 Linux 仓库都会包含 MPV，部分发行版预装了 MPV，想要独立安装请使用以下指令\nUbuntu / Debian ：\n1 sudo apt install mpv OpenSUSE ：\n1 sudo zypper in mpv Fedora：\n1 sudo dnf install mpv Arch Linux：\n1 sudo pacman -S mpv 当然你也可以从源代码编译 MPV ，可以从 MPV 的 GITHUB 仓库获取源代码并修改编译参数，包含 / 去除 某些特性\n配置 如果你成功的克服了心里上的恐惧，成功“安装”了MPV，那么这一步将是你能够愉快使用与否的关键。\n在大部分情况下（尤其是 Mac 和 Linux 用户），已经将编解码器作为依赖安装到了操作系统中，而 Windows 用户可能需要手动安装 FFmpeg 作为编解码工具。由于没有编解码器的播放器只是一个“睁眼瞎”，只有在编解码器的存在下它才能发挥其真正的作用。那么在安装结束后，你可以使用 MPV 的默认设置进行视频播放了。\n通常来讲直接运行 MPV 应该是这个样子，相比于其他完全基于命令行的播放器，MPV 还有个 GUI（虽然没什么用）。\n播放视频的时候是这个样子，功能全部集中于下部的控制栏上，好像也还够用（其实确实够用了）。这个是小编配置完的 MPV ，但是因为懒 GUI 部分就不打算动了，这样也挺好的。\nMPV 之所以看上去很简单（应该叫简陋），是因为它和大多数的高自定义化的工具一样，许多功能只有在探索之后才会被发现，另外支持丰富的扩展，可以找别人已经写好了的插件，也可以自己学着写一些插件。与其让开发者动手去满足用户（还不一定都会满足），不如自己动手丰衣足食。如果使用默认配置就能够让你满足那确实是最好不过，但是我们完全可以给它加上一些更有趣的功能。\n缩略图 这个是一般开箱即用的播放器都会有的功能。\n地址：https://github.com/TheAMM/mpv_thumbnail_script\n这是一个非常棒的查看进度条上缩略图的脚本，基于 Lua ，并具有一定的自定义功能 安装：将脚本放于以下位置\nWindows: %APPDATA%\\mpv\\scripts\\mpv_thumbnail_script_server.lua \u0026amp; %APPDATA%\\mpv\\scripts\\mpv_thumbnail_script_client_osc.lua\nLinux/Unix/Mac: ~/.config/mpv/scripts/mpv_thumbnail_script_server.lua \u0026amp; ~/.config/mpv/scripts/mpv_thumbnail_script_client_osc.lua\n注：如果目录不存在则需要手动创建，具体可以参照 GITHUB 上的说明\n文本菜单 如果觉得部分基于命令行的功能不太适应的话，不妨试一下图形菜单。\n地址： https://github.com/carmanaught/mpvcontextmenu\n这里只给出了作者展示的样式，可以通过自己修改样式表获得更加美观并且好用的菜单。图形部分通过 TK 或 GTK 实现。部分功能需要自己书写一定配置。\nkdialog open files 此方法仅适用于 Linux （KDE）。\n作为一名 KDE 用户，在 Linux 桌面环境上 GTK 和 QT 程序体验上的割裂极其难受，别的都可以忍，但是 GTK 反人类的会话样式不能忍。幸好有人开源了这个调用 Kdialog 打开文件的脚本，打开 MPV 以后，使用快捷键即可开启打开文件的窗口。 Play with mpv 这是一个相当好用的浏览器插件。在看视频的时候希望不看到浏览器上花花绿绿的列表 / 广告？还是单纯的就只想在本地播放器上播放网页视频？这个插件都可以满足你。该插件需要配合一个 Python 脚本实现网页视频本地化播放，通过调用 youtube-dl 解析播放地址，实测支持大部分主流的视频网站，配合弹幕插件可以本地愉快的看番，不用“关弹幕保智商”了。\n总结 MPV 是一个相当好玩并且强大的工具。如果你期待的是开箱即用，那么它可能确实是开箱即用（虽然看上去不好用），如果你希望的是它生来强大，那么它也确实是生来强大，丰富的自定义选项以及插件可以使得它变成任何你想要的样子。\n如果你和我一样对现有的工具并不满意，又有一定的“折腾的勇气”，那为什么不试试看这个工具呢？期待你的尝试！更多的插件部分可以参阅 MPV 仓库 文档：https://github.com/mpv-player/mpv/wiki/User-Scripts\n",
    "permalink": "https://blog.weearc.top/posts/162/",
    "section": "Archives",
    "tags": [
      "待修改"
    ],
    "title": "[冷门向] 使用 mpv 打造专属播放器"
  },
  {
    "categories": [
      "一言"
    ],
    "contents": "人完全可以为自己的愤怒而感到庆幸，因为它维系了自己的价值观。\n",
    "permalink": "https://blog.weearc.top/posts/3498/",
    "section": "Archives",
    "tags": [
      "一言"
    ],
    "title": "一言 20200319"
  },
  {
    "categories": [
      "玩赏"
    ],
    "contents": "往年这个时间就已经回到学校了，今年算是个例外也正好给家里换一下老旧设备。\n本着勤俭节约的美德，一个物品确实是应该用到彻底罢工才能换的。本来想着这次也如此 —— 但是架不住网络提速，原本家里的普联某超旧型号的路由器在 20m 升级到 50m 的时候就已经不能跑满带宽了，更何况是现在百兆直接升级千兆网。因此也有了一个很好的理由说服父母允许咱更换路由器。\n那么问题就来了，是按照惯例再挑选一个普联的新产品？还是选水星家的 D191g ？还是买 Newifi？Newifi 在学校寝室使用后我初步得出的结果是：同时接驳多个设备后负载非常大，承载能力太低。并且一些功能鲁棒性测试无法通过。虽然可以通过刷入 Openwrt 提升素质，但是对于需要非常稳定使用的家庭使用场景还是不太适合，因此不再做考虑。至于其他产品倒也是让人纠结不知如何下手。\n在纠结了好一段之后突然想起朋友说过 Redmi 新出的那个路由器风评也相当不错，既然普联水星没法考虑，那就都不考虑吧，遂在看了一些测评后决定购买 Redmi AC2100 。\n开箱 疫情期间小米之家发货速度一般，顺丰也因为管制绕了本省一大圈才送进来。 外包装倒是相当突出产品本体，内层使用纸模\n产品本体为白色，使用了磨砂材质的塑料，气孔较多可能需要做防灰处理。另外看了一下天线等地方，包括充电器本体都出现了水口未处理干净或者飞边，考虑到同价位的水星做工都没出现这种问题还是要批评下。 （看到了吗\u0026hellip;天线下部的那个分模线\u0026hellip;\u0026hellip;）作为胶佬得时刻提醒自己这个是摆在那放着的不是模型\u0026hellip;\u0026hellip;\n连接 连接相比之前了解到的倒是简单了很多，不需要先用电脑来初始化。只要路由器上电，连接到网络以后就算通过手机也能轻松的进行设置。另外初始化时提供了包括中继的设置，这点好评。\n测速 相比 speedtest 这种枯燥无味的测试，我觉得找一些相对极限的场景进行测试更有代表性，比如找一个穿墙次数相当多的地方下载文件：\n1 2 3 4 5 6 7 ddqi \u0026gt; ~ \u0026gt; aria2c -x 16 http://mirrors.cqu.edu.cn/UbuntuKylin_release/ubuntukylin-19.10-enhanced-amd64.iso 03/05 16:43:55 [NOTICE] Downloading 1 item(s) *** Download Progress Summary as of Thu Mar 5 16:44:55 2020 *** =================================================================== [#a89ecf 441MiB/2.5GiB(17%) CN:5 DL:7.0MiB ETA:5m3s] FILE: /home/ddqi/ubuntukylin-19.10-enhanced-amd64.iso ------------------------------------------------------------------------------------------------------------------- 2.4 GHz 下穿墙效果一般都比 5GHz 要好上不少，但是在用网小高峰时候还隔着墙进行测试都能有这种成绩还是能说明一些问题的，至少从结果上讲这款路由器一般家用场景应该是完全应付得了，甚至可以说绰绰有余。（不要小看老旧小区所谓的“全楼共享带宽”带来的网络问题啊喂！）\n总结 既然本着家用场景，那就不需要再做其他专业性质的测试。目前使用情况来看完全是物有所值，是一款具有性价比的产品。至于是不是“有失公允”还有待测试，但是至少从风评上看确实是相比小米旧款路由器的评价好了不少，小米路由器团队做出的努力也确实让人看到了。卢十瓦吹得再神，这也是一款面向实用场景的产品，是一款有诚意的产品。\n",
    "permalink": "https://blog.weearc.top/posts/32494/",
    "section": "Archives",
    "tags": [
      "路由器",
      "Redmi",
      "小米"
    ],
    "title": "有失公允？ 红米AC2100路由器体验"
  },
  {
    "categories": [
      "archlinux"
    ],
    "contents": "盼星星盼月亮终于拿到了心心念念的固态硬盘，终于能够有畅快淋漓的体验了。\n既然固态硬盘体验这么好，那为啥以前非要买那么写机械？因为我是仓鼠症患者，买的硬盘全部拿去存电影了\u0026hellip;\u0026hellip;.\n那到固态以后其实就没什么好说的，之前光驱位以及主硬盘位都有机械硬盘，光驱位上的盘作为纯粹的数据盘挂载在 Arch 下面。所以就算单独拿下来去给 NAS 挂着也没什么大问题。那么最终就还是主硬盘位的机械硬盘去了光驱位，新买的固态上了主硬盘位。\n其实在迁移前我很纠结要不要重装windows，本意上是不想重新安装的，一大堆专业软件和自己配置的环境重新弄起来费时费力而且真的要命。那么就还是决定使用软件做系统迁移。先把最麻烦的windows的部分解决。Linux 反而是一向最容易迁移的了。\n迁移windows10 下载 aomei 无损分区助手PE版本，配合wepe做好系统迁移，这个时候会一并把esp分区迁移过来，所以 linux 下就不需要重建了。有的电脑可能会遇到说是内存不足，那就老老实实重装吧。\n迁移ArchLinux 在windows下面如果没有了 Aomei这样的工具，那么迁移起来说实在说的是极其痛苦的，尤其现在ghost还不能用。Arch就要轻松很多。只需要用到 rsync 即可。\n在旧的Arch下面给新硬盘剩余空间分好区，然后直接把新的根分区挂载在 /mnt 其余比如 /home /boo/efi 也依次挂载好。终端中执行以下命令：\n1 rsync -aAXv /* /mnt/. --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/var/tmp/*,/run/*,/mnt/*,/home/*,/media/*,/lost+found,/boot/*} 命令参数详情请参阅 rsync 的手册部分。然后排除掉 “运行态”的部分，对所有目录进行重建，文件按照归档进行迁移。执行以后大功告成一半。\n由于我需要将原来的根分区删掉分给 home , 因此进入 Livecd 对旧分区进行删除操作，然后将分区移动到空间头部。完成后执行：\n1 arch-chroot /mnt 参照当初安装 Arch 的步骤进行，执行：\n1 grub-install --target=x86_64-efi --efi-directory=/boot/efi/ --recheck 重新安装grub。并配置grub：\n1 grub-mkconfig -o /boot/grub/grub.cfg 在此之前记得删除掉旧的esp分区。至此基本大功告成。最后记得检查一下 /etc/fstab 以免启动时出现问题。\n耗时4个小时两个系统迁移完毕，windows用了三个多小时，Arch用了40分钟不到。\n",
    "permalink": "https://blog.weearc.top/posts/25676/",
    "section": "Archives",
    "tags": [
      "archlinux",
      "系统迁移"
    ],
    "title": "ArchLinux + Windows10 双系统固态硬盘迁移"
  },
  {
    "categories": [
      "archlinux",
      "输入法"
    ],
    "contents": "原本搜狗输入法确实是真香的，但是架不住它总不更新问题一大堆。\n作为非英语作为母语的计算机使用者，尤其是 GNU/Linux 用户，输入法确实是非常大的一个硬伤。如果说 QQ 微信 网易云 还可以勉强要么通过 wine 的方式要么通过虚拟机 就多多少少都还能解决，输入法如果没有原生可用的那就非常痛苦了。因此国内最厉害的中文输入法 搜狗输入法 在推出 Linux 版本的时候为什么那么多人感到异常兴奋也就多多少少能够理解。你用或者不用，都无法否认搜狗在输入法上做的贡献之大。\n但是距离上一次更新也过去许久，依旧构建于 QT4 的搜狗拼音已经渐渐暴露出很多问题，并且看来短时间内没法迁移到 QT5。并且搜狗造的轮子 sogou-qimpanel 还会和 fcitx 的 kimpanel 产生冲突。但是说实在的如果不是搜狗的词库异常强大咱也就不会就算一直被恶心也要坚持使用下去了。\n不过，其实很早我们可能就有了另外一个非常棒的选择，也就是 fcitx5 。\n有关 fcitx5 的详细配置过程可以参考 Arch Linux Wiki ， 网上也有诸多 Archer 来写，就不加赘述。也可以参考我的这个仓库之中的 readme 。\n今天主要是讲讲看、研究一下 fcitx 的皮肤绘制。\nfcitx5 的皮肤最基础的部分由以下几个文件构成：\n1 2 3 --- panel.png |- hightlight.png -- theme.conf 正如文件命名，panel 指输入法候选词位置的样式， highlight 为候选词高亮背景。简单的说如果我们拿到一个皮肤的样版，对面板和高亮进行更改的话就能够调整输入法皮肤样式。\n（剩下的内容有时间再详细查查相关内容补全）\n",
    "permalink": "https://blog.weearc.top/posts/14466/",
    "section": "Archives",
    "tags": [
      "fcitx",
      "archlinux",
      "fcitx5"
    ],
    "title": "fcitx5尝鲜(另付fcitx5输入法皮肤摸索)"
  },
  {
    "categories": [
      "随笔",
      "杂记"
    ],
    "contents": "人大多数时候选择去做一件事，也许并不是为了获得什么，而是单纯的害怕空虚。\n近两年的个人状态可以说是非常奇怪了。总结下来也无非是开头那句话。正因为害怕空虚所以去做各种事情，将自己的时间填满。不过，就算空着的时间都填满了，难道就会感到满足了吗？我不以为意。反而感觉更加的空虚。说白了，这种因为空虚所以选择让自己看起来很忙的行为无异于饮鸩止渴，逞一时之快后患无穷。究其原因还是因为少了方向感。\n高考前之所以能稳住拼尽全力，也无非是因为只需要考虑怎么答题就对了，脑子里什么都不需要想。拼命学了三年需要有一个突破口，一个来发泄的点。然后进入了大学，不再如同高中，可以考虑可以尝试的东西极大丰富，本来就患有选择困难的我人生第一次感到如此迷茫。专业不是我喜欢的、但是成绩又不是最好的、喜欢的东西在侵占我的时间、但是不喜欢的东西却本需要大把时间。越是想逃离就越是逃不掉，最后深陷其中。坦然接受现状虽然是最佳选择，不过，我又浪费掉了一年。确实可以有很多，但是似乎在前途面前都是苍白无力。每次回家看到父母日渐衰老，家事变化也不由得暗自落泪。\n家人倒也不像是其他人说的那样对我寄予厚望，到时自己越是给说一般般平平常常就可以越是感到压力倍增。正因为看到了家人的辛苦之处，才想变得更强将来可以保护家人；越是想变得更强越是对现状不满，对自己不满；越是对自己不满就越是急切的想找到目标。然而我没有目标。因此愈发感到无比空虚。因此就尝试做很多事情，又因为本身学习能力并不差所以就学会很多事情，以此可以更好地消磨时间。\n我急切的需要摆脱这种现状，那么最好的办法我希望不再是定下长远的目标，而是短时间内先从眼前的事情做好。以前到时很瞧不起做计划之类的，总觉得“到时候总会有办法”，不过现在看前人的经验真的是正确无比，所谓摸着石头过河也是需要摸到下一个石头的位置，更长远的目标就是“对岸”。重新来过的这一年，我仍不希望自己空虚，那么就尝试换成另外一种方法填满自己算了。\n",
    "permalink": "https://blog.weearc.top/posts/12326/",
    "section": "Archives",
    "tags": [
      "杂记",
      "随笔"
    ],
    "title": "杂谈"
  },
  {
    "categories": [
      "前端"
    ],
    "contents": "有时候就是心血来潮才想搞一些好玩的，假期一旦懒下来人就待完了。\n上一篇: hexo主题迁移and折腾记\n开始 之前一直是抱着小小改造一下将就用就行了的心态来改造博客主题，直到又一个朋友也开始建立博客。于是一直懒着不愿意写的友链以及关于的独立页面也不得不提上日程，就连之前想加入的 clipboard.js 这次也想一股气做好。说起来容易，实际开始读 layout 部分代码才发现自己并不是很懂整个 pug 模版的渲染流程以及构架。整个博文是对于改造过程的记录，如果嫌烦可以跳过我思考的那一部分。\n思考 最初搜索一番，仍然发现大多数就是简单的建立一个友链的 page 然后直接 md 堆上去就完事了。当然我之前也这么做过。但是实际效果并不尽如人意。于是不得不进行主题拆解。\n然后花费了相当长一段时间发现并没有搞懂主题的布局\u0026hellip;Orz。这就产生了一个问题，在寻找了非常多 HEXO 主题开发相关的博文时候，发现不管是用脚手架来搭建还是怎样，一个主题一定是先有布局再往里面填肉，虽然日常自己写点东西是这个思想却没想到用这个思想来解构，有点呆。\n解构主题 所以，整体布局确实如下图，从代码中也多少能看出点倪端：\n那么看下整体文件的解构：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 themes/maupassant/layout/ ---------------------------------- ├── archive.pug ├── base.pug ├── index.pug ├── page.pug ├── post.pug ├── single-column.pug ├── timeline.pug ├── _partial ├── after_footer.pug ├── comments.pug ├── footer.pug ├── head.pug ├── helpers.pug ├── mathjax2.pug ├── mathjax.pug ├── paginator.pug ├── post_nav.pug ├── tag.pug ├── totop.pug └── wordcount.pug |── _widget ├── category.pug ├── links.pug ├── recent_comments.pug ├── recent_posts.pug ├── search.pug ├── tag.pug └── toc.pug 如果是仔细阅读过主题配置文件，就会发现其中下面列出的这一部分就属于我们说的“单独的页面”：\n1 2 3 4 ├── index.pug ├── timeline.pug ├── post.pug ├── archive.pug 这些是主题中最最基础的几个独立页面：文章、时间线、主页、文章归档。\n其中都会有那么句：\n1 2 3 extends base ... include _partial/BALABALA.pug 如果是对编程相对熟悉的同学可能一下子就发现了这不是典型的引入么，前面是以 base.pug 作为“母版”，后面在上面加东西。前面尝试着 copy 过别人的代码尝试添加一个侧边栏的 TOC（以失败告终），但是并没有好好阅读代码，所以这次吃了大苦头。所以，就连其他全部页面都是在 base 基础上扩展来的，因此提供了一个思路：要想添加自己的独立页面，就需要仿照其他的从 base 为基础进行扩展。\n那么我们来看一下，比如这个 archive:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 archive.pug ------------------- extends base block title if page.category title= page.category + \u0026#39; | \u0026#39; + config.title if page.tag title= page.tag + \u0026#39; | \u0026#39; + config.title if page.archive title= __(\u0026#39;archive\u0026#39;) + \u0026#39; | \u0026#39; + config.title block content if page.category || page.tag h1.label-title= __(\u0026#39;reading_label\u0026#39;, page.category || page.tag) .post .post-archive //Use lodash to classify posts. See https://lodash.com/docs#groupBy each posts, year in _.groupBy(page.posts.toArray(), function(p){return -p.date.format(\u0026#39;YYYY\u0026#39;)}) h2= -year ul.listing for post in posts li span.date= post.date.format(config.date_format) a(href=url_for(post.path), title=post.title) +title(post) include _partial/paginator.pug 可以发现整个结构如下：\n1 2 3 4 5 6 7 extends base block title .......... block content ........ 正好也符合整个页面的布局。那么，友链那么多条是不是要自己一条条加上去呢？傻子才全手写。\n_widget/links.pug 中就很好的提到了一个思路，当然也非常常用：用 for 循环\n1 2 3 - for (var i in theme.links) ul a(href=theme.links[i].url title=theme.links[i].title target=\u0026#39;_blank\u0026#39;) #{theme.links[i].title} 不过可以发现少了一些东西，头像呢？描述呢？其实这些东西自己加上就好，这里不赘述 YAML 的语法，整个过程相当是从themes/_config.yml 中取出 links部分的值，然后找寻每个 links 部分的的子项，这是个很好的思路。\n动工 首先现在themes/_config.yml填入所需值，然后编写独立页面：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 layout/single-link-page.pug ------------------------------------- extends base block title title= page.title + \u0026#39; | \u0026#39; + config.title block content - for (var i in theme.links) p a.friendurl(target=\u0026#39;_blank\u0026#39;, href=theme.links[i].url, title=theme.links[i].title) a.friendurl(target=\u0026#39;_blank\u0026#39;, href=theme.links[i].url, title=theme.links[i].title) .frienddiv a.frienddivleft(target=\u0026#39;_blank\u0026#39;, href=theme.links[i].url) img.myfriend(src=theme.links[i].src) // 头像部分 .frienddivright | #{theme.links[i].title} br br | #{theme.links[i].dec} // 描述 样式网上有非常多，不愿意写可以找一找抄一抄（虽然有无脑抄完回来给我留言说编译失败的\u0026hellip;.）。有点前端基础自己写就好，这种东西不怎么依赖定位倒也是好写。\n然后出现一个问题：侧边栏影响美观程度。解决方法是仿照 base 写一个无侧边栏的即可（其实就是把 sidebar 对应部分注释掉），相对的，开头 extends 的部分也要进行修改。\n（未完待续）\nhttp://www.codeblocq.com/2016/03/Create-an-Hexo-Theme-Part-2-Other-Pages/\nhttps://hqcfly.github.io/2016/06/19/hexo-theme-guide/\nhttps://molunerfinn.com/make-a-hexo-theme/\nhttp://huanyouchen.github.io/2019/03/22/add-tags-pages-to-hexo-maupassant-theme/\n",
    "permalink": "https://blog.weearc.top/posts/31380/",
    "section": "Archives",
    "tags": [
      "hexo",
      "模版",
      "响应式"
    ],
    "title": "hexo主题模版改造记录"
  },
  {
    "categories": [
      "archlinux"
    ],
    "contents": "都多久了我也不太记得，网易云下竟然由于qt的某个问题不能使用fcitx输入中文了！WTF！不过我们可以曲线救国。\n就算直接不能输入中文我们也有办法暂时解决这个问题。那就是使用zenity+xclip制作一个可输入中文的带有 GUI 的一个脚本。\nxclip是Unix以及类Unix系统下非常强大的剪贴板交互程序\n我们可以简单看一下xclip的help输出：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Usage: xclip [OPTION] [FILE]... Access an X server selection for reading or writing. -i, -in read text into X selection from standard input or files (default) -o, -out prints the selection to standard out (generally for piping to a file or program) -l, -loops number of selection requests to wait for before exiting -d, -display X display to connect to (eg localhost:0\u0026#34;) -h, -help usage information -selection selection to access (\u0026#34;primary\u0026#34;, \u0026#34;secondary\u0026#34;, \u0026#34;clipboard\u0026#34; or \u0026#34;buffer-cut\u0026#34;) -noutf8 don\u0026#39;t treat text as utf-8, use old unicode -target use the given target atom -rmlastnl remove the last newline charater if present -version version information -silent errors only, run in background (default) -quiet run in foreground, show what\u0026#39;s happening -verbose running commentary 按照功能，我们需要：\n输入文字 将文字输入到剪贴板 将文字传给clipboard程序 非常简单的三个部分。输入文字部分由zenity负责，同时将输入的文字存入变量中，之后用管道传给xclip程序。\n那么需要用到的xclip选项应该就很容易选择了。\n1 2 3 # xclip option xclip -i # read text into X selection from standard input or files xclip --selectron clipboard # copy input to clipboard for output 思路明确了以后就非常容易办了，我们再看一下zenity entry部分的帮助说明：\n1 2 3 4 5 6 7 8 用法： zenity [OPTION…] 文字输入选项 --entry 显示文本输入对话框 --text=文字 设置对话框文字 --entry-text=文字 设置输入文字 --hide-text 隐藏输入文字 也就是说我们只需要使用 --entry 选项显示输入框即可，在尝试中发现，bash下执行zenity \u0026ndash;entry后会将输入打印到终端，也就是说我们需要将其存为变量才可以使用。因此完整代码如下：\n1 2 3 4 5 #!/bin/bash words_to_copy=$(zenity --entry) # Use zenity to display a GUI information message. echo $words_to_copy | xclip -i echo $words_to_copy | xclip -sel c ",
    "permalink": "https://blog.weearc.top/posts/5960/",
    "section": "Archives",
    "tags": [
      "zenity",
      "xclip",
      "去他妈的网易云"
    ],
    "title": "使用zenity+xclip实现文字复制粘贴"
  },
  {
    "categories": [
      "archlinux"
    ],
    "contents": "距离第一篇博文时隔快两年的更新。由于本次配置文件有问题，KDE直接罢工。修补无果于是决定重装。\n前文：\n基础系统安装 基础系统配置 前言 本文将会涉及到的内容：\n相当个人级别的系统配置 可能非常不符合常理的做法 可能涉及到的错误 如果是第一次或者还没安装的话可以先按照正经的步骤进行安装以避免误导。\nchroot下的变更 在正常的安装流程下，我增加安装了几个包：\n1 pacman -S fish iw dialog dhcp wpa_supplicant vim sudo screenfetch htop 将其分为几类：\nshell: fish(开箱即用的强大shell) network: iw dialog wpa_supplicant dhcp(保证进入新系统有网) editor: vim(个人非常喜欢的编辑器，更改sudoer会强制使用) tools: htop sudo screenfetch(强大的进程管理器、提权工具、基础信息查看) 这样的话进入新系统会节省一部分时间。\n新系统下的更改 用户 由于我是重新安装系统，因此/home还在，因此没必要按照常规的在新建用户时候添加-m选项：\n1 useradd username 1 passwd username 这样的话就完成了用户建立（并且使用旧的/home）。\n网络 因为之前配置完了大部分的内容，因此进入系统的第二件事是先联网。这里使用的是netctl,稍后再更换为NetworkManager。\n因为是wifi链接，所以执行：\n1 wifi-menu 然后连接到自己需要的网络。由于个人的路由器是限制设备ip的，因此需要在设备上填入固定IP才能正常联网。虽然上一步执行后失败，但是此时netctl已经有了需要的配置文件。形如：\n1 2 3 4 5 6 7 8 9 10 11 # /etc/netctl/wlp2s0-wifi ------------------------------------------------------------------------------------------------ Description=\u0026#39;Automatically generated profile by wifi-menu\u0026#39; Interface=wlp2s0 Connection=wireless Security=wpa ESSID= #WiFi名称 IP=static Address=() #指定的IP Gateway= #网关，不知道怎么确定的就填写192.168.1.0一般没问题 Key= #密码 当然这个是修改过的，然后执行：\n1 netctl start wlp2s0-wifi 来连接到这个Wifi，并使用：\n1 netctl status wlp2s0-wifi 查看连接状况。\n这样的话应该是有网络了。\n包管理 按照个人喜好，我比较习惯把包管理的颜色打开，便于区分包。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # /etc/pacman.conf ----------------------------------------------------------------------------------- # Misc options部分 #UseSyslog Color #取消注释 #TotalDownload CheckSpace VerbosePkgLists #取消注释，更新时可看到变动信息 # 32位的东西有时候不可避免，为了不必要的麻烦需要打开 [multilib] Include = /etc/pacman.d/mirrorlist # 添加ArchlinuxCN仓库 [archlinuxcn] SigLevel = TrustedOnly Server = http://mirrors.cqu.edu.cn/archlinuxcn/$arch 之后需要执行：\n1 2 pacman -Syy #更新本地包管理的数据库 pacman -S archlinuxcn-keyring #添加archlinuxCN的签名，主要是为了安全，大概 桌面环境安装 一般来讲选KDE还是选gnome这个确实看眼缘。由于gnome上个版本的内存泄露太邪门了，虽然目前已经修好但是我还是用KDE吧。\n安装KDE的话一般可能会推荐安装整个Plasma套件，但是好多东西其实用不到，因此也没必要装。我还是决定从最基础的plasma desktop 开始像搭积木一样配置好。\n先安装最基础的桌面环境：\n1 pacman -S plasma-desktop 然后我们装一下驱动，我是intel核显加上A卡独显，不怎么麻烦，并且A卡先不打算用，入门级性能弱的要死也没办法用：\n1 pacman -S xf86-video-intel 一般这样的话 I 卡就可以正常工作了。然后安装桌面管理器SDDM：\n1 2 pacman -S sddm systemctl enable sddm #添加sddm开机启动 因为我们进入桌面环境以后还需要进行配置，因此终端以及文件管理器是必须的：\n1 pacman -S konsole dolphin 然后重启进入KDE。\n剩余桌面环境配置 进入桌面环境以后就都属于比较常规的配置了，依照个人喜好进行配置就好。\n仍然是系统组件部分 一般来讲的话我们的桌面目前已经可以使用了，但是为了一些更加方便的调整我们需要安装一些KDE设置中心的插件。\n1 pacman -Ss kcm 不出意外的话应该得到如下结果：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 extra/kcmutils 5.60.0-1 (kf5) Utilities for interacting with KCModules extra/sddm-kcm 5.16.3-1 (plasma) KDE Config Module for SDDM extra/telepathy-kde-accounts-kcm 19.04.3-1 (kde-applications kdenetwork telepathy-kde) KCM Module for configuring Telepathy Instant Messaging Accounts community/kcm-fcitx 0.5.5-2 KDE Config Module for Fcitx community/kcm-wacomtablet 1:3.1.1-1 KDE GUI for the Wacom Linux Drivers archlinuxcn/kcm-colorful-git 1.0.1.r0.g2cb0524-1 Make your KDE plasma colorful archlinuxcn/kcm-fcitx5-git r240.62e087f-2 KDE Config Module for Fcitx5 archlinuxcn/nx-firewall-git 0.1.r70.gdf134bd-1 Firewall KCM: Plasma 5 Firewall KCM. archlinuxcn/systemd-kcm 1.2.1-4 Systemd control module for KDE 挑选我们喜欢的组件安装即可。\n另外，由于对于显示部分以及触控板都有额外组件可以用，参照ArchLinux的wiki来一个个安装就可以了，比如相当常用的两个：\n1 kscreen libinput 这部分完全是各取所需，另外比如axel等命令行工具也是可以根据需求安装的。\n美化部分",
    "permalink": "https://blog.weearc.top/posts/12422/",
    "section": "Archives",
    "tags": [
      "archlinux",
      "linux",
      "完全配置"
    ],
    "title": "archlinux安装配置(3)"
  },
  {
    "categories": [
      "实用工具"
    ],
    "contents": "前言 谁又说不可以呢？\n引言 一般论文写作等会有如下痛点，包含：\n数学公式 图片处理 交叉引用、脚注、尾注 参考文献的文献库处理 当然大名鼎鼎的Microsoft Office当然能处理这些问题，但是与其说是能处理，不如说是处理的不当就会变得麻烦起来。在这些方面处理的最好的应该是LaTeX，但是由于其语法学习曲线非常陡峭，那么支持部分LaTeX特性的Markdown将是比较好的选择，处理得当时将包含如下特性：\n基于自然语言的数学公式处理 HTML支持，意味着markdown的写作可以很灵活多变 插件扩展的的流程图、甘特图、美人鱼图支持 交叉引用、脚注、尾注、文献自动插入 目录自动生成 那么本文将简要的介绍下如何使用markdown来进行基本的写作。\n注：本文内容相对较多，但是请相信看完之后收获会是巨大的。\n相关概念 Markdown Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如LaTeX，Docbook。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如Pandoc；要么基于网站，如GitHub和Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。1[@noauthor_markdown__nodate]\n看到这里很懵是不是？但是如果换种说法：DOC格式和markdown本是同根生，是不是就容易多了？DOC所有关键信息等均使用XML格式，而这个格式和markdown其实本质类似。区别是：\n（图片）\n哪个易读性更好一看便知。用markdown你能做什么？\n记笔记 写网页 其他 markdown编辑器推荐 Typora（全平台） 所见即所得，只有用过的才知道多好用。功能最全。但是不能进行扩展。其实已有的功能已经非常够用了。\nMu（Mac OS） 同样所见即所得，但是功能性比Typora弱。\nAtom 或者 Visual Studio Code（全平台） 伪装成IDE的文本编辑器，一般程序员以及编程爱好者无人不知，有巨量的插件扩展。能玩游戏看B站听歌聊QQ微信微博。摸鱼神器。\npandoc Pandoc是由John MacFarlane开发的标记语言转换工具，可实现不同标记语言间的格式转换，堪称该领域中的“瑞士军刀”。Pandoc使用Haskell语言编写，以命令行形式实现与用户的交互，可支持多种操作系统。2[@noauthor_pandoc_2017]\n那么它能处理的格式到底有多少种：\n（图片）\n图片上一个节点代表它能处理的一种格式。\n富文本 富文本格式（Rich Text Format, 一般简称为RTF）是由微软公司开发的跨平台文档格式。一般的格式设置，比如字体和段落设置，页面设置等等信息都可以存在RTF格式中。3[@noauthor___nodate]\n这是狭义上的富文本，那么广义上的富文本是什么呢？就是所谓的当你编辑时所见即所得。没有谁希望编辑一个文件时还需要像二十年前一样还需要修修改源代码的吧？因此富文本及富文本编辑器的发明是非常重要的革新。但是这是不是意味着纯文本会消失呢？并不。富文本有着富文本的易用，纯文本有着纯文本的轻便。至少来讲，我可不希望在写作前写作后还需要花费大量时间插入参考资料或者调整文本的排版字体大小还是怎样。尤其在写作中如果遇到需要处理的图片，大部分人应该是相当头痛的\u0026mdash;\u0026mdash;既需要照顾排版又不不希望切断思路。那么对于大多数只用到了Microsoft Office Word以及OneNote基础功能的人来说无论使用什么来编辑文档其实都差不了多少。\n语法 Markdown基础 请不要把markdown视为非常可怕的东西。其实它非常容易掌握，而且对于使用者很友好\u0026mdash;\u0026mdash;因为你在写作时的思路不会被打断，所有格式使用的语法非常简洁并全部可以通过一些文本实现。\n在使用之前，为了方便书写请确保你的输入法是处于半角状态（搜狗上是月牙和圆点，月牙为半角；微软拼音在设置里调整），使用半角输入会将你的输入速度无论是在是用什么都会提高一个等级。\n标题类 Markdown的标题很容易表示：\n1 2 3 # 这是一级标题 ## 这时二级标题 ### 这是三级标题 每多一级标题就可以增加一个“#”。具体支持到哪级目录需要看渲染工具的支持，理论上无限。\n注意：为了使格式生效请在“#”后记得加个空格\n标注类 文本上的标注 1 2 3 4 *斜体*\t**加粗** ***加粗的斜体*** \u0026lt;u\u0026gt;下划线\u0026lt;/u\u0026gt; 当然你也可以使用下划线替换“*”，效果是一样的。\n文内引用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 代码： ​```你的代码语言 echo helloworld; ​``` 脚注： 这是一段实例文字。[^1] [^1]: 这是实例文字的脚注，在生成的Word文档中会自动放置 尾注： 这是一段实例文字。[@example P33 Weearc] Reference: (自动生成，不需要动它) 下标： ~下标~ 段落引用： \u0026gt; 你要引用的段落 说明：引用完成时请多加一个回车（换行符），引用时尖括号后需要空格 以上是Markdown的基础语法部分，和普通六级专八词汇相比应该是简单的不是一星半点吧。\n链接类 图片 1 ![图片的说明](图片位置) 链接 1 ![链接的说明文字](链接) markdown进阶 表格类 基本表格（不含单元格合并） 基本的一个三乘三表格\n1 2 3 4 |title1|title2|title3| |:-----|:----:|-----:| |左侧对齐|居中|右侧对齐| |x|y|z| 生成效果如下：\ntitle1 title2 title3 左侧对齐 居中 右侧对齐 x y z HTML表格（包含单元格合并的） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;列一\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;列二\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;合并行\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;列一\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;列二\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td rowspan=\u0026#34;2\u0026#34;\u0026gt;合并列\u0026lt;/td\u0026gt; \u0026lt;td \u0026gt;行二列二\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td \u0026gt;行三列二\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 效果：\n列一 列二 合并行 列一 列二 合并列 行二列二 行三列二 公式类 此节主要包含数学公式，使用LaTeX数学公式语法。\n上标 1 2 3 $ x^n $ 生成为：$x^n$\n下标 1 2 3 $ C^2_3 $ 选择数： $C^2_3$\n多项式 一个不包含tag的多项式\n1 2 3 4 5 6 $ T(n)=\\begin{cases} \\Theta(1)\\quad n=1\\\\ T(n-q)+\\Theta(n) \\quad n\u0026gt;1 \\end{cases} $ 那么生成的公式如下：\n$T(n)=\\begin{cases} \\Theta(1)\\quad n=1\\ T(n-q)+\\Theta(n) \\quad n\u0026gt;1 \\end{cases}$\n矩阵及行列式 一个包含tag的矩阵[@noauthor_markdown_nodate-1]\n1 2 3 4 5 6 7 $ \\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 3 \\\\ 4 \u0026amp; 5 \u0026amp; 6 \\\\ 7 \u0026amp; 8 \u0026amp; 9 \\end{bmatrix} \\tag{1} $ $$ \\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 3 \\ 4 \u0026amp; 5 \u0026amp; 6 \\ 7 \u0026amp; 8 \u0026amp; 9 \\ \\end{bmatrix} \\tag{1} $$\n公式 1 2 3 $ J(\\theta) = \\frac{1}{2m}\\sum_{i=0}^m(y^i - h_\\theta(x^i))^2 $ 生成的均方差公式为：\n$J(\\theta) = \\frac{1}{2m}\\sum_{i=0}^m(y^i - h_\\theta(x^i))^2$\n还有很多\u0026hellip; LaTeX的数学公式异常灵活，其余语法可以自行查阅。\n信息类 YAML样式的信息 1 2 3 4 5 --- title: 这是一个标题 time: 2019 TOC: true --- 那么将生成自动目录以及包含时间信息的文章标题部分。\nXML样式信息 如果你更熟悉XML，直接上吧骚年！\n导图类 使用markdown可以通过公式方式扩展来写流程图等。[@noauthor_typora__nodate]\n甘特图(时序图) 1 2 3 4 5 6 7 8 9 10 11 12 13 ​```mermaid sequenceDiagram participant 张三 participant 李四 张三-\u0026gt;王五: 王五你好吗？ loop 健康检查 王五-\u0026gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 \u0026lt;br/\u0026gt;看医生... 李四--\u0026gt;\u0026gt;张三: 很好! 王五-\u0026gt;李四: 你怎么样? 李四--\u0026gt;王五: 很好! ​``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 %% 时序图例子,-\u0026gt; 直线，--\u0026gt;虚线，-\u0026gt;\u0026gt;实线箭头 sequenceDiagram participant 张三 participant 李四 张三-\u0026gt;王五: 王五你好吗？ loop 健康检查 王五-\u0026gt;王五: 与疾病战斗 end Note right of 王五: 合理 食物 \u0026lt;br/\u0026gt;看医生... 李四--\u0026gt;\u0026gt;张三: 很好! 王五-\u0026gt;李四: 你怎么样? 李四--\u0026gt;王五: 很好! 美人鱼图 一个示例的美人鱼图：\n1 2 3 4 5 6 7 8 9 ​```mermaid graph TD client1--\u0026gt;|read / write|SVN((SVN server)) client2--\u0026gt;|read only|SVN client3--\u0026gt;|read / write|SVN client4--\u0026gt;|read only|SVN client5(...)--\u0026gt;SVN SVN---|store the data|sharedrive ​``` 1 2 3 4 5 6 7 graph TD client1--\u0026gt;|read / write|SVN((SVN server)) client2--\u0026gt;|read only|SVN client3--\u0026gt;|read / write|SVN client4--\u0026gt;|read only|SVN client5(...)--\u0026gt;SVN SVN---|store the data|sharedrive 此处参考\n与文献管理工具互动 为什么不推荐使用word自带的文献管理器，因为Zotero以及Mandelay等文献管理器更加强大而且易用，包含比如PDF阅读、文献检索、文献关联设置、关键词等。\n这里只对zotero文献管理器与markdown论文撰写的互动进行说明。\nZotero 首先到Zotero官网下载软件本体进行安装，然后按照提示安装浏览器插件。使用如下图：\n（gif）\n之后你可以在Zotero导出参考文献。导出时请选择Bibtex格式。需要生成参考文献时直接将导出的文件用文本编辑器打开并进行如下操作：\n1 2 3 4 5 #一个实例的bib文件内容 @misc{noauthor_britains_nodate, title = {Britain’s imperial fantasies have given us {Brexit} {\\textbar} {Gary} {Younge} {\\textbar} {Opinion} {\\textbar} {The} {Guardian}}, url = {https://www.theguardian.com/commentisfree/2018/feb/03/imperial-fantasies-brexit-theresa-may}, urldate = {2019-04-29} 1 这里引用了参考[@noauthor_britains_nodate] 即将包含“@misc”行行首大括号后内容前加“@”用中括号“[]”包裹放在需要引用的位置。生成文件时会自动在文末添加参考文献。[@noauthor_markdown_nodate]\n使用pandoc生成（最后一步了） pandoc安装 Windows Windows用户可以再官网下载EXE文件进行安装，并安装Python3使用pip安装pandoc的其他扩展。\nMac OS Mac用户可以使用brew来安装pandoc，并使用pip来添加扩展\nLinux 重点说一下Linux，以证明使用Linux同样可以撰写论文。\n大多数Linux发行版的仓库内包含pandoc，并默认有pip。使用pip可安装扩展。\n对于Arch Linux Arch Linux仓库中为pandoc以及LaTeX全部扩展进行了打包，直接安装，舒适便捷。\n生成方式 在此文中，我们需要使用的插件为：pandoc-citeproc。\n那么使用如下指令生成：\n1 pandoc --filter pandoc-citeproc --bibliography=你的文献库.bib --csl=chinese-gb7714-2005-numeric.csl 你的markdown文件.md -o 你的生成文件.docx 其中“\u0026ndash;csl”选项为需要生成参考文献的具体格式标准。\n如果你单单只使用：\n1 pandoc markdown文件.md -o 生成的文件 将只进行最基础的文件渲染，比如转换为PDF格式。\n参考文献（示例） https://baike.baidu.com/item/markdown/3245829?fr=aladdin markdown\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://zh.wikipedia.org/wiki/Pandoc Pandoc\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nhttps://baike.baidu.com/item/%E5%AF%8C%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/1017816?fr=aladdin 富文本格式\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n",
    "permalink": "https://blog.weearc.top/posts/1448/",
    "section": "Archives",
    "tags": [
      "markdown",
      "pandoc",
      "zotero"
    ],
    "title": "使用pandoc撰写论文"
  },
  {
    "categories": [
      "hexo"
    ],
    "contents": "老实说，其实为什么突然又开始折腾折腾主题了呢\u0026hellip;\u0026hellip;.因为用NexT的人实在太多了。而我又不想让别人打开发现“和某个某个人的很像”。那样就失去了折腾的必要。因此我决定切换主题。另：本文在调整的相对安逸之前会持续更新。\n这个目标主题Maupassant，也是早就看上的，但是考虑到next实在太方便了才没能有勇气换过去。直到最近假期才敢小小的折腾一下。在这里感谢一下将这个主题移植到hexo博客系统的大大。如果有机会的话我要尝试把它移植到HUGO上看看。稍微小小的看了一下，虽然用的人很多。但是因为结构不算复杂，而且pug格式也方便和纯HTML进行转换，因此可以随时随地添加自己喜欢的插件，把博客改造成自己中意的样子。接下来尽可能简单的并详细的介绍下改造以及部署流程。\n主体部分 hexo部署 这个我想既然会看这篇文章的话至少说明回去读hexo的文档吧！但是以防万一还是从基础开始。\n首先配置好nodejs环境，这个绝对不会再写了，无论是哪个平台教程都多得很。\n1 $ yarn add hexo-cli 这样就部署完成了hexo本体。像我一样做过系统迁移的人，可能需要直接在博客工程文件文件夹内执行：\n1 $ npm install 然后参考文档建立初始站点，此时应该是使用了landscape主题。那么接下来填写好hexo的_config.yml相关内容。这部分的各个参数请直接参考hexo官方介绍。因为几乎都是自然语言，因此并不难处理。\nMaupassant主题部署 和大多数hexo引擎的主题采用swig格式的模版不同，Maupassant使用的是pug格式的模版，这个之前也说过了。这种格式并没有比起原生HTML来的更有什么优势。但是可以单独罗列各个部分组件可以更方便的互相拼凑。\n按照README，执行一下命令进行部署（我权当此时你仍在工程文件的根目录下）：\n1 2 3 $ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant $ yarn add hexo-renderer-pug $ yarn add hexo-renderer-sass 此时hexo应该有能力渲染pug模版的页面了。\n接下来仍然是根据自己需求修改_config.yml文件。这部分也没什么好说的。\n开始魔改 为什么说是魔改，因为都是只涉及到前端所需要的代码，相对容易修改和调试，只要稍花点心思就可以调整成自己想要的样子。\n修改永久链接\u0026amp;添加评论 首先是修改评论系统。之前已知使用Disqus!作为评论系统的，但是由于众所周知的原因，这货并没想象的那么棒，那么需要一个相对折中的方案。最开始想选择更为流行的Gitment，但是作者服务器到期了，因此更换为GitTalk。如果只是简单的添加评论系统的话并不能称得上是魔改。如果各位仔细观察的话会发现hexo的文章链接形式都是时间+文章名，这样就难免出现比如中文标题的文章不能初始化评论的问题。\n因此这时候需要用到这款插件：hexo-abbrlink。主要作用是将原本非常长的文章链接修改成比较短的、数字加字母的随机生成的链接。\n执行：\n1 $ yarn add hexo-abbrlink 添加该插件。然后修改站点的_config.yml：\n添加内容：\n1 2 3 4 #abbrlink abbrink: alg: crc32 rep: dec 并修改永久链接样式：\n1 permalink: posts/:abbrlink.html 这时候重新生成饮下会发现所有文章链接变成了相对短的链接。而且这款插件会在生成新post时候自动添加选项。非常方便。如果不放心的话可以修改post模版文件。\n修改文章文件名 为什么要单列出来这个，因为我们有了addrlink这个好东西。但是无论是用什么来管理文章的话，如果全部是带有下划线或者短杠的文件名的话并不利于管理。因此修改站点配置文件_config.yml：\n1 new_post_name: :year-:month-:day-:title.md # File name of new posts 添加进度条效果 这个其实应该是不算难的。因为只涉及到修改CSS部分以及引入pace.js。\n注：以下全部都涉及到主题模版的修改，请全部在主题文件夹进行\n修改head.pug：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //- 插入进度条 script(src=\u0026#39;//cdn.bootcss.com/pace/1.0.2/pace.min.js\u0026#39;) link(href=\u0026#39;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\u0026#39;, rel=\u0026#39;stylesheet\u0026#39;) style. .pace .pace-progress { background: #1abc9c; height: 3px; } .pace .pace-progress-inner { box-shadow: 0 0 10px #1abc9c, 0 0 5px #1abc9c; } .pace .pace-activity { border-top-color: #1abc9c; border-left-color: #1abc9c; } //- 插入进度掉end 如果实在是无法手写pug的话可以先考虑写成HTML再用转换工具进行转换。\n添加点击的烟花效果 同样修改head.pug，添加如下行：\n1 2 3 4 5 6 //- 烟花点击效果 if theme.fireworks canvas.fireworks(style=\u0026#39;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;\u0026#39;) script(type=\u0026#39;text/javascript\u0026#39;, src=\u0026#39;//cdn.bootcss.com/animejs/2.2.0/anime.min.js\u0026#39;) script(type=\u0026#39;text/javascript\u0026#39;, src=\u0026#39;/js/fireworks.js\u0026#39;) //- 烟花点击效果end 在source/js/下添加fireworks.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 \u0026#34;use strict\u0026#34;; function updateCoords(e) { pointerX = (e.clientX || e.touches[0].clientX) - canvasEl.getBoundingClientRect().left, pointerY = e.clientY || e.touches[0].clientY - canvasEl.getBoundingClientRect().top } function setParticuleDirection(e) { var t = anime.random(0, 360) * Math.PI / 180, a = anime.random(50, 180), n = [-1, 1][anime.random(0, 1)] * a; return { x: e.x + n * Math.cos(t), y: e.y + n * Math.sin(t) } } function createParticule(e, t) { var a = {}; return a.x = e, a.y = t, a.color = colors[anime.random(0, colors.length - 1)], a.radius = anime.random(16, 32), a.endPos = setParticuleDirection(a), a.draw = function() { ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.fillStyle = a.color, ctx.fill() }, a } function createCircle(e, t) { var a = {}; return a.x = e, a.y = t, a.color = \u0026#34;#F00\u0026#34;, a.radius = 0.1, a.alpha = 0.5, a.lineWidth = 6, a.draw = function() { ctx.globalAlpha = a.alpha, ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.lineWidth = a.lineWidth, ctx.strokeStyle = a.color, ctx.stroke(), ctx.globalAlpha = 1 }, a } function renderParticule(e) { for (var t = 0; t \u0026lt; e.animatables.length; t++) { e.animatables[t].target.draw() } } function animateParticules(e, t) { for (var a = createCircle(e, t), n = [], i = 0; i \u0026lt; numberOfParticules; i++) { n.push(createParticule(e, t)) } anime.timeline().add({ targets: n, x: function(e) { return e.endPos.x }, y: function(e) { return e.endPos.y }, radius: 0.1, duration: anime.random(1200, 1800), easing: \u0026#34;easeOutExpo\u0026#34;, update: renderParticule }).add({ targets: a, radius: anime.random(80, 160), lineWidth: 0, alpha: { value: 0, easing: \u0026#34;linear\u0026#34;, duration: anime.random(600, 800) }, duration: anime.random(1200, 1800), easing: \u0026#34;easeOutExpo\u0026#34;, update: renderParticule, offset: 0 }) } function debounce(e, t) { var a; return function() { var n = this, i = arguments; clearTimeout(a), a = setTimeout(function() { e.apply(n, i) }, t) } } var canvasEl = document.querySelector(\u0026#34;.fireworks\u0026#34;); if (canvasEl) { var ctx = canvasEl.getContext(\u0026#34;2d\u0026#34;), numberOfParticules = 30, pointerX = 0, pointerY = 0, tap = \u0026#34;mousedown\u0026#34;, colors = [\u0026#34;#FF1461\u0026#34;, \u0026#34;#18FF92\u0026#34;, \u0026#34;#5A87FF\u0026#34;, \u0026#34;#FBF38C\u0026#34;], setCanvasSize = debounce(function() { canvasEl.width = 2 * window.innerWidth, canvasEl.height = 2 * window.innerHeight, canvasEl.style.width = window.innerWidth + \u0026#34;px\u0026#34;, canvasEl.style.height = window.innerHeight + \u0026#34;px\u0026#34;, canvasEl.getContext(\u0026#34;2d\u0026#34;).scale(2, 2) }, 500), render = anime({ duration: 1 / 0, update: function() { ctx.clearRect(0, 0, canvasEl.width, canvasEl.height) } }); document.addEventListener(tap, function(e) { \u0026#34;sidebar\u0026#34; !== e.target.id \u0026amp;\u0026amp; \u0026#34;toggle-sidebar\u0026#34; !== e.target.id \u0026amp;\u0026amp; \u0026#34;A\u0026#34; !== e.target.nodeName \u0026amp;\u0026amp; \u0026#34;IMG\u0026#34; !== e.target.nodeName \u0026amp;\u0026amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY)) }, !1), setCanvasSize(), window.addEventListener(\u0026#34;resize\u0026#34;, setCanvasSize, !1) } \u0026#34;use strict\u0026#34;; function updateCoords(e) { pointerX = (e.clientX || e.touches[0].clientX) - canvasEl.getBoundingClientRect().left, pointerY = e.clientY || e.touches[0].clientY - canvasEl.getBoundingClientRect().top } function setParticuleDirection(e) { var t = anime.random(0, 360) * Math.PI / 180, a = anime.random(50, 180), n = [-1, 1][anime.random(0, 1)] * a; return { x: e.x + n * Math.cos(t), y: e.y + n * Math.sin(t) } } function createParticule(e, t) { var a = {}; return a.x = e, a.y = t, a.color = colors[anime.random(0, colors.length - 1)], a.radius = anime.random(16, 32), a.endPos = setParticuleDirection(a), a.draw = function() { ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.fillStyle = a.color, ctx.fill() }, a } function createCircle(e, t) { var a = {}; return a.x = e, a.y = t, a.color = \u0026#34;#F00\u0026#34;, a.radius = 0.1, a.alpha = 0.5, a.lineWidth = 6, a.draw = function() { ctx.globalAlpha = a.alpha, ctx.beginPath(), ctx.arc(a.x, a.y, a.radius, 0, 2 * Math.PI, !0), ctx.lineWidth = a.lineWidth, ctx.strokeStyle = a.color, ctx.stroke(), ctx.globalAlpha = 1 }, a } function renderParticule(e) { for (var t = 0; t \u0026lt; e.animatables.length; t++) { e.animatables[t].target.draw() } } function animateParticules(e, t) { for (var a = createCircle(e, t), n = [], i = 0; i \u0026lt; numberOfParticules; i++) { n.push(createParticule(e, t)) } anime.timeline().add({ targets: n, x: function(e) { return e.endPos.x }, y: function(e) { return e.endPos.y }, radius: 0.1, duration: anime.random(1200, 1800), easing: \u0026#34;easeOutExpo\u0026#34;, update: renderParticule }).add({ targets: a, radius: anime.random(80, 160), lineWidth: 0, alpha: { value: 0, easing: \u0026#34;linear\u0026#34;, duration: anime.random(600, 800) }, duration: anime.random(1200, 1800), easing: \u0026#34;easeOutExpo\u0026#34;, update: renderParticule, offset: 0 }) } function debounce(e, t) { var a; return function() { var n = this, i = arguments; clearTimeout(a), a = setTimeout(function() { e.apply(n, i) }, t) } } var canvasEl = document.querySelector(\u0026#34;.fireworks\u0026#34;); if (canvasEl) { var ctx = canvasEl.getContext(\u0026#34;2d\u0026#34;), numberOfParticules = 30, pointerX = 0, pointerY = 0, tap = \u0026#34;mousedown\u0026#34;, colors = [\u0026#34;#FF1461\u0026#34;, \u0026#34;#18FF92\u0026#34;, \u0026#34;#5A87FF\u0026#34;, \u0026#34;#FBF38C\u0026#34;], setCanvasSize = debounce(function() { canvasEl.width = 2 * window.innerWidth, canvasEl.height = 2 * window.innerHeight, canvasEl.style.width = window.innerWidth + \u0026#34;px\u0026#34;, canvasEl.style.height = window.innerHeight + \u0026#34;px\u0026#34;, canvasEl.getContext(\u0026#34;2d\u0026#34;).scale(2, 2) }, 500), render = anime({ duration: 1 / 0, update: function() { ctx.clearRect(0, 0, canvasEl.width, canvasEl.height) } }); document.addEventListener(tap, function(e) { \u0026#34;sidebar\u0026#34; !== e.target.id \u0026amp;\u0026amp; \u0026#34;toggle-sidebar\u0026#34; !== e.target.id \u0026amp;\u0026amp; \u0026#34;A\u0026#34; !== e.target.nodeName \u0026amp;\u0026amp; \u0026#34;IMG\u0026#34; !== e.target.nodeName \u0026amp;\u0026amp; (render.play(), updateCoords(e), animateParticules(pointerX, pointerY)) }, !1), setCanvasSize(), window.addEventListener(\u0026#34;resize\u0026#34;, setCanvasSize, !1) }; 这个部分可以自己按照洗好做一定的修改，会有不一样的效果。\n添加不蒜子站点浏览数 修改footer.pug，并添加如下行：\n1 2 3 4 5 6 7 8 9 10 11 script(async=\u0026#39;\u0026#39;, src=\u0026#39;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#39;) span#busuanzi_container_site_pv i.fa.fa-eye | 访问量 span#busuanzi_value_site_pv | 次 | span#busuanzi_container_site_uv i.fa.fa-user-md | 访客数 span#busuanzi_value_site_uv | 人 1 hello world 由于pug对空格敏感，因此空格多少可以相对容易的调整。\n添加clipboard.js (待完成)\n",
    "permalink": "https://blog.weearc.top/posts/6009/",
    "section": "Archives",
    "tags": [
      "hexo"
    ],
    "title": "hexo主题迁移and折腾记"
  },
  {
    "categories": [
      "archlinux"
    ],
    "contents": "新的一年，热爱折腾的我当然是从折腾开始新的一年了\u0026hellip;.\n在经过了各位arch大佬和Gentoo大佬一年的洗礼\u0026hellip;我终于决定从Manjaro切换到Arch Linux了（没十足的把握千万别学我，Manjaro其实是个非常好的发行版，其实我也没啥把握就是了\u0026hellip;.）。\n准备迁移过程中考虑了两个问题：\n我那快1800个软件包要怎么办 最初选择manjaro，主要是看中了manjaro对于内核切换的便利，以及方便的附加驱动的安装 有关第一个问题，可以通过备份一遍软件列表来解决，但是有关问题二，就要比较头痛了，习惯了方便的一键切换再反过来熟悉一下这种方式未免有点“仿古”的感觉\u0026hellip;\n那么正常来做迁移，首先需要备份一下软件列表，根据archwiki，我们需要用pacman导出一份列表，这里注意一下arch和manjaro的关系：manjaro的源，可以理解为大于arch的，也就是说对于arch的仓库，manjaro的一众自己的工具等都是“多余的”，但是介于我从aur也安了一部分包来看，aur和自己打包安装的那部分也要考虑进去。\n因此在原有系统中执行：\n1 2 3 4 #Qqen选项备份的是除了aur和自己打包安装的以外的包 pacman -Qqen \u0026gt; listQqen.txt #Qqem选项备份的是aur中的和自己打包安装的包，可以理解为Qqen的补集 pacman -Qqem \u0026gt; listQqem.txt 这两个列表保存在主目录就好，之后会用到。\n然后还是基础系统的安装，直接base和base-devel两个包组外加iw、wpa_supplicant两个包解决，然后走一遍常规的过程。\n这个时候我们再考虑一下，对于manjaro是在源里的软件，对于arch应该是如同aur里的，因为我也使用了相当多archcn的包，因此记得添加archcn源。\n然后执行：\n1 2 3 4 #获取arch中的存在的包 pacman -S --needed $(comm -12 \u0026lt;(pacman -Slq | sort) \u0026lt;(sort listQqen.txt)) #获取aur里的包 yaourt -S --needed $(comm -12 \u0026lt;(pacman -Slq | sort) \u0026lt;(sort Qqem.txt)) 这时候剩下的包就是manjaro专有的了，如果你愿意的话也可以和我一样直接clone manjaro的那些包的源代码然后自己编译安装，这之后记得把相关的服务启动了，然后就大功告成了。重启一下看看是不是熟悉的界面又回来了。\n后记：\n貌似很多用arch的用户还在有着对manjaro的鄙视链啊\u0026hellip;..但是有一点不得不说，就是该承认的非常用户友好的特性还是承认吧，都是linux用户互怼没啥好处。\n",
    "permalink": "https://blog.weearc.top/posts/30549/",
    "section": "Archives",
    "tags": [
      "archlinux",
      "linux"
    ],
    "title": "新年折腾记---从Manjaro迁移到Arch"
  },
  {
    "categories": [
      "杂记"
    ],
    "contents": "春节第一篇2333，顺便还是要吐槽一下，rime真心难调教，实在是太难受了，换回搜狗了。\n第一篇按照习惯我也不会谈技术反正就我那点知识也没有什么好拿出来讲的。因此今天还是打算随意写一写，毕竟写的开心就完事了。\n然后呢\u0026hellip;不知道大家有没有接到过类似的短信：\n温馨提示:为守护三亚的蓝天白云，三亚全市严禁露天焚烧秸杆垃圾，三亚主城区及学校、医院、住宅小区等重点区域严禁燃放烟花爆竹，主城区公共场所严禁露天烧烤和祭祀烧纸，寺庙道观严禁燃烧高香。违者将予以处罚。请自觉遵守，共建生态文明三亚。\u0026mdash;三亚市人民政府\n嘛，倒是一下子透露了我过年的地点，不过呢，倒是也接到重庆市政府类似的短信。保护环境嘛，没办法的事。可是仔细想一想，好像没像小时候那样过年有些时日了。\n回想小时候，每年必定是过年的前几天开始，采买、打扫、准备过年需要用到的一些小玩意儿这些一样没少过。也在过年前几天把家里的窗帘全部卸下然后清洗，再一个个装回去。也曾学着用五洁粉然后对着白色人造石的窗台一顿猛擦直到全部都变亮变白位置\u0026hellip;\u0026hellip;虽然看着麻烦实际也确实麻烦，但是却是在多少年以后的今天令人感觉还能感受到年味的那些回忆。等到春节当天，中午出门去祖父母家，和兄长姐姐一起玩，去放点小鞭儿，冰天雪地的把自己裹成肉丸子到楼下的大平台上去“作妖儿”，往垃圾道里扔二踢脚什么的也是没少干。回来吃年夜饭，年年都是那几个菜色不变样却也是吃不腻，挺奇怪的。而后回家包饺子，看看电视。\n那个时候赵本山老师还是春晚的红人，小品也不像现在这么尬，动不动就煽情动不动就歌颂。过去春晚创造了不少梗，歌手们也都是真实的实力派，每一样节目都让人觉得不会看腻，就连后半夜的节目都非常有意思。如果现在春晚都为了挽救收视率而接着一些东风并且请一些实力派的歌手也好演员也好回到那个舞台，就算看到那那些熟悉的面孔我也是觉得没有必要再看下去了，尬得要死的东西我为什么不做点自己觉得有意义的事情而非要和春晚死磕呢？\n我确实是相当恋旧，也知道所有东西不可能一成不变，不过还是觉得以前那种有过年气氛的过年只能活在记忆中实在是太可惜了。家里人都分散开了，今年也没能回去看祖母，祖父已经不在人世，很多事情不停地在变。越是想抓住想将那个那些个美好的时光据为己有，越是在发现它在眼前不断地消散的同时感觉心如刀绞。过去已经回不去了，一般都会在这个时间说“应该勇敢的面对未来”吧？但是老实说越是长大就越觉得一些事情不可思议，越觉得害怕面对未来，越想仅仅活在回忆中哪怕知道那些已经是梦，已经不可能在实现了。那么就没有办法了，总不能停下，未规划好的将来也需要考虑\u0026mdash;\u0026mdash;不过不是出于个人意愿，而是出于“对自己负责”的责任。背负了那么多期望以及责任，既然已经背负起来了就不可能轻易地在将那些卸下去。责任就是责任，烙印一般的东西。\n新的一年，愿各位身体健康，家庭和睦，工作顺利，学习进步。如果看完了我这么多牢骚话还没厌烦的话可以期待一下下一篇，不是牢骚也不是随笔，既然是技术博客那么技术类的不能少。新的一年希望自己能把坑填完，开个新坑，把日语复习一下最重要的是挂科的那几科一定要考过，真的不想再重修遭受那个罪了orz。\n",
    "permalink": "https://blog.weearc.top/posts/32312/",
    "section": "Archives",
    "tags": [
      "随笔"
    ],
    "title": "怀念，甚想念，无法想念其一"
  },
  {
    "categories": [
      "博客配套"
    ],
    "contents": "其实还是挺好用的？但是，由于图床挂掉，此文内容基本已废，将就看倒还可以。\n如图所见！锵锵锵，自建了一个新图床。至于为什么这么做，主要还是因为腾讯云更改了收费及免费的条款，并且已有的vps不好好利用的话实在是资源浪费，所以决定自己建立一个算了。\nVPS准备 因为是要用作图库的VPS所以建议还是选择一个靠谱一些的服务商比较好，国内阿里云以及腾讯云都可以（毕竟学生优惠www）。如果可以的话建议选择storge instance之类的类型，特点是价格便宜并且硬盘空间很大。构架建议选择KVM，极度不推荐openVZ的机器。系统选择任意linux发行版都可以，既然都有能力弄主机，就别说连基础linux的操作都不会。\n环境配置 由于我们要使用的图床程序是chevereto ,按照官方文档的说明，使用LNMP是比较合适的。 这里选择LNMP一键包（其实也是我懒了）。LNMP那么容易配置就不细讲述了。主要需要注意的是phpMyAdmin的一些坑。\n这个地方如果未选择相匹配的MySQL版本会导致无法远程连接到phpMyAdmin。因此请在选择版本时多加注意。另外安装完成时记得把/home/wwwroot/default/下的几个文件备份并清除。\n安装chevereto 这里我使用的是脚本安装方式，仍然是将脚本放到网站根目录即可。\n注意：记得检查脚本的所有者以及权限\n1 2 ls -lash chmod a+x index.php 如果正常的话你会得到index.php的所有者和组为www，权限为775或者777。\n所有步骤跟着向导就好，没有需要特殊注意的地方。\n但是有一个地方需要注意以下，在新建mysql账户时请选择本机域（大概是这个，是localhost）这个地方以前在部署owncloud时就踩过，到现在才弄得比较明白。至此站点部署完毕。\n",
    "permalink": "https://blog.weearc.top/posts/61150/",
    "section": "Archives",
    "tags": [
      "archlinux"
    ],
    "title": "搭建私人图床并使用"
  },
  {
    "categories": [
      "archlinux"
    ],
    "contents": "俗话说得好，一回生二回熟，但是时间长了也怕忘。离开了Gentoo那么久也懒得手动编译，但是偶尔也要复习一下为好。\n源码获取 这个应该是最简单的了，只要你能找到个镜像站，里面镜像列表都差不多有GNU，里面有诸多项目的源代码，gcc源码也不例外。怎么获取，请自己看着办。\n展开源码 正常操作\n1 tar xvf gcc6.1.tar.xz 定位到源码目录 1 cd gcc6.1/ 建立编译的工作目录：\n1 makedir build 建立工作目录的好处是可以避免编译过程中的中间文件污染源码（大概）。\n查看编译选项 先简单观察一下Archlinux的gcc编译选项\ngcc 8.2.1\n1 2 3 4 5 6 7 使用内建 specs。 COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-pc-linux-gnu/8.2.1/lto-wrapper 目标：x86_64-pc-linux-gnu 配置为：/build/gcc/src/gcc/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=https://bugs.archlinux.org/ --enable-languages=c,c++,ada,fortran,go,lto,objc,obj-c++ --enable-shared --enable-threads=posix --enable-libmpx --with-system-zlib --with-isl --enable-__cxa_atexit --disable-libunwind-exceptions --enable-clocale=gnu --disable-libstdcxx-pch --disable-libssp --enable-gnu-unique-object --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu --enable-gnu-indirect-function --enable-multilib --disable-werror --enable-checking=release --enable-default-pie --enable-default-ssp --enable-cet=auto 线程模型：posix gcc 版本 8.2.1 20181127 (GCC) gcc 7.4.1\n1 2 3 4 5 6 7 使用内建 specs。 COLLECT_GCC=gcc-7 COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-pc-linux-gnu/7.4.1/lto-wrapper 目标：x86_64-pc-linux-gnu 配置为：/build/gcc7/src/gcc/configure --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=https://bugs.archlinux.org/ --enable-languages=c,c++,lto --enable-shared --enable-threads=posix --enable-libmpx --with-system-zlib --with-isl --enable-__cxa_atexit --disable-libunwind-exceptions --enable-clocale=gnu --disable-libstdcxx-pch --disable-libssp --enable-gnu-unique-object --enable-linker-build-id --enable-lto --enable-plugin --enable-install-libiberty --with-linker-hash-style=gnu --enable-gnu-indirect-function --disable-werror --enable-checking=release --enable-default-pie --enable-default-ssp --program-suffix=-7 --enable-version-specific-runtime-libs 线程模型：posix gcc 版本 7.4.1 20181207 (GCC) 前面部分是：\n1 --prefix=/usr --libdir=/usr/lib --libexecdir=/usr/lib --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=https://bugs.archlinux.org/ 比较有用的部分只有 \u0026ndash;prefix 选项。大致都可以看懂：\n1 --prefix=一级目录 --libdir=二级目录1 --libexecdir=二级目录2 --mandir=二级目录3 --infodir=二级目录4 --with-bugurl=URL 对于已经有了内置GCC的发行版，如果照搬选项则不是明智之举，因此按照个人需求将此处选项改为只定义一级目录即可。\n1 --prefix=$HOME/GCC-6.1 ",
    "permalink": "https://blog.weearc.top/posts/51180/",
    "section": "Archives",
    "tags": [
      "linux",
      "archlinux"
    ],
    "title": "编译安装gcc6.1"
  },
  {
    "categories": [
      "杂谈"
    ],
    "contents": "睡前聊一聊 上次像这样写文章大概是很久以前的事情了，那我为何突然想起来这些？用我自己的话来讲，现在我才一点点感觉到，越是接触新技术、新产品，愈是变得更孤独。当然了，学技术可以当做一个例外，但是，如果可以不与这些新玩意儿接触，从某种角度上讲确实不想接触。\n",
    "permalink": "https://blog.weearc.top/posts/21989/",
    "section": "Archives",
    "tags": [
      "杂谈"
    ],
    "title": "生活好了，但是我想回到以前"
  },
  {
    "categories": [
      "Android"
    ],
    "contents": "课设制作思路非常简单，就是制作一个蓝牙助手\nBluetooth status helper课程设计 设计缘由 众所周知目前安卓机器都可以很简单的获取蓝牙状态。但是由于一些原因我所使用的HTC U Ultra在更新到了Android Oreo以后失去了查看蓝牙状态的功能。因此在本设计中打算借助外部方式实现这个功能\n初步分析 由于在使用Shizuku Manager时以及使用Brevent时发现可以通过扩展开发的方式调用部分系统API，这些API在一定程度上根据厂商的设计方式不同会无法直接调用或是被屏蔽掉。但是HTC在安卓5.0时代已经在系统中大量（完全）保留了原生Android的API，因此只要需要寻找这些接口的调用方式即可使用“被屏蔽”的功能。 在手机实际使用过程中发现缺失的功能如下：\n更改蓝牙可被发现状态 更改蓝牙可被发现状态的时长 (可选)查看的蓝牙列表 编写过程 蓝牙权限的获取 蓝牙权限的获取应该是整个项目最核心的部分。只有实现了能够检测蓝牙开启状态并请求蓝牙权限其余功能才能使用。 在阅读官方文档时发现，在Android Oreo中，想要获取蓝牙权限，应该由四个权限组成： 即两个位置权限，两个蓝牙权限。即：\n1 2 3 4 5 6 7 \u0026lt;!--AndroidManifest.xml--\u0026gt; \u0026lt;!-- 添加蓝牙权限-开始 --\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.BLUETOOTH\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.BLUETOOTH_ADMIN\u0026#34; /\u0026gt;\u0026lt;!--蓝牙权限--\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_FINE_LOCATION\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_COARSE_LOCATION\u0026#34; /\u0026gt;\u0026lt;!--Android位置权限\u0026gt; \u0026lt;!--蓝牙权限添加-结束--\u0026gt; 由于安卓新的安全机制，获取硬件的控制权限一般是视为危险行为（获取的权限为关键权限），因此需要动态调用权限申请以及权限的注册。\n初始化蓝牙权限 这一段直接上代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 setTitle(\u0026#34;蓝牙助手\u0026#34;); { if (savedInstanceState == null ){ bltAdapter = ((BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE)).getAdapter(); //查看设备是否支持蓝牙功能 if (bltAdapter != null ){ //查看蓝牙是否开启 if (bltAdapter.isEnabled()){ //若已经开启蓝牙则弹出一个提示已经开启 String notification = \u0026#34;蓝牙已经开启\u0026#34;; additional_inform=\u0026#34;蓝牙开启\u0026#34;; information=logcat(information,additional_inform); Toast.makeText(MainActivity.this,notification,Toast.LENGTH_SHORT).show(); }else { //若未开启则弹出一个窗口请求开启权限 Intent enablebtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE); startActivityForResult(enablebtIntent, Constants.REQUEST_ENABLE_BT); } }else { //当设备不支持蓝牙功能的时候点击按钮退出程序 AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this); builder.setTitle(\u0026#34;注意\u0026#34;); builder.setMessage(\u0026#34;您的设备很可能不支持蓝牙功能\u0026#34;); builder.setPositiveButton(\u0026#34;确定\u0026#34;, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { finish(); } }); builder.show(); } } } 关键点解释：\n传感器一般是通过相应的Adapter来获取使用权，因此先注册BluetoothAdapter，并且方式为getAdapter()，获取系统的BluetoothService； 判断是否开启了蓝牙，如果未开启立即申请权限； 重写OnActivityResult() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 @Override protected void onActivityResult(int requestCode, int resultCode,Intent data){ super.onActivityResult(requestCode,resultCode, data); switch (requestCode){ case Constants.REQUEST_ENABLE_BT: if (resultCode == RESULT_OK){ additional_inform=\u0026#34;蓝牙开启\u0026#34;; information=logcat(information,additional_inform); AlertDialog.Builder builder_welcome = new AlertDialog.Builder(MainActivity.this); builder_welcome.setTitle(\u0026#34;\u0026#34;); builder_welcome.setMessage(\u0026#34;感谢使用蓝牙助手！\\n 这款工具面向部分ROM没有提供查看蓝牙状态功能的机型\\n 如：HTC，LG\\n 如果您的手机ROM拥有类似功能，您仍可尝试使用。\u0026#34;); builder_welcome.setPositiveButton(\u0026#34;我知道了\u0026#34;, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) {} }); builder_welcome.show(); Toast.makeText(MainActivity.this,\u0026#34;蓝牙已开启\u0026#34;,Toast.LENGTH_SHORT).show(); }else { Toast.makeText(MainActivity.this,\u0026#34;蓝牙助手需要蓝牙权限才可以正常运行\u0026#34;,Toast.LENGTH_SHORT).show(); finish(); } default:super.onActivityResult(requestCode,resultCode,data); } } 这么写或者说这么改写的主要原因是蓝牙部分相当于使用了一个新的activity进行控制。\n与之匹配的contants.java 1 2 3 public class Constants { public static final int REQUEST_ENABLE_BT = 1; } 这一段主要还是根据重写的onActivityResult()设定默认的request Code。\n部分功能模块编写 蓝牙开关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 mswitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (isChecked){ Intent enablebtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE); startActivityForResult(enablebtIntent, Constants.REQUEST_ENABLE_BT); Toast.makeText(MainActivity.this,\u0026#34;蓝牙开启\u0026#34;,Toast.LENGTH_SHORT).show(); additional_inform=\u0026#34;蓝牙开启\u0026#34;; information=logcat(information,additional_inform); } else { bltAdapter.disable(); Toast.makeText(MainActivity.this,\u0026#34;蓝牙关闭\u0026#34;,Toast.LENGTH_SHORT).show(); additional_inform=\u0026#34;蓝牙关闭\u0026#34;; information=logcat(information,additional_inform); } } }); 日志查看 模块主代码 1 2 3 4 5 6 7 8 9 10 11 goTO_log.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent log = new Intent(MainActivity.this,log_watcher.class); Bundle bundle = new Bundle(); bundle.putString(\u0026#34;information\u0026#34;,information); bundle.putString(\u0026#34;time\u0026#34;,time); log.putExtra(\u0026#34;bundle\u0026#34;,bundle); startActivity(log); } }); 查看Activity部分代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.widget.Toast; public class log_watcher extends AppCompatActivity { TextView log; TextView log_time; Button btn; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_log_watcher);{ setTitle(\u0026#34;LOG\u0026#34;); Bundle bundle = getIntent().getBundleExtra(\u0026#34;bundle\u0026#34;); final String[] information = {bundle.getString(\u0026#34;information\u0026#34;)}; final String[] time = {bundle.getString(\u0026#34;time\u0026#34;)}; log = (TextView) this.findViewById(R.id.logcat); log_time = (TextView) this.findViewById(R.id.logcat_time); btn = (Button) this.findViewById(R.id.log_clean); btn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { time[0]=\u0026#34;\\0\u0026#34;; information[0] =\u0026#34;\\0\u0026#34;; log.setText(\u0026#34;\\0\u0026#34;); log_time.setText(\u0026#34;\\0\u0026#34;); Toast.makeText(log_watcher.this,\u0026#34;日志已清除\u0026#34;,Toast.LENGTH_SHORT).show(); } }); log.setText(information[0]); log_time.setText(time[0]); } } } 传递log 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 private String logcat(String information, String additional_inform){ information=information+additional_inform+\u0026#39;\\n\u0026#39;; additional_inform=\u0026#34;\\0\u0026#34;; //log.setText(information); get_log_time(); return information; } private String get_log_time(){ SimpleDateFormat sdf=new SimpleDateFormat(\u0026#34;HH:mm:ss\u0026#34;); java.util.Date date=new java.util.Date(); time=time+\u0026#34;\\n\u0026#34;+sdf.format(date); //log_time.setText(time+\u0026#34;\\n\u0026#34;); return time; } 设定可被发现时间 如果认真研究过蓝牙的文档的话，不难发现蓝牙默认最长可被发现时间为300秒，并且在高版本Android上不能使用旧方法进行时间的延展，另外输入值的“null”以及“0”最终获取值并不相同，因此具体代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 cs_btn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { String _timeout = editText.getText().toString(); if(TextUtils.isEmpty(editText.getText()) ){//判断输入是否为空 Intent dis_intent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE); dis_intent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300); startActivity(dis_intent); Toast.makeText(MainActivity.this,\u0026#34;设备参照默认最大时间:300秒设置可被发现\u0026#34;,Toast.LENGTH_LONG).show(); additional_inform=\u0026#34;设备可被发现，时间\u0026#34;+timeout+\u0026#34;秒\u0026#34;; information=logcat(information,additional_inform); } else { timeout =Integer.parseInt(_timeout); //若输入值不为空，采用安卓本身方法进行广播 if (timeout \u0026lt;= 300 \u0026amp;\u0026amp; timeout != 0){ Intent dis_intent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE); dis_intent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, timeout); startActivity(dis_intent); Toast.makeText(MainActivity.this,\u0026#34;设备目前已经可被发现，时间为\u0026#34;+timeout+\u0026#34;秒\u0026#34;,Toast.LENGTH_LONG).show(); additional_inform=\u0026#34;设备可被发现，时间\u0026#34;+timeout+\u0026#34;秒\u0026#34;; information=logcat(information,additional_inform); } if (timeout \u0026gt; 300){ //若时间长于300秒，采用反射方式调用系统蓝牙可被发现的开关以达到延时目的 setDiscoverableTimeout(timeout); Toast.makeText(MainActivity.this,\u0026#34;设备目前已经可被发现，时间为\u0026#34;+timeout+\u0026#34;秒\u0026#34;,Toast.LENGTH_LONG).show(); additional_inform=\u0026#34;设备可被发现，时间\u0026#34;+timeout+\u0026#34;秒\u0026#34;; information=logcat(information,additional_inform); } if (timeout == 0){ Intent dis_intent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE); dis_intent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 120); startActivity(dis_intent); timeout=120; Toast.makeText(MainActivity.this,\u0026#34;输入值为0。设备目前已经可被发现，默认时间为\u0026#34;+timeout+\u0026#34;秒\u0026#34;,Toast.LENGTH_LONG).show(); additional_inform=\u0026#34;设备可被发现，时间\u0026#34;+timeout+\u0026#34;秒\u0026#34;; information=logcat(information,additional_inform); } } } }); 时间高于300秒时方法重写 1 2 3 4 5 6 7 8 9 10 11 12 13 public void setDiscoverableTimeout(int timeout) { BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter(); try { Method setDiscoverableTimeout = BluetoothAdapter.class.getMethod(\u0026#34;setDiscoverableTimeout\u0026#34;, int.class); setDiscoverableTimeout.setAccessible(true); Method setScanMode =BluetoothAdapter.class.getMethod(\u0026#34;setScanMode\u0026#34;, int.class,int.class); setScanMode.setAccessible(true); setDiscoverableTimeout.invoke(adapter, timeout); setScanMode.invoke(adapter, BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE,timeout); } catch (Exception e) { e.printStackTrace(); } } 另外一定要注意：一定要抛异常，否则编译时会报错\n蓝牙扫描 另外说起蓝牙，应该难点就是在广播及扫描部分，但是由于本人理解并不深刻因此可能会出现问题。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 scan_btn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (bltAdapter.isEnabled()){ bltAdapter.enable(); } if (bltAdapter.isDiscovering()) { bltAdapter.cancelDiscovery(); try { Thread.sleep(1000); } catch (InterruptedException e) {//利用睡眠阻隔系统重启扫描服务，并处理异常 e.printStackTrace(); } bltAdapter.startDiscovery(); }else{ bltAdapter.startDiscovery(); } Toast.makeText(MainActivity.this,\u0026#34;正在进行扫描...\u0026#34;,Toast.LENGTH_SHORT).show(); Intent intent = new Intent(bltAdapter.ACTION_REQUEST_ENABLE); startActivity(intent); //扫描到了任一蓝牙设备 if(BluetoothDevice.ACTION_FOUND.equals(intent.getAction())) { Log.v(TAG, \u0026#34;### BT BluetoothDevice.ACTION_FOUND ##\u0026#34;); BluetoothDevice btDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if(btDevice != null){ Log.v(TAG , \u0026#34;Name : \u0026#34; + btDevice.getName() + \u0026#34; Address: \u0026#34; + btDevice.getAddress()); Toast.makeText(MainActivity.this,\u0026#34;Name:\u0026#34;+btDevice.getName()+\u0026#34;Address:\u0026#34;+btDevice.getAddress(),Toast.LENGTH_LONG).show(); } else if(BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(intent.getAction())) { Log.v(TAG, \u0026#34;### BT ACTION_BOND_STATE_CHANGED ##\u0026#34;); int cur_bond_state = intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); int previous_bond_state = intent.getIntExtra(BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE, BluetoothDevice.BOND_NONE); Log.v(TAG, \u0026#34;### cur_bond_state ##\u0026#34; + cur_bond_state + \u0026#34; ~~ previous_bond_state\u0026#34; + previous_bond_state); } } additional_inform=\u0026#34;设备进行扫描\u0026#34;; information=logcat(information,additional_inform); } }); 取消扫描 1 2 3 4 5 6 7 8 9 10 11 12 13 14 mCancel.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (bltAdapter.isDiscovering()) { bltAdapter.cancelDiscovery(); try { Thread.sleep(1000); } catch (InterruptedException e) {//利用睡眠阻隔系统重启扫描服务，并处理异常 e.printStackTrace(); } } Toast.makeText(MainActivity.this,\u0026#34;已取消\u0026#34;,Toast.LENGTH_SHORT).show(); } }); 双击返回键退出 这一段也是对返回键的执行进行重写：\n1 2 3 4 5 6 7 8 9 10 @Override public void onBackPressed() { long secondTime = System.currentTimeMillis(); if (secondTime - firstTime \u0026gt; 2000) { Toast.makeText(MainActivity.this, \u0026#34;再按一次退出程序\u0026#34;, Toast.LENGTH_SHORT).show(); firstTime = secondTime; } else{ finish(); } } 至于其他部分比如关于，非常简单没必要来说。\nRES部分 这部分最具有说服力应该只有这一段代码，方法是在res部分新建style.xml：\n1 2 3 4 5 6 7 8 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;shape xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; android:shape=\u0026#34;rectangle\u0026#34;\u0026gt; \u0026lt;solid android:color=\u0026#34;#3dafeb\u0026#34;/\u0026gt; \u0026lt;corners android:radius=\u0026#34;150dp\u0026#34;/\u0026gt; \u0026lt;stroke android:width=\u0026#34;5dp\u0026#34; android:dashWidth=\u0026#34;5dp\u0026#34; android:color=\u0026#34;#77d5cf\u0026#34;/\u0026gt; \u0026lt;stroke android:width=\u0026#34;10dp\u0026#34; android:color=\u0026#34;#84ebe5\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; 顺便附上主activity的layout 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;android.support.constraint.ConstraintLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:accessibilityHeading=\u0026#34;true\u0026#34; android:minHeight=\u0026#34;142dp\u0026#34; tools:context=\u0026#34;.MainActivity\u0026#34;\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/changeStatus\u0026#34; android:layout_width=\u0026#34;138dp\u0026#34; android:layout_height=\u0026#34;51dp\u0026#34; android:layout_marginStart=\u0026#34;15dp\u0026#34; android:layout_marginEnd=\u0026#34;8dp\u0026#34; android:layout_marginBottom=\u0026#34;148dp\u0026#34; android:background=\u0026#34;@drawable/round_botton_2\u0026#34; android:text=\u0026#34;change status\u0026#34; app:layout_constraintBottom_toBottomOf=\u0026#34;parent\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintHorizontal_bias=\u0026#34;0.484\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; /\u0026gt; \u0026lt;Switch android:id=\u0026#34;@+id/_switch\u0026#34; android:layout_width=\u0026#34;309dp\u0026#34; android:layout_height=\u0026#34;38dp\u0026#34; android:layout_marginStart=\u0026#34;8dp\u0026#34; android:layout_marginTop=\u0026#34;44dp\u0026#34; android:layout_marginEnd=\u0026#34;2dp\u0026#34; android:checked=\u0026#34;true\u0026#34; android:showText=\u0026#34;false\u0026#34; android:text=\u0026#34;蓝牙\u0026#34; android:textOff=\u0026#34;蓝牙关闭\u0026#34; android:textOn=\u0026#34;蓝牙开启\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; app:layout_constraintTop_toTopOf=\u0026#34;parent\u0026#34; tools:checked=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/_scan\u0026#34; style=\u0026#34;?android:attr/buttonStyle\u0026#34; android:layout_width=\u0026#34;159dp\u0026#34; android:layout_height=\u0026#34;160dp\u0026#34; android:layout_marginTop=\u0026#34;132dp\u0026#34; android:background=\u0026#34;@drawable/circled_button\u0026#34; android:fontFamily=\u0026#34;sans-serif\u0026#34; android:lineSpacingExtra=\u0026#34;10sp\u0026#34; android:text=\u0026#34;SCAN\u0026#34; android:textAllCaps=\u0026#34;false\u0026#34; android:textSize=\u0026#34;30sp\u0026#34; android:textStyle=\u0026#34;bold\u0026#34; android:typeface=\u0026#34;monospace\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; app:layout_constraintTop_toTopOf=\u0026#34;parent\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/goTO_log\u0026#34; android:layout_width=\u0026#34;78dp\u0026#34; android:layout_height=\u0026#34;34dp\u0026#34; android:layout_marginTop=\u0026#34;72dp\u0026#34; android:text=\u0026#34;log\u0026#34; android:textSize=\u0026#34;10sp\u0026#34; android:background=\u0026#34;@drawable/round_botton_2\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintHorizontal_bias=\u0026#34;0.498\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; app:layout_constraintTop_toBottomOf=\u0026#34;@+id/changeStatus\u0026#34; /\u0026gt; \u0026lt;EditText android:id=\u0026#34;@+id/editText\u0026#34; android:layout_width=\u0026#34;128dp\u0026#34; android:layout_height=\u0026#34;54dp\u0026#34; android:layout_marginBottom=\u0026#34;208dp\u0026#34; android:ems=\u0026#34;10\u0026#34; android:inputType=\u0026#34;number\u0026#34; android:textAlignment=\u0026#34;center\u0026#34; android:textStyle=\u0026#34;bold\u0026#34; app:layout_constraintBottom_toBottomOf=\u0026#34;parent\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintHorizontal_bias=\u0026#34;0.498\u0026#34; app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/mhelp\u0026#34; android:layout_width=\u0026#34;42dp\u0026#34; android:layout_height=\u0026#34;39dp\u0026#34; android:layout_marginStart=\u0026#34;8dp\u0026#34; android:layout_marginEnd=\u0026#34;8dp\u0026#34; android:layout_marginBottom=\u0026#34;216dp\u0026#34; android:background=\u0026#34;@drawable/question_button\u0026#34; android:text=\u0026#34;\\?\u0026#34; android:textStyle=\u0026#34;bold\u0026#34; app:layout_constraintBottom_toBottomOf=\u0026#34;parent\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintHorizontal_bias=\u0026#34;0.0\u0026#34; app:layout_constraintStart_toEndOf=\u0026#34;@+id/editText\u0026#34; /\u0026gt; \u0026lt;Button android:id=\u0026#34;@+id/mCancel\u0026#34; android:layout_width=\u0026#34;28dp\u0026#34; android:layout_height=\u0026#34;28dp\u0026#34; android:layout_marginStart=\u0026#34;8dp\u0026#34; android:layout_marginEnd=\u0026#34;8dp\u0026#34; android:layout_marginBottom=\u0026#34;160dp\u0026#34; android:background=\u0026#34;@drawable/round_botton_2\u0026#34; android:text=\u0026#34;×\u0026#34; android:textSize=\u0026#34;10sp\u0026#34; android:textStyle=\u0026#34;bold\u0026#34; app:layout_constraintBottom_toBottomOf=\u0026#34;parent\u0026#34; app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34; app:layout_constraintHorizontal_bias=\u0026#34;0.033\u0026#34; app:layout_constraintStart_toEndOf=\u0026#34;@+id/changeStatus\u0026#34; /\u0026gt; \u0026lt;/android.support.constraint.ConstraintLayout\u0026gt; ",
    "permalink": "https://blog.weearc.top/posts/37370/",
    "section": "Archives",
    "tags": [
      "Android"
    ],
    "title": "android课设-蓝牙助手"
  },
  {
    "categories": "php",
    "contents": "入土是不可能入土的\n环境配置 软件安装 首先先安装PHP，php-fpm以及nginx。\n1 pacman -S php php-fpm nginx 安装完成以后，记得配置好vscode对应的相关插件\n注意一点，arch系的nginx配置虽然与其他发行版大同小异，但是初始可写目录不同。即初始化的目录虽然在/usr/share/nginx/html，但是实际上可写可读目录为/srv/nginx\n配置文件修改 安装完必要工具，修改配置文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #位置/etc/nginx user http http; worker_processes 1; event { worker_connections 1024; } http { include mime.type; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; root /srv/nginx; location / { index index.html index.htm index.php; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } loaction ~ \\.php$ { fastcgi_pass unix:/run/php-fpm/php-fpm.sock; fastcgi_index index.php; include fastcgi.conf; } } } ",
    "permalink": "https://blog.weearc.top/posts/33109/",
    "section": "Archives",
    "tags": [
      "php",
      "archlinux"
    ],
    "title": "php入门到入土1"
  },
  {
    "categories": [
      "tools"
    ],
    "contents": "可能和你想的不大一样，这是个不算完善的方法，但保证好用。\nFirefox下载及”安装“ 首先说明一下，archlinuxCN repo里面有每夜构建版本的Firefox，而且是四种语言版本:简体中文，正體中文，日本語，English(US)。但是这是我事后才知道的。话说回来，就算是使用了Mozilla官方的版本其实还是一个不错的选择。毕竟是预编译可执行文件，位置随意放置，比如我就放到了 opt下面。如果熟悉.desktop文件编写的话只要自己写个启动器就好，简单明了。这点还是要感谢一下Mozilla的打包方式，解压后的文件名统一就是Firefox。因此也可以做到多个Firefox版本共存。 由于一些不可见光的原因，国内用户在百度搜索Firefox浏览器的时候会被redirect到火狐浏览器那里\n好了你看到了，我把Firefox与火狐作了区分\n为什么？因为你要是仔细观察就会发现不光是安装程序和协议，就连官网本身都并不相同（不只是语言），国内官网是被阉割过的。因此想要下载Mozilla软件请一定要认准Mozilla的官方地址，根据其性质是以org域名。传送门。Mozilla有CDN加持，国内访问速度尚可。 接下来就是直接将页面拖到最低端，选择 Beta、Nightly、Developer Edition然后找到那个非常酷炫的nightly图标，点进去进行下载。 Mozilla会在你进行下载的时候对系统进行判断，Linux下载后会得到一个以tar.bz2作为扩展名的归档文件。直接移动到/opt目录下面，获取root权限并解压：\n1 tar -xvf firefox-nightly-版本号.0a1.tar.bz2 我这里写版本号诸君都能看懂吧，不要傻乎乎地复制粘贴。解压后会自动生成目录Firefox，此时在家目录下建立Firefox-nightly.desktop文件并填入以下内容（遵循X11标准，部分是KDE标准，DBUS部分可以不用理会）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 [Desktop Entry] Comment[zh_CN]= Comment= Exec=/opt/firefox/firefox GenericName[zh_CN]= GenericName= Icon=/opt/firefox/browser/chrome/icons/default/default128.png MimeType= Name[zh_CN]=firefox nightly Name=firefox nightly Path= StartupNotify=true Terminal=false TerminalOptions= Type=Application X-DBUS-ServiceName= X-DBUS-StartupType= X-KDE-RunOnDiscreteGpu=false X-KDE-SubstituteUID=false X-KDE-Username= 这里需要注意一点就是我偷懒了，实际上的写法应该参考archlinuxCN的Firefox-nightly.desktop：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [Desktop Entry] Name=Firefox Nightly GenericName=Web Browser Comment[zh_CN]=浏览互联网 Exec=firefox-nightly --class=FirefoxNightly %u Icon=firefox-nightly Terminal=false Type=Application MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https; StartupNotify=true StartupWMClass=FirefoxNightly Categories=Network;WebBrowser; Keywords=web;browser;internet; Actions=new-window;new-private-window; [Desktop Action new-window] Name=New Window Name[zh_CN]=新建窗口 Exec=firefox-nightly --class=FirefoxNightly --new-window %u [Desktop Action new-private-window] Name=New Private Window Name[en_US]=New Private Window Name[zh_CN]=新建隐私浏览窗口 Exec=firefox-nightly --class=FirefoxNightly --private-window %u 在这个写法中能够实现隐私窗口的调用，使得功能上更加完善。 至此Firefox-nightly安装完毕。你以为这就可以满足我了吗？才怪。\n自升级脚本编写 升级模块 下载模块 很简单，如果通过Firefox下载浏览器新版本的话能够直接看到下载的链接，形如：https://download-installer.cdn.mozilla.net/pub/firefox/nightly/latest-mozilla-central-l10n/firefox-59.0a1.zh-CN.linux-x86_64.tar.bz2 。 那么之后就只需要替换版本号就可以了。但是也存在一个问题，就是如果版本号写死了，那么之后的升级操作通过执行脚本就显得很困难，而且最多只能保持在某一版本号这短暂的生命周期内。因此结合以前学习archlinux的PKGBUILD编写时某贴吧大佬的提示，将版本号全部使用 $pkgver 代替。根据bash的语法。此变量的声明应该在头部进行而且使用$声明的变量应该是有前部程序输出的。但是毕竟本人能力有限还不能够写出能直接被识别的变量名称（毕竟web地址特殊字符不少）。 因此，思路是首先编写版本号文件pkgver.txt，在这个文件中输入版本号，借由cat命令执行输出并对之后变量的引用进行输入。 因此,整个过程简化为：\n1 2 3 4 5 cd /opt _pkgver=$(cat pkgver.txt) wget https://download-installer.cdn.mozilla.net/pub/firefox/nightly/latest-mozilla-central-l10n/firefox-$_pkgver.0a1.zh-CN.linux-x86_64.tar.bz2 tar -xvf firefox-$_pkgver.0a1.zh-CN.linux-x86_64.tar.bz2 #解压时会自动覆盖 rm -xvf firefox-$_pkgver.0a1.zh-CN.linux-x86_64.tar.bz 权限判断模块 上面我们讲了升级的基本操作：下载包，解压，删除。但是我们需要注意一点，我们在执行脚本时身份不是root，这样会容易造成麻烦。因此需要添加一个简单的身份验证模块,整个过程借由if语句:\n1 2 3 4 5 6 7 8 if [[ $EUID -eq 0 ]] then cd /opt _pkgver=$(cat pkgver.txt) wget https://download-installer.cdn.mozilla.net/pub/firefox/nightly/latest-mozilla-central-l10n/firefox-$_pkgver.0a1.zh-CN.linux-x86_64.tar.bz2 tar -xvf firefox-$_pkgver.0a1.zh-CN.linux-x86_64.tar.bz2 #解压时会自动覆盖 rm -xvf firefox-$_pkgver.0a1.zh-CN.linux-x86_64.tar.bz;else echo \u0026#34;Please run it use sudo or as root user!\u0026#34;; fi 提示一点，千万不要忘记bash中if对空格敏感\u0026hellip;还有就是分号不要忘记。\n版本号模块 正常来说的话，我们手动下载新构建的nightly时，Firefox会自动调用函数向上游发出请求来判断是否需要更新，但是我们自己的话就没有办法是用这个。因此我们需要手动构建一个。 上面已经可以知道我们有一个名为 pkgver.txt 的额外的文件用来检测版本号。然后我们也很容易发现如果尝试下载旧版本的包时候会返回404。那么，这样思路就很明确了：\n使用curl来获取http_code 使用tail，利用管道获取上面的返回值并剪切 使用一个循环来不断调用版本号的函数 那么可以利用以下代码： 首先定义一个_link来存放链接\n1 _link=https://download-installer.cdn.mozilla.net/pub/firefox/nightly/latest-mozilla-central-l10n/firefox-$_pkgver.0a1.zh-CN.linux-x86_64.tar.bz2 然后使用curl来获取http_code\n1 curl -I -s --connect-timeout 5 $_link -w %{http_code} 此时应该可以正常获取到网页或者该文件信息了。 使用管道：\n1 curl -I -s --connect-timeout 5 $_link -w %{http_code} 定义到新的变量：\n1 $_httpcode=(curl -I -s --connect-timeout 5 $_link -w %{http_code}) 夜间定时检测任务添加 TODO：\n基础模块编写 发行版判断并可切换下载器 代理功能 [] 后续脚本优化 ",
    "permalink": "https://blog.weearc.top/posts/55829/",
    "section": "Archives",
    "tags": [
      "firefox",
      "archlinux",
      "linux",
      "firefox-nightly"
    ],
    "title": "Firefox每夜构建食用指南"
  },
  {
    "categories": [
      "杂谈",
      "hello hexo"
    ],
    "contents": "Hello World！ Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nhello world 原文 Quick Start Create a new post ``` $ hexo new \"My New Post\" ``` More info: [Writing](https://hexo.io/docs/writing.html) Run server ``` $ hexo server ``` More info: [Server](https://hexo.io/docs/server.html) Generate static files ``` $ hexo generate ``` More info: [Generating](https://hexo.io/docs/generating.html) Deploy to remote sites ``` $ hexo deploy ``` More info: [Deployment](https://hexo.io/docs/deployment.html) PS:你可知道为了书写折叠区域的艰辛\u0026hellip;结果发现就是如下一些代码结果我连next都升级了\u0026hellip;配置文件全部需要重新搞。\n1 2 3 4 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;\u0026lt;!--折叠区域的提示词--\u0026gt;\u0026lt;/summary\u0026gt; \u0026lt;!--折叠的内容--\u0026gt; \u0026lt;/details\u0026gt; 这段原文当然是没有的啊混蛋！！\nhello, again hello hexo！ 想了一想。还是打算把hello world.md搞回来。一来是一个项目（虽然称不上是项目）没有了hello world感觉很是让人失落；二来是想记录下自己创建博客的心路历程。参考了这篇以及这篇以后决定好好写一写这篇文章，改造一下hello world。\n如果各位看的比较仔细的话会发现这篇文章的日期与我的第一篇文章创建日期刚好隔了一年时间。这一年时间，说长不长说短不短，只是一直感觉少了些什么。让人颇为失落。\n因此这篇文章是一定要写了。\n准确的说，我没有一个明确的建立博客的契机。当时只是在b站无意间发现了个视频，使用了比特萌出品的hexo便携版搭建博客，我最大的好奇是搭建到哪里去了。。。虽然后来才知道github给提供了gitpages服务，但是当时虽然用了蛮长时间github却什么也不知道。就这样，边看百度边摸索着把博客搭建了起来，学着适应了Windows7下面使用git bash.exe安装了VisualStudioCode作为markdown编辑器并且慢慢摸索着凭着一腔热血把Archlinux安装配置（一）这篇文章写了出来、换掉主题并且部署到github上。整个过程非常舒适（我其实没有实质性书写任何一点点hexo配置文件当时）\n后来出现了一个问题，OpenSUSE42.1在深深让我感受到绝望以后我便完全叛逃到了Windows10 1509。怪也怪当时对UEFI下Linux的配置方式基本不知道。然后出现了一系列问题导致博客书写不能，初期忙于各种事情于是博客的事情就一拖再拖。\n上面口水仗一般的简单讲了下我是怎么接触到hexo的\n再见了我的高中生活～ 其实写了这么些再说这句话有点不是很合适了。不过这点确实是我开始决定开启博客书写的契机。\n全部应该归功我的高中语文老师。与同年级其他班级的老师不大一样，我们班是有写积累本这个要求的。所谓积累本说白了就是一个本子，按照要求需要写一些观影感言什么的，这点与小学时的基本无异。区别是，有时候一些课内文言的翻译和重点词汇总结什么的也会被要求写在上面，另外有时会有一些话题类作文作为作业也是要求一并写在上面的。\n不算自夸，如果阅读量不小的话，或者脑袋里稍微有点东西，观点类文章一千多字差不多半个小时就可以完成了。对于素质教育这点我们还是很有信心的，毕竟高中班上所有同学都是接受了了初中几乎纯素质教育升上高中的。这里稍微说一下我们的学校辽宁省实验中学北校。在我们入学时设有初中部高中部，而初中部的能力在当年是可以把全省其他初中吊着打的。尤其是比较讨厌的“第七监狱”，毕业生到高中以后的能力和我们初中培养出的根本没法比，现在的情况就让人唏嘘不已了。而高中部，设有一些班级专供中考失利没有考上学校本部：辽宁省实验中学 的人来就读，我便是其中一员这样的话基本上所有写作任务都不是什么难事。作为观点比较犀利的写手，我们更是有由课代表设立的“梦呓之肆”这种活动。每间隔一段时间会定下一个主题然后一群人来对这个观点发表一些评论并记述下来。那个地方，是在完全封闭生活中的我们的畅所欲言的地方，那里有思想的激烈碰撞，有面对一个事件不再一边倒似得评论而是全部客观分析的假设种种\u0026hellip;\n那是个至今还令人十分怀念的地方。\n高中的书写习惯轻易没有办法改过来。一切从我个人厚度大约8mm的A4大小的积累本全部能够写满可以看出一些端倪。那就借此机会继续下去吧，形式改变了，但是我的思想还在。只要我还有时间还有这颗心，我就会继续写下去。\nPS：喵～ 上面隐藏的部分说了我升级了next主题，这个以后会找时间来讲，但是现在就算了，板式比起旧版本还有很多不如意的地方。 TODOs: next主题压缩优化 字体更换 music.js优化重构 部分样式表重构 图床迁移 配置文件更新 live2d模型配置迁移 music-aplayer迁移 ",
    "permalink": "https://blog.weearc.top/posts/16107/",
    "section": "Archives",
    "tags": [
      "hello-word"
    ],
    "title": "Hello World"
  },
  {
    "categories": [
      "杂谈"
    ],
    "contents": "又一篇由于图床挂掉丧失乐趣的文章，但是不嫌弃的话，还是看看呗？\n这张图可是做了很久，但是想拿去的话help yourself!（反正我也没有备份了）\n今天来谈一谈木下佑香，还是和往常一样分为两部分好了，我们先谈一些美好的，然后再把美好的东西一点点撕开来看，这才有趣，对吗。\nyoutuber木下ゆうか\u0026mdash;are you still youself? 都市人复杂生活中的开心果 个人接触木下佑香比较晚，大概是2017年暑假那会儿。木下的视频给人最大的感觉就是欢快，一点不做作的小女生不但厨艺可以连胃口都不小简直是直戳我的萌点。声音可爱，长相好看而且和娇小体型形成强烈反差的进食量确实是让人欲罢不能。在繁重的都市人生活中。突然有一天跳出个这种小女生，那个人能狠下心来讨厌呢？况且平时生活的艰辛大家都懂，突然看到这个可以心无旁骛地吃东西，这个时候，这种欢乐和放松使人能够忘却很多烦恼。一边看她吐槽着食物，一边大口大口地咀嚼。光光是吃东西就能让人感到幸福，真的是太好了呢！\n印象最深的是，每天就算非常累了，也会在床上一脸傻笑地看她的更新，看她做东西吃东西仿佛自己有了女儿并且在幸福地咀嚼着自己亲手做的事物一样。论食物种类，除却作为广告的那些，都是很基本的和食。也有很多韩餐和中华料理，当然还有很可怕的奶酪地狱就是了。不过其他的都是小事不是么，最重要的是，她是那种笑靥如花的人。只要看着她就好像自己很幸福了一样。明明实际上年龄并不算小，但是看起来确实很年轻，这可能就是所谓的童心保存得很完整吧！\n黑历史知晓不得已但是令人自我厌烦 我，真的非常喜欢木下佑香。在镜头前的她没有一丝做作，没有那种让我看到第一眼就反感的不得了的感觉，甚至可以说是我最喜欢的Youtuber。\n然后现在出现了一个问题。由“爱好和想出名声”的想法，组件变成了为了“保持着出名而不得不继续”的样子之时，整个就变味了。商业性质倒是没有办法，毕竟不是谁都可以无时无刻用爱发电。但是一旦被捅出来有催吐行为就等于自杀无疑。\n出于人类本能都对这种极其伤害身体的行为表示拒绝，但是此时也会使人深陷矛盾：如果你进行观看就从某种角度上是认同了她的催吐行为，使得她会“变本加厉”；但若是不进行观看的话等于她人气的下降，这样可能是无形中会加重她的催吐行为，这样的情况下不但没有起到正面效果，反而会因为她的行为与自己的自我厌恶形成恶性循环：在看到木下的脸时不自觉的会感觉到很惭愧但又想观看，因此，倒不如最后不再看了。\nyou are still yourself, but not the former one",
    "permalink": "https://blog.weearc.top/posts/30769/",
    "section": "Archives",
    "tags": [
      "木下ゆうか",
      "随笔",
      "木下佑香"
    ],
    "title": "youtuber木下ゆうか篇（一）"
  },
  {
    "categories": [
      "archlinux",
      "kde"
    ],
    "contents": "上一次我们配置了基础系统，这一次我们需要进行进一步的配置以使这个系统能够进行日称使用，至少来讲，不能出大问题。我们在上次的安装中已经结束了基础环境的配置。但是仍然需要后续的一些准备。\n后期处理 先不要弹出安装设备并重启\nchroot 部分 执行：\n1 arch-chroot /mnt 进入已经安装完成的系统。此时，系统默认的shell程式应该是Bash。因此能够进行一些操作。\n首先修改时区：\n执行：\n1 tzselect 接下来跟着向导进行时区的修改。\n然后执行：\n1 echo \u0026#34;主机名\u0026#34; \u0026gt;\u0026gt; /etc/hostname 来创建hostname。\n并执行：\n1 nano /etc/hosts 修改hosts。\n一个基础的hosts文件看起来应该是这样：\n1 2 3 4 5 # Static table lookup for hostnames. # See hosts(5) for details. 127.0.0.1 localhost ::1 localhost 127.0.1.1 你的hostname.localdomain 你的hostname 接下来修改locale:\n1 nano /etc/locale.gen 为了保险起见，locale.conf 我们不做任何更改。\n找到en_US.UTF8 ，取消注释并执行：\n1 locale-gen 生成locale。\n接下来执行：\n1 passwd root 来修改root账户的密码。\n输入密码时不会有任何显示，这是一种安全措施，请不要慌张。\n接下来我们需要安装引导程序，此时可以直接执行：\n1 pacman -S grub os-prober efibootmgr 来安装相关的工具和程式。\n1 grub-install --target=x86_64-efi --directory=esp分区 但是个人来讲更加推荐使用rEFInd程序代替之，一则是界面更加美观，二则是确实省心不少。需要安装rEFInd,执行：\n1 pacman -S refind-efi 安装过程中会自动寻找操作系统的引导项(EFI)，无须担心。\n1 refind-install 接下来重启，并取出安装设备。从引导程序引导进入新系统。\n重启后的操作 重启后，应该可以直接看到提示输入用户名，键入：root，回车，并输入密码。登录到新系统。\n注：我的个人建议是chroot下安装iw，dialog等工具，预防进入系统没网的尴尬。\n桌面环境安装 如果是稍微老一点的教程，可能会推荐先把显卡驱动什么准备好再安装桌面环境。但是我这里将直接讲解桌面环境的安装。因为基本上官方支持的桌面环境都是把我们需要提前安装的那些组件作为依赖来安装的。 首先我们需要选择自己所需要的桌面环境。为什么我不在这里推荐一个？因为每个人喜好不同，各个桌面环境的体验也大不相同，需要知道自己的需求才能选择得相对舒服。\nGNOME GNOME是GNU基金会的亲儿子，全称The GNU Network Object Model Environment（GNU对地网络模型）。听起来高大上，但是其实是非常容易亲近和理解的。就是安装完能看到的整个视觉上的界面和底层诸多逻辑。 在Archlinux想要安装GNOME非常简单。只需要执行：\n1 pacman -S gnome gnome-extra 即可完成GNOME全部套件的安装。如果仅需要基础的Shell那么只安装GNOME包组即可。\n这里区分一个概念:包和包组 简单的说，包就是单个软件，而包组从字面上理解就是一些包的集合。\nKDE(KDE PLASMA) 更新：\n由于长达一年多用回了KDE，因此后文也会着重讲解KDE的基础配置。\n",
    "permalink": "https://blog.weearc.top/posts/60769/",
    "section": "Archives",
    "tags": [
      "archlinux",
      "linux"
    ],
    "title": "archlinux安装配置(2)"
  },
  {
    "categories": [
      "杂谈"
    ],
    "contents": "别的我不知道反正我是先在路由器里执行了如下命令\u0026hellip;\u0026hellip;\n1 iptables -I FORWARD -d www.zhihu.com -J DROP 说起来，今年好像是知乎成立的八周年的样子。那么我也姑且算是入坑知乎六年了。为什么我会选择退坑知乎，我想就算我不说，也会有好多人有相同感触\u0026mdash;\u0026mdash;知乎已经俨然成为了培养故事创作能力的地方。\n在这里，你可以重新塑造你自己的身份，你的经历。你也可以诱导其他人，避开矛头。这里已经是故事的创作中心、网络写手和键盘侠的集聚地，也是好多人仍然从中获取力量的地方。极其诡异，但是又极其有诱惑力。\n为什么当年的我选择入坑知乎 说到底，是因为百度知道实在是太不靠谱。同期的知乎，虽然内容很少但是答案含金量很高。草根大佬也能各显神通。但是，也存在一个问题，那就是因为圈子不大，所以好多问题，合法的、非法的都可以被讨论。正确的、错误的，无论怎样。那里的人们和我所听到的互联网才在中国开始流行的那几年的人儿一样，都有着别致的气息和绿林侠样的思维模式。\n但是问题终究还是存在的。一个圈子会变大，会做大，是因为内容和氛围得到了其他人的认可。但是做大了。就必然需要更多的资金，更种方面的支持。知乎选择融资，与其本身而言，是有利的。知识变现，也成为那个时期的风潮。\n但是，从那个时候我开始迟疑 知乎用户爆发式增长的那几年，正好是我比较忙的几年，毕竟是全宿制高中的学生，周末放学回家也满脑子都是事情。 但是，我，那几年确实是真正学到了很多东西。\n全宿制带来的好处是在学校可以隔离一切，专心于自己想做的事情。正好那段时间也是我接触不到智能手机的几年，也是我深入玩儿Linux的几年。那段时间，能上网的功能机成为了我获取知识的主要渠道。不知道现在还有多少人记得那个红红的圆圈，浏览器多标签的开创者： Opera。要知道Ｊava的功能机也是可以使用３G网络的。那段时间真的是获取到了非常多的内容，知乎上每一个有关Linux的话题，问题，我都会关注。每个人的每一个字每一张图，直到现在我都记得。\n混开源圈的终究没有那么多纯技术人员。每个人多少又会有书生气。而那段时间所看到的，无论是有关开闭源的讨论，发行版的讨论（Archlinux \u0026amp; Gentoo,说多了怕引起圣战），甚至乎编辑器的讨论（Emacs \u0026amp; Vim）都有着很是浓厚的技术色彩和宗教色彩。引人入胜。\n但是也正是从那个时期我开始迟疑。我为什么要继续浏览着知乎的内容。不知道是从哪个时间点，对于技术的讨论嫣然成为了技术圈外的人装逼的资本。\n沉下心来冷静思考 有的时候包括操作系统在内不使用常规工具，其实说实话有那么一点点是为了能有装逼的资本。但是越来越深入才发现，所谓技术不也是实现一个个梦想么？我做不了很多的技术工作，那能够做的是什么？我所想寻找的。终究是一个容身之所，对等的，用自己的劳动来换取包容感。就算是翻译，我做的也只有这些，认同感其实并不是别人给予的。都是自我的心理安慰。每个字词的翻译，每个标点的调整，每次的最初根本不背父母理解的无偿志愿工作，说到底是为了寻求精神上的满足，为了缓解在学校也好在生活上也罢的心里压力。\n我们的大学英语结课论文我们选择进行调查的是大学生志愿服务的心里、动机和渠道。不约而同的，回到了讨论当初困扰了我好久的心理状态上。后来，才发现其实志愿活动都是“利己性的”，无论愿不愿意承认，这个世界上从来都没有无私奉献。\n但是压倒骆驼的稻草是什么 上面说的，最多是我单方面认为需要像知乎上的大佬们那样，为了更强的自己而向上前进。我并不讨厌知乎。但是最终却被它激怒了。\n那么究竟是什么能够让我如此愤怒？我想，可能原因其实并不在于知乎，根本是在于网络的使用者的无界限。\n记得假期的时候有人在Biibili上进行引战，其直接后果是“国家队”的禁播。但这些并不是事情的全部，有人在知乎上利用伪技术骗取他人信任，从而成功地将所有关注点集中到一个无辜的消防员身上。其问题在于，那个假的消息之所以会为人信服，之所以会引爆所有人的情绪，关键在于知乎的匿名功能。\n网络的匿名性本来提供给了使用者保护自己的便利，但是利用这些胡作非为确实已经导致了一系列的问题：社会、道德、伦理，凡是有人类出现的地方，只要匿名性存在，人们就会自相残杀。说到底人类的本质根本不是善，而是极度罪恶。人类，是恶的代名词。\n不过话说回来，在这个世界上本来就是弱肉强食。弱者只有被吃掉的份，没有任何话语权。而为了成为强者，所有手段都是被默许的。变的是成为强者的方式和历代强者们，不变的永远是弱者会被宰割的事实以及成为强者的方式。\n看到这里，你也许会认为我是个极度偏激的人，同时也是个有神论者。\n我承认，我将会是你见过的很偏激的那些人之一，但是永远不是最和善的那个。 如果说很久以前由于另一些原因我就开始嫌弃知乎。那么点燃引线的是国家队事件。而引爆我的则是之前无意中看到的一篇专栏。链接当然是没找到，但是，我仍然清楚地记得：那是篇博人眼球为目的的，狂妄的，过分偏激的文章。评论区更是聚集了我所见过的一切没有信仰的话语和肮脏的词汇、还有更多的自以为是的声音。\n你问有没有反对的观点？我看到是有的，但是占据绝对少数而且被很肮脏的话辱骂着。\n这里不得不提一点，我是有神论者。但是我同样信仰科学。\nJe désapprouve ce que vous dites, mais je défendrai jusqu\u0026rsquo;à la mort votre droit de le dire.\u0026mdash;François-Marie Arouet 我不赞成你说的每一个字，但是你说话的权力我誓死捍卫。\u0026mdash;伏尔泰\n我认为这种大无畏的精神也许也可以用到现在的事情上。但是，前提是双方都能够拥有这样的权力。当其中一方想要以某种方式方式夺取另一方这种权力时，那么我可以认为在对等的前提下，这一方也不需要这种权利。\n因此我可以认为，在匿名性的保护下大放厥词的人也是不需要我们尊重的。这种人本该让他自生自灭才好，问题在于害虫多了以后，已经到了无法会被净化掉的程度。那么，他所贬低的宗教，真的有那么可怕吗？在我看来没有。只有没有信仰的人才会惧怕宗教。前面我也说过我是有神论者，我相信所有的行为终究会被上天所看到。\n然后我们来说说那个人。他的本意也许是好的，也只是为了清除掉借宗教名义敛财的人。但是他把矛头指向宗教却是不能令人赞同的。正如他自己所说的自己应该信仰科学。那么，“所谓科学”难道没有告诉你要对一切未知事物保持敬意吗？难道没有说过任何事物都具有两面性吗？不存在敬意的人，同样也是不被允许尊重的。确实，当宗教的行为比较极端是会引发一系列社会问题。但是宗教在现代，我想更多的是填补了人们由于那段时间内心出现的信仰空隙。\n当一个一个人的心中没有任何信仰的时候，他不会对任何事物抱有敬意。他可以做任何事，他甚至可以诋毁其他一切思想。\n当代国人所需要的就是信仰 不是其他东西，当代国人最缺乏的就是信仰。信仰的力量有时候可以约束人的行为。而没有信仰，就可以胡作非为\u0026mdash;\u0026ndash;反正是在法律的空白区。对其他人造成的伤害都可以忽略不计\u0026mdash;\u0026mdash;只因为那些话语是“合法言论”。\n法律是用来管教人的，不可以用来约束人。\n所以，我选择离开知乎 这也许是个极其无奈的选择。我喜欢从前知乎的环境，每个人言论自由，但是会自觉避开敏感话题。所有人智商上线，且言之有物。\n而不是现在，网络低龄化严重，经历可以编造，所有东西不再可信。那过去的时代也许不会再一次来临了。过度的低龄化势必会起到与发展相反的效果。小圈子所无法带来的利益是更大的圈子可以带来的。蛋糕做大，单也只不过是充入了更多的空气而已。果壳如此、36Kr如此、豆瓣如此、人人网如此，而如今，知乎也是如此。什么情怀不情怀的。只要一定程度上它自身能够盈利，那其他的就什么都不是。知乎在衰落，我们也是看得到的。有更多商业资本在运作的团队，下一个开始衰落的是谁呢？\n既然事已至此，那么我选择主动离开。无论是以前在那里有多么的欢乐、得到了多少感动、又重新振奋了多少次。过去是回不去的。那么，知乎，再见了。\n",
    "permalink": "https://blog.weearc.top/posts/12984/",
    "section": "Archives",
    "tags": [
      "随笔",
      "知乎"
    ],
    "title": "为什么我屏蔽了知乎？"
  },
  {
    "categories": [
      "随笔"
    ],
    "contents": "今天不来谈技术，我们来说些柔软的东西。\n就在几个小时前，6月17日这天，结束掉了。那么，几个小时前的你是正在为德国战车的失利而惋惜，为618购物节的前夜在狂欢，抑或是回味着所有一切的滋味，等待入眠呢？不论是哪种，今年的617，是不是有特殊的含义呢？\n记得小编还是个小屁孩时，对所谓的父爱真的是一无所知。在我眼中，那仿佛每时每刻都在向我发火的我的健壮的爸爸，真的如同恶兽一般。如此，直到高考结束。\n有人说，成人礼是人蜕变的第一步，但是对我来说，成人礼一年多以后的高考成绩公布才是，同时也是感到极度心酸的时刻。记得那天他喝了很多的酒，却丝毫看不出醉意。一句“儿子你是好样的”瞬间让几年间因为我的成绩而被凿出了深壑的父子关系又完好如初。\n从小学为了我不断陪我练习，到初高中住读每次回家时的严督，到后来陪我高考，陪我参加自招。。。到最后的时候，报道第二天的上午他和老妈来看了我，给我带了我已经睡熟悉的最喜欢的荞麦壳芯子的枕头。他几乎是不愿意离开，本来由于工作任务繁重已没有除了春节以外的其他假日，但是他硬是在我报道那两天来了重庆\u0026mdash;\u0026mdash;横跨东北和西南飞了过来。回去的第二天又要坐在屏幕前赶着工期绘出图纸。临别时一句“这回我管不了你了哈”又让给我怎么作答，让我，一个男性，硬生生把眼泪吞回肚子里去，但又笑着：“你就放心吧！我又不是小孩。”\n……\n之前的离家根本不算是真正的离家。现在，K字头45个小时的距离才有着真真切切的感觉。\n……\n无论最近的你是在奋战备考，还是在上交过毕设以后的小憩，还是继续为了理想而拼战到底，都一定不要忘记那个世界上第一爱你的男人。就算不能相互理解，也请相信这一天的到来。因为，你们是家人。\n如果你恰巧记得昨天的真正含义，那恭喜你；如果你由于事务繁多忘却了，今天亦不算迟，记得要为父亲，用最发自肺腑的声音，最真实的声音，说一句：\n“父亲节快乐！爸你辛苦了！”。\n",
    "permalink": "https://blog.weearc.top/posts/34170/",
    "section": "Archives",
    "tags": [
      "随笔"
    ],
    "title": "狂欢之夜，似乎内心也有些苦涩"
  },
  {
    "categories": null,
    "contents": "天气炎热，本来说好的义诊人一共没来几个。微型网友见面会了解一下，虽然还是很舒服的。\n",
    "permalink": "https://blog.weearc.top/posts/50563/",
    "section": "Archives",
    "tags": [
      "杂记",
      "随笔"
    ],
    "title": "2018-06-09"
  },
  {
    "categories": [
      "待修改"
    ],
    "contents": "五月已经远去，儿童节已经过去了三天，如果没记错的话，毕业答辩也差不多在进行当中了。今天我们不来谈技术，来谈一谈更加柔软的东西。逐渐远离的五月，我们再犯一次五月病。\n有的时候就是这样，不愿意承认的感情，不想被希知的心情，就算加以掩饰，也会有被了解的一天。就算小编是大一的学生，有时候也不想承认，加入蓝盟对自己的改变是无法估量的。之所以一直更愿意谈谈技术，是自以为那样可以更好的隐藏起自己，殊不知，越是想隐藏，越是藏不住。\n从面试到开始水群，开始认识了那些有趣的学长学姐们。无论是萌萌的七代目，还是现在帅气的八代目，意外不难相处的廖博士，强悍的巴学姐还是精明能干的姚学姐，还有完全不拘小节的（很好相处的）学长们（外校读研中）都令人印象深刻。都两次义诊的记忆更是没有办法忘却。“不计较，开朗，阳光甚至有点小猥琐”其实男人就应该是这样吧，就算我是男性仍然感觉到：这种魅力是没有办法抵挡的。记得有次问过七代目打算毕业以后怎么办，他直接了当回答说去工作。Emmmmm真是有趣的回答啊…\u0026hellip;本以为是考研还是什么的。好像本科毕业去读个硕士成为固有套路。虽然感觉会有些遗憾，嘛，都是个人的选择。\n因此，直到上学期期末才渐渐发觉好像会错过什么。这种感觉，在这两个月开始的抛售物品中渐渐有了更强烈的感觉。记得高二的时候，也是这个时候，为了准备考试，所属社团的社长的毕业，一点没有去关注。去高三采购物资的时候，见到他本人倒也没有什么特殊感觉。直到一模完他大老远从南京回来看我们，那种难以言喻的感受才逐渐明朗了起来。是“不舍”。\n就算到现在说实话，所有现任蓝客我也没有办法认全，毕竟平时接触到的也只有那些，屈指可数。求算事情堆积如山，如果有时间还是会上官网看看，看看大家积分的变化，看看自己的差距，就明白了还有个很长的路要走。默默地看着个人主页的变化，积分疯一样的增长。有时候时间比较充裕，转念登录后台想接一波老校区的单子顺便下去玩玩却几乎此次发现后台空空如野。 有的时候会感觉，“这个人真的好高大”。但是，高大的是我们眼中的他们，真正的他们，我们亦不知晓。\n从来都不是错觉，每个人的努力其他人都是可以感受到的。面对异常努力的人，那种仰慕之心丝毫不亚于小时候对于兄长和父亲的。正是因为这样，有的时候才希望替这个人承担他不应该承担的全部东西，不论他所背负的是什么，天真如孩童般希望一切美好都如期而至。但是明知自己什么都不是，有时候那样的念头却愈发强烈。越是无能为力，越是想要做些什么来进行改变。仅仅是因为“不想成为路人”。\n毕业季，注定是令人五味杂陈的。即将进入新生活的喜悦，离别的伤感还有不舍，亦或是解脱以后的放松都将是多年以后最美好的回忆。即将离校的学长学姐们：恭喜毕业顺利，以后也请多多指教了。\n",
    "permalink": "https://blog.weearc.top/posts/50906/",
    "section": "Archives",
    "tags": [
      "毕业季",
      "随笔",
      "待修改"
    ],
    "title": "六月，我们"
  },
  {
    "categories": "待填坑",
    "contents": "今天写这个不为别的，就为了现在在linux内核操作系统下生存暂时成功而进行记录。\n前言 说实话，现在用linux也快６年了，也算是对各个系统的特性有所熟悉了。但是，根本称不上是所谓大佬什么的。毕竟，虽然也能写一些脚本啥的，也算是会编程啥的，但是和一下子会好几门语言的其他人相比，我还是太弱了。很喜欢开源社区的氛围，有时候却不知道要做些什么好，没法维护一些项目就\n只好做做本地化工作了。传送门：gnome翻译组 其实，现在的开源社区早已不是当时的开源社区了。我们在进入的时候，多少还有想着去回馈一下社区的开发者。而如今，伸手党遍地的现在，开源的各个项目早已是费力不讨好。氛围不在，过去的人也一个个离开，就连一些信仰纯正的人都不见了踪影。莫不如自己在博客上码码字，也算是对自己成长的回忆及立一个flag(笑)。总而言之，看看自己还能呆多久了。 上面其实也是蛮早的截图了，后面由于一些原因更换为了KDE，但是KDE５的表现却着实不能让我这个以KDE４入门的人高兴起来，也许是我要求太高了也说不定．．． 于是决定做一些简单的优化，毕竟电脑配置不算很好，但是能这么顺利地跑起来我就已经感激不尽了。具体优化策略和设置步骤放在这里：manjaro linux kde edition调教记录效果图如下: 感受 其实，如果对于某些工具没有特殊的执着，使用哪个系统来工作都无可厚非。只不过是操作习惯有所不同。说实话，有人也曾经说过使用LINUX是一种自虐。老实说我无法反驳，但是，也用了这么长时间。现在这些配置文件就像是老朋友一样，也是舍不得再离开。 “那我为什么又说无法反驳？”\n我个人觉得，linux虽然在服务器市场是一方霸主，虽然在个人桌面领域也逐渐受到重视。\n但是使用体验仍然不够好。\n就这一点，使得大量的小白用户最后又回到了Windows的怀抱。就算它蓝屏，就算它出了问题有多么难以修复，这么多年在个人桌面领域的投入：人力，财力，外加大量的基础设施建设，Office套件\u0026hellip;使得微软和Windows不得不令人佩服。这点不得不承认，现有开源桌面环境是无法与之匹敌的。\n“你这家伙是闭源商业狗”\n如果你真的这么认为，那实在是太对不起了。我不否认我对于开源的热爱。这种人人都可以参与并改进的方式与我的生存理念是相合的。但是，你也无法否认，大量的闭源软件比如微软的办公套件，实际使用效率和稳定性明显高过现有开源解决方案。但这不能说明我有任何方向的倾向，我都会使用，支持，如果体验良好，我也会做推广。只不过与所谓“忠犬”不同，我只用我喜欢用的。毕竟，开源的LIBRE口号可不是白喊的，“人人都有选择的权利”。但是还有一点：少骂人了，你敢保证你使用的东西从硬件到软件到设计都是完全开源的？\n那为什么现在我又不愿意离开？\n我觉得原因很好解释：linux的自定义性可不是盖的。尤其是LFS系的发行版,包括Archlinux,Gentoo Linux等（注意了,LFS本身并不是发行版）。良好的文档和手册使得在熟悉了以后使用很是便利，外加桌面环境带来的良好体验，以及作为国内用户最重要的本地化软件的上线，都使得现在在一部分硬件资源吃紧的电脑上，linux的表现要明显好过Windows，不能说是吊打，但是日常使用方面还是体验不可同日而语。 老实说，像我这种工科类的学生，平时也会大量使用专业软件，包括SolidWorks,AutoCAD等纯种闭源商业软件。但是这并不影响我花费更多的时间在linux下。双系统只是为了专业软件，平时另一个系统也只是放在那里，打入冷宫。\n开源与闭源，我的个人经历 开源与开源组织；闭源与商业化组织 开源的好处，弊端；为什么仍有人选择开源作品 未完待续\u0026hellip;",
    "permalink": "https://blog.weearc.top/posts/35108/",
    "section": "Archives",
    "tags": [
      "manjaro",
      "linux",
      "生存记录"
    ],
    "title": "manjaro下生存报告"
  },
  {
    "categories": "转载精品",
    "contents": "本手册的使用说明：\n按着顺序看就应该能懂，并且少走弯路 👉👉👉 后面的链接为主要内容 更多 后面的链接为补充内容，不一定需要看 ⚠️ 的意思是「需要注意的是」 🙈 的意思是「随便看看不用记，需要的时候再翻」 ‼️ 的意思是「有更正」 链接主要来自 MDN，比 W3school 之类的强多了，学习 Web 技术都尽量看 MDN 的资源 (最好也看看英文的，顶部可以切换语言，我发现有的中文翻译的专有名词有点奇怪，还不给英文原词) 基础语法与 DOM 操作 本阶段：我想留住头发。能进行绝大多数页面交互，包括响应用户操作、编辑界面元素、AJAX 数据交换。\nJS 是什么? 如何使用? 一门 动态类型、面向对象 的 解释执行 语言。是唯一 可以在浏览器上直接执行 的程序设计语言。\nJS 几乎可以做任何事，是现在使用最广泛的程序设计语言之一，同时也是 GitHub 上最活跃的语言 (GitHut）。\n本阶段主要学习的是 JS 在前端开发中的使用。\nJS 可以使用 \u0026lt;script\u0026gt; 标签内嵌在 HTML 内，或链接引入 JS 脚本文件。\n1 2 3 4 5 \u0026lt;script\u0026gt; alert(\u0026#34;hello, world\u0026#34;); \u0026lt;/scrpit\u0026gt; \u0026lt;script src=\u0026#34;script.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 学习 JS 一个方便的方式是使用浏览器的 开发者工具-\u0026gt;Console (控制台)，Console 内的代码将被直接求值。\n开发者工具内还能显示错误信息 (MDN 什么地方出了错？) 与设置断点 (Chrome断点调试) 来帮助调试。\n2015 年 JS 迎来了一次重大语法更新 ES6。ES6 中新增的内容大多与入门无关，新增的语法糖将会随着各部分内容一并介绍。\n更多：MDN 什么是JavaScript？\n基础语法 JavaScript 从 Java 中借用了大部分语法，但也受到 Awk，Perl 和 Python的影响。 JavaScript是区分大小写的，并使用 Unicode字符集。\n在JavaScript中，指令被称为 statements，并用分号 ; 分隔。ECMAScript 规定了如何自动插入分号来结束语句。但是，建议随时添加分号来结束语句，以避免可能的副作用。\n注释 在代码内的解释性文字，不会被执行。JS 的注释语法与 C++、Java 等语言相同。\n1 2 3 4 5 6 7 // 单行注释 /* 这是一个更长的, 多行注释 */ /* 然而, 你不能, /* 嵌套注释 */ 语法错误 */ 变量 变量就是用于 存放数据的容器。\n👉👉👉 MDN 变量\nES6 中新增了关键字 let, const 来申明变量与常量，与 var 差异不大，可以在第三阶段「JS 的并发编程及其他语法」中学习。\n数据类型\n变量存放着数据，而数据有不同的类型。数据类型的概念从程序语言使用的角度来讲，就是能对一个变量所进行的操作的类别。 变量存储不同类型的数据时，能进行的操作也不一样。\nJS 有 6 种 原始数据类型 String, Number, Boolean, Symbol, null, undefined (Symbol 为 ES6 新增类型) 与 Object 对象类型。\n对象类型是一类类型的统称，它们各自能进行不同的操作，JS 中常见的对象类型有 Array, Error, Date 等。关于对象类型可以在第二阶段「JS 的面向对象」中学习。(‼️ Math 是一个对象不是类型)\n⚠️ JS 中未赋值的变量 (包括函数参数) 值都为 undefined。\n使用 typeof 运算符可以获得变量的数据类型，有 “string”, “number”, “boolean”, “object”, “function”, “symbol”, “undefined”。typeof 的运算结果为 String 类型。\n⚠️ typeof null 的结果为 \u0026quot;object\u0026quot;。\n⚠️ 在 JS 中函数 (Function) 也是一种类型 (变量值) 但不是「数据」类型。\n更多：MDN 语法和数据类型\n字符串 👉👉👉 MDN JavaScript中的字符串\nES6 中新增了反引号 ` 包围起来的字符串，称为 模板字符串\n模板字符串中插入变量不再需要用 + 将字符串与变量连接起来，而是直接在模板字符串内使用 ${expr} 嵌入：\n1 `Hello ${name}, nice to meet you!` 更多：\nMDN 有用的字符串方法\nMDN String\n数组 👉👉👉 MDN 数组\nES6 数组的解构赋值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 var [a, b, c] = [1, 2, 3]; // a = 1, b = 2, c = 3 var [foo, [[bar], baz]] = [1, [[2], 3]]; foo // 1 bar // 2 baz // 3 var [ , , third] = [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;]; third // \u0026#34;baz\u0026#34; var [x, , y] = [1, 2, 3]; x // 1 y // 3 左值 (被赋值的变量) 按照对应位置提取右值数组中的值。右值为变量而不是字面量时也可解构：\n1 2 var array = [1, 2, 3]; var [a, b, c] = array; ES6 剩余 (rest) 语句 与 扩展语句 🙈\n语法均为 ...variable，区别在于 variable 是左值还是右值。\n事实上，剩余语句在函数参数中使用更为广泛。见 基础语法-\u0026gt;函数\n数组的解构赋值中可以使用剩余语句来将没有对应左值的余下右值放入一个数组中：\n1 2 var [a, b, ...arr] = [1, 2, 3, 4, 5]; // a = 1, b = 2, arr = [3, 4, 5] 扩展语句可以将数组展开，在数组中的应用是合并数组与元素等：\n1 2 var merged = [...array, \u0026#34;abc\u0026#34;, ...arr]; // merged = [1, 2, 3, \u0026#34;abc\u0026#34;, 3, 4, 5] 更多：MDN Array\n运算符 算数运算与比较运算\n👉👉👉 MDN 数字和操作符\nES6 中新增了幂运算，如 a 的 b 次方 a ** b\n⚠️ JS 对于非 Boolean 值的比较运算，以及非 Boolean 值到 Boolean 值的转换非常混乱与诡异，是 JS 语言中最大的败笔。遇到上述两种情况时，务必先查阅以下链接，及代码片段：\n🙈 真值表 Oh My Dear JavaScript\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 🙈 // Falsy if (false) if (null) if (undefined) if (0) if (NaN) // Not A Number if (\u0026#39;\u0026#39;) // emplty strings if (\u0026#34;\u0026#34;) // emplty strings 🙈 // Truthy if (true) if ({}) // Objects if ([]) if (42) if (\u0026#34;foo\u0026#34;) // non-empty strings if (new Date()) if (-42) if (3.14) if (-3.14) if (Infinity) if (-Infinity) 逻辑运算\n名称 运算符 描述 逻辑与(AND) expr1 \u0026amp;\u0026amp; expr2 如果 expr1 能被转换为false (falsy 值)，那么返回expr1；否则，返回expr2。 逻辑或(OR) `expr1 逻辑非(NOT) !expr 如果操作数能够转换为true (truthy 值) 则返回false；否则返回true。 ⚠️ Truthy 值与 Falsy 值可查阅以上代码。\n⚠️ 对于 Boolean 值逻辑运算符的作用与数学中相同，但对于非 Boolean 值，JS 的逻辑运算符能起到条件判断的作用，如下🙈：\n1 2 3 4 5 6 7 8 9 10 11 12 var action = input || \u0026#34;default\u0026#34;; // 若 input 为 truthy 则将 input 的值赋给 action， // 否则 action 赋值为 \u0026#34;default\u0026#34; // 作用同于 var action = input ? input : \u0026#34;default\u0026#34;; // 条件运算符见下 // 以及 if (input) { var action = input; } else { var action = \u0026#34;default\u0026#34;; } var a = b \u0026amp;\u0026amp; c; // 若 b 为 falsy 则 a = b，否则 a = c 条件运算符\ncondition ? expr1 : expr2\n若 condition 为 truthy，则对 expr1 求值并返回，否则对 expr2 求值并返回。\n更多：MDN 表达式和运算符\n流程控制 流程控制是程序设计的最根本的内容，学习完本章内容后，理论上已经可以写出任何功能的程序，只是效率和可读性上有所欠缺。\n语句与语句块\n在 if 条件语句，与 for 及 while 循环语句中，判断或循环条件后的多条语句需要用大括号 {} 包围起来，称为语句块：\n1 2 3 4 5 6 if (true) { alert(\u0026#34;这些\u0026#34;); alert(\u0026#34;语句\u0026#34;); alert(\u0026#34;都会\u0026#34;); alert(\u0026#34;执行\u0026#34;); } 而不使用 {} 时，只有判断或循环条件后的第一条语句受到该流程控制语句的作用：\n1 2 3 4 5 var count = 5; while (count--) alert(\u0026#34;这条语句会重复执行\u0026#34;); alert(\u0026#34;这两条只\u0026#34;); alert(\u0026#34;执行一次\u0026#34;); 条件语句\nJS 有两种条件语句：if\u0026hellip;else 和 switch\n👉👉👉 MDN 条件语句\n⚠️ 如果某条 case 语句后没有 break，通过该 case 条件的流程会穿过其它 case 执行直到遇到 break 语句。\n循环语句\nJS 有 5 种循环语句：\n1 2 3 4 5 6 7 8 9 10 // 这三种在本节学习 for (initialExpression; condition; incrementExpression) statement while (condition) statement do statement while (condition); // for...of 可在更多链接里学习，这是 ES6 新增的语法 for (variable of array) statement // for...in 需要在学习 JS 的面向对象之后理解 for (variable in object) statement 👉👉👉 MDN 循环吧代码\n⚠️ for 语句后如果有使用到循环变量 (在循环条件使用的变量) ，循环变量的值是第一个不满足循环条件的值，而不是最后一个满足循环条件的值。\n更多：MDN 循环和迭代\n函数 🙈 👉👉👉 MDN 函数-可复用代码块\n函数的定义与调用\n我们先来看看数学中的函数 $F(x,y)=x^3 + y + 3$。它用 JS 函数写出来是这样：\n1 2 3 function F(x, y) { return x ** 3 + y + 3; } 其中\nfunction 是申明函数的关键字 F 是 函数名，与变量命名规则相同，可省略 (x, y) 是 参数列表，由逗号分隔，没有参数时括号也不能省略 大括号 {} 包围的内容称为 函数体，是调用函数时执行的代码，可有 0 到多条语句 return 是函数的返回语句，意味着函数调用后输出的值。无 return 语句意味着不返回值 (准确的说是返回 undefined) 使用它就如同数学中的 $Let \\ \\ a = F(2, 3)$：\n1 2 var value = F(2, 3); // value 为 14 但程序语言的函数跟数学中的函数依然有着很大差别，例如程序语言的函数的参数不一定是数字 (如 alert(message) 参数是 String)，甚至可能没有参数；程序语言的函数也不一定会返回数字 (如 String#split(separator) 返回 Array)，甚至不会返回值。(# 不是 JS 的操作符，详见 DOM 操作-\u0026gt;初窥对象)\n那么没有参数或返回值的函数有什么用呢？如同前面链接里的 draw() 函数，它们提供的是 重复使用一个流程的便捷方法。\n函数返回值\n👉👉👉 MDN 函数返回值\n将函数赋值给变量\n这是 JS 中最灵活，对于初学者也最为之迷惑的特点之一，函数本身是一个变量值 (Lambda 函数)， 函数本身可以赋值给任何变量 ，乃至将函数作为函数参数、函数返回另一个函数：\n1 2 3 4 5 6 7 8 9 var f = F; // 上面定义的 F f(2, 3); // = 14 function produceFunction(welcome) { return function(name) { return `${welcome}, ${name} !`; } } produceFunction(\u0026#34;Long time no see\u0026#34;)(\u0026#34;Sandy\u0026#34;); // \u0026#34;Long time no see, Sandy !\u0026#34;\u0026#34; 前面链接中的将匿名函数赋值给一个变量，实际上就是产生了一个 函数类型 的变量值，然后这个变量值被赋值给了变量。\n任何函数类型的变量值，都可以通过函数调用操作符 () 调用。\n即时执行函数 (IIFE) 🙈\n只要将函数的定义用括号 () 包围，就可以立即用函数调用操作符 () 调用：\n1 2 3 4 (function(name) { var nothing = 0; return \u0026#34;Hello \u0026#34; + name; })(\u0026#34;Vincent\u0026#34;); // \u0026#34;Hello Vincent\u0026#34; 使用 IIFE 的一个好处就是，IIFE 内的名称不会污染到外部乃至全局 (global)。\n箭头函数 🙈\nES6 新增语法 MDN 箭头函数\n不定参数函数 🙈\n定义函数时，参数列表中的各个参数叫做 形参 (Parameters)；调用函数时，传递给函数的各个参数叫做 实参 (Arguments)。\n形参与实参的个数不一定相同。对于有确定最大参数个数的函数，参数列表里形参的数量可以与最大参数个数相等，实参数量不足时，靠后的参数值为 undefined；而对于有不确定个数参数的函数，可以使用 剩余语句 (见 基础语法-\u0026gt;数组) 来接受不定个数的参数：\n1 2 3 4 function getRestArguments(first, ...rest) { return rest; } getRestArguments(1, 2, 3, 4, 5); // [2, 3, 4, 5] 同时，可以使用 扩展语句 来将数组展开为函数参数：\n1 2 var array = [6, 7, 8, 9]; getRestArguments(...array); // [7, 8, 9] 更多：MDN 函数\nDOM 操作 文档对象模型 (Document Object Model) 是以面向对象方式描述的文档模型，利用 DOM 可以对整个网页界面进行任何操作。\n初窥对象 ⚠️ 不是去盯着男票/女票看！禁止虐狗(我)！\n泛指的对象其实是没有实际意义的抽象名词，可以用任何一个词替代，例如东西、玩意 、鬼东西、🐔儿玩意。\n前面使用的所有变量值都是一个对象，因为 它们都是一个东西 JS 将一切都视为对象。(所有对象都有名为 toString() 的方法，除了整数需要加括号才能访问外，其它任何量都可以直接访问，3.14.toString()。)\n至于为啥原始类型变成对象了，多半是借用的 Java 中原始数据类型与包装类的概念 (Java中基本数据类型和包装器类型的关系)。\n每个对象(东西)都可能有属于它的东西，称为 属性，例如数组的长度 Array#length，文档的 body 结点 document.body。(# 不是 JS 的操作符，它的意思是某种类型都有某个属性，实际使用时是对一个对象使用 . 操作符，如 [1, 2, 3].length。)\n每个对象(东西)也都可能拥有某些功能，称为 方法，例如在数组末尾添加项目 Array#push(item), 在文档中用选择器查找结点 document.querySelector(selector)。\n访问对象的属性与方法需要使用 成员访问操作符 .。\n原生 DOM 操作 🙈 👉👉👉 MDN 事件介绍\n🙈 👉👉👉 MDN 操作文档\n使用 JQuery 最流行的 DOM 操作库有 JQuery, Zepto.js 等，它们封装了基本的 DOM 操作，提供更简练的语法，进行更高效的开发。\n👉👉👉 W3school JQuery\n只需要学习 入门、HTML、遍历、AJAX 即可。动画由于现在移动端的性能需求，更多通过 CSS 来实现。\n大体上 $(selectors) 的用法与 document.querySelector(selectors) 相同。\nJS 的面向对象 本阶段：苍茫的前端是我的爱。更加庞大的 Web App 开发，以及使用主流前端框架 (React, Vue 等)。\nJS 的并发编程及其他语法 本阶段：我想深♂入了解 TA 的全♀部，以及使用 JS 后端开发。\n",
    "permalink": "https://blog.weearc.top/posts/38757/",
    "section": "Archives",
    "tags": [
      "js",
      "教程",
      "转载文章"
    ],
    "title": "js从入门到坚持（转载）"
  },
  {
    "categories": "archlinux",
    "contents": "安装之前 请确认：\n1.你安装arch Linux的目的是什么。是学习Linux吗？是为了装酷，还是寻求刺激？ 2.你将安装它到哪里？是你正在使用的电脑上，是一个即将淘汰的旧电脑上，亦或是虚拟机中？\n3.你是否了解它的安装方式？还是你打算一步一步学习如何安装？ 4.你是否了解它的优点和缺点？如果你并不不了解，你是否能承担风险? 我并不是要打消你尝试arch Linux的热情，但是arch Linux激进又高频的更新却几乎使所有使用过它的人印象深刻。频繁更新所带来的新功能和其带来的极不稳定性也为人所诟病。如果你可以在终端下面对字符愉快的玩耍，那么你使用arch Linux将不会有任何问题，但是，如果你是一个新手，那么你将需要一点时间，耐心和解决问题的能力来安装并使用arch Linux。\n准备安装 1.你可能需要确认你要安装位置，如：实体机，虚拟机，为此你将可能要额外准备例如软碟通或UUI这样的工具来帮助你将镜像文件写入U盘中 2.如果你的主力系统是Windows xp或Windows 7你可以正常的准备一定的空白磁盘空间，如果是Windows8/8.1/10，你则需要额外了解UEFI模式下Linux操作系统的安装方式\n开始安装(基础系统) 首先，你需要设置你的电脑从你的可引导设备（也就是你在前一步中的U盘） 在arch的引导菜单中，你要选择boot x86-64那项以安装arch Linux，在经过短暂的加载后你将进入Linux的shell模式下。 注意：请确保你有网络连接 如果你拥有有线连接或被Linux内核原生支持的无线网连接，那么恭喜你，可以继续安装了 首先要确保网络连接的速率\n1 ping -c 3 www.baidu.com 如果速率良好，则可继续安装。如果速率不佳则要执行：\n1 nano /etc/pacman.conf 在文件中用快捷键\n1 ^w 找到含wget那行并去除行前的“#”号，然后执行\n1 ^o 以写入改动，并用\n1 ^x 来退出nano。\n磁盘准备 在这里我们选用cfdisk图形化分区工具 在shell界面执行\n1 cfdisk 在打开的界面选择磁盘类型\n如果你是用的是已经有操作系统的计算机,请确认你的操作系统使用的磁盘类型 通常win7及以下版本的Windows使用的是有诸多限制的mbr的类型,即\u0026quot;dos\u0026quot;;而win8及以上为gpt格式的磁盘 这里就先选择传统格式DOS类型\n选择GPT类型,回车 按照传统的分区方式,将分区分为/,/home,和efi分区.\n注意 一定要将/分区选为Bootable 然后选择write选项将改动写入磁盘并退出 接下来执行\n1 mkfs.ext4 /dev/sdYX 1.这里Y代表磁盘的编号,通常以小写字母a,b,c,d\u0026hellip;表示 2.X表示分区编号,通常以数字1,2,3\u0026hellip;形式表示 3.在本文中sda1为/分区,sda2为swap分区,sda3为/home分区 4.这里涉及了efi分区。由于这个分区的特殊性，如果是双系统则不需要另外建立，如果是Archlinux单系统就需要建立一个格式为fat32的分区用来储存efi文件。\n因此执行\n1 2 mkfs.ext4 /dev/sda1 mkfs.ext4 /dev/sda3 然后执行\n1 mount /dev/sda1 /mnt 挂载分区到挂载点/ 执行\n1 mkdir /mnt/home 创建/home目录 并执行\n1 mount /dev/sda3 /mnt/home 来挂载sda3分区到/home目录 创建目录/boot/EFI,并将efi分区挂载上去\n1 2 mkdir -p /mnt/boot/EFI mount /dev/sda2 /mnt/boot/EFI pacman配置 首先配置软件源\n1 nano /etc/pacman.d/mirrorlist 寻找含有China一行的软件源并去掉句前的＃号,一般启用2,3个源即可\nLinux内核的操作系统大部分的调整都是通过修改配置文件进行的 有诸多选项是可进行选择的,而大部分配置文件会预先给出选项,因此只需删除句前的＃号即可启用选项,而保留＃的哪一航被称为\u0026quot;注释掉了\u0026quot;\n最后执行\n1 pacman -Syy 强制刷新软件源. 至此,包管理器pacman配置完成\n基础系统安装 执行\n1 pacstrap -i /mnt base base-devel 来安装基础系统 待安装完成,使用\n1 fstab -t LABEL -p /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 添加分区的UUID标记。UUID之后也可能会无数次用到遇到。需要特殊注意。\n更新：fstab使用UUID虽然是推荐的但是很是麻烦，因此个人建议个人使用时候使用卷标即可。\n记得执行：\n1 cat /mnt/etc/fstab 来查看内容是否正确生成。\n至此，基础系统安装和准备全部完毕。\n",
    "permalink": "https://blog.weearc.top/posts/7521/",
    "section": "Archives",
    "tags": [
      "archlinux",
      "linux"
    ],
    "title": "archlinux安装配置(1)"
  },
  {
    "categories": null,
    "contents": "我在 OBS 上维护了一些软件包:\n地址： https://build.opensuse.org/project/show/home:weearcm\nTODO ",
    "permalink": "https://blog.weearc.top/repo/",
    "section": "weearc 的个人博客",
    "tags": null,
    "title": "Repo"
  },
  {
    "categories": null,
    "contents": "",
    "permalink": "https://blog.weearc.top/about/",
    "section": "weearc 的个人博客",
    "tags": null,
    "title": "关于我"
  },
  {
    "categories": null,
    "contents": "",
    "permalink": "https://blog.weearc.top/frlink/",
    "section": "weearc 的个人博客",
    "tags": null,
    "title": "友链"
  }
]